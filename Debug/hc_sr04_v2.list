
hc_sr04_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008864  08008864  00018864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089b8  080089b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080089b8  080089b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089c0  080089c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089c0  080089c0  000189c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089c4  080089c4  000189c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080089c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fbc  20000010  080089d8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001fcc  080089d8  00021fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e97  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a8e  00000000  00000000  00041ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a40  00000000  00000000  00045968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001898  00000000  00000000  000473a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e4b  00000000  00000000  00048c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001563a  00000000  00000000  0004ca8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114872  00000000  00000000  000620c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176937  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007108  00000000  00000000  001769b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800884c 	.word	0x0800884c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	0800884c 	.word	0x0800884c

08000200 <__aeabi_frsub>:
 8000200:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__addsf3>
 8000206:	bf00      	nop

08000208 <__aeabi_fsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800020c <__addsf3>:
 800020c:	0042      	lsls	r2, r0, #1
 800020e:	bf1f      	itttt	ne
 8000210:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000214:	ea92 0f03 	teqne	r2, r3
 8000218:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800021c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000220:	d06a      	beq.n	80002f8 <__addsf3+0xec>
 8000222:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000226:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800022a:	bfc1      	itttt	gt
 800022c:	18d2      	addgt	r2, r2, r3
 800022e:	4041      	eorgt	r1, r0
 8000230:	4048      	eorgt	r0, r1
 8000232:	4041      	eorgt	r1, r0
 8000234:	bfb8      	it	lt
 8000236:	425b      	neglt	r3, r3
 8000238:	2b19      	cmp	r3, #25
 800023a:	bf88      	it	hi
 800023c:	4770      	bxhi	lr
 800023e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000242:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000246:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800024a:	bf18      	it	ne
 800024c:	4240      	negne	r0, r0
 800024e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000252:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000256:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800025a:	bf18      	it	ne
 800025c:	4249      	negne	r1, r1
 800025e:	ea92 0f03 	teq	r2, r3
 8000262:	d03f      	beq.n	80002e4 <__addsf3+0xd8>
 8000264:	f1a2 0201 	sub.w	r2, r2, #1
 8000268:	fa41 fc03 	asr.w	ip, r1, r3
 800026c:	eb10 000c 	adds.w	r0, r0, ip
 8000270:	f1c3 0320 	rsb	r3, r3, #32
 8000274:	fa01 f103 	lsl.w	r1, r1, r3
 8000278:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800027c:	d502      	bpl.n	8000284 <__addsf3+0x78>
 800027e:	4249      	negs	r1, r1
 8000280:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000284:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000288:	d313      	bcc.n	80002b2 <__addsf3+0xa6>
 800028a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028e:	d306      	bcc.n	800029e <__addsf3+0x92>
 8000290:	0840      	lsrs	r0, r0, #1
 8000292:	ea4f 0131 	mov.w	r1, r1, rrx
 8000296:	f102 0201 	add.w	r2, r2, #1
 800029a:	2afe      	cmp	r2, #254	; 0xfe
 800029c:	d251      	bcs.n	8000342 <__addsf3+0x136>
 800029e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002a6:	bf08      	it	eq
 80002a8:	f020 0001 	biceq.w	r0, r0, #1
 80002ac:	ea40 0003 	orr.w	r0, r0, r3
 80002b0:	4770      	bx	lr
 80002b2:	0049      	lsls	r1, r1, #1
 80002b4:	eb40 0000 	adc.w	r0, r0, r0
 80002b8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002bc:	f1a2 0201 	sub.w	r2, r2, #1
 80002c0:	d1ed      	bne.n	800029e <__addsf3+0x92>
 80002c2:	fab0 fc80 	clz	ip, r0
 80002c6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ca:	ebb2 020c 	subs.w	r2, r2, ip
 80002ce:	fa00 f00c 	lsl.w	r0, r0, ip
 80002d2:	bfaa      	itet	ge
 80002d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002d8:	4252      	neglt	r2, r2
 80002da:	4318      	orrge	r0, r3
 80002dc:	bfbc      	itt	lt
 80002de:	40d0      	lsrlt	r0, r2
 80002e0:	4318      	orrlt	r0, r3
 80002e2:	4770      	bx	lr
 80002e4:	f092 0f00 	teq	r2, #0
 80002e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002ec:	bf06      	itte	eq
 80002ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002f2:	3201      	addeq	r2, #1
 80002f4:	3b01      	subne	r3, #1
 80002f6:	e7b5      	b.n	8000264 <__addsf3+0x58>
 80002f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000300:	bf18      	it	ne
 8000302:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000306:	d021      	beq.n	800034c <__addsf3+0x140>
 8000308:	ea92 0f03 	teq	r2, r3
 800030c:	d004      	beq.n	8000318 <__addsf3+0x10c>
 800030e:	f092 0f00 	teq	r2, #0
 8000312:	bf08      	it	eq
 8000314:	4608      	moveq	r0, r1
 8000316:	4770      	bx	lr
 8000318:	ea90 0f01 	teq	r0, r1
 800031c:	bf1c      	itt	ne
 800031e:	2000      	movne	r0, #0
 8000320:	4770      	bxne	lr
 8000322:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000326:	d104      	bne.n	8000332 <__addsf3+0x126>
 8000328:	0040      	lsls	r0, r0, #1
 800032a:	bf28      	it	cs
 800032c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000330:	4770      	bx	lr
 8000332:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000336:	bf3c      	itt	cc
 8000338:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800033c:	4770      	bxcc	lr
 800033e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000342:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000346:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800034a:	4770      	bx	lr
 800034c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000350:	bf16      	itet	ne
 8000352:	4608      	movne	r0, r1
 8000354:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000358:	4601      	movne	r1, r0
 800035a:	0242      	lsls	r2, r0, #9
 800035c:	bf06      	itte	eq
 800035e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000362:	ea90 0f01 	teqeq	r0, r1
 8000366:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800036a:	4770      	bx	lr

0800036c <__aeabi_ui2f>:
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	e004      	b.n	800037c <__aeabi_i2f+0x8>
 8000372:	bf00      	nop

08000374 <__aeabi_i2f>:
 8000374:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000378:	bf48      	it	mi
 800037a:	4240      	negmi	r0, r0
 800037c:	ea5f 0c00 	movs.w	ip, r0
 8000380:	bf08      	it	eq
 8000382:	4770      	bxeq	lr
 8000384:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000388:	4601      	mov	r1, r0
 800038a:	f04f 0000 	mov.w	r0, #0
 800038e:	e01c      	b.n	80003ca <__aeabi_l2f+0x2a>

08000390 <__aeabi_ul2f>:
 8000390:	ea50 0201 	orrs.w	r2, r0, r1
 8000394:	bf08      	it	eq
 8000396:	4770      	bxeq	lr
 8000398:	f04f 0300 	mov.w	r3, #0
 800039c:	e00a      	b.n	80003b4 <__aeabi_l2f+0x14>
 800039e:	bf00      	nop

080003a0 <__aeabi_l2f>:
 80003a0:	ea50 0201 	orrs.w	r2, r0, r1
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003ac:	d502      	bpl.n	80003b4 <__aeabi_l2f+0x14>
 80003ae:	4240      	negs	r0, r0
 80003b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b4:	ea5f 0c01 	movs.w	ip, r1
 80003b8:	bf02      	ittt	eq
 80003ba:	4684      	moveq	ip, r0
 80003bc:	4601      	moveq	r1, r0
 80003be:	2000      	moveq	r0, #0
 80003c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003c4:	bf08      	it	eq
 80003c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003ce:	fabc f28c 	clz	r2, ip
 80003d2:	3a08      	subs	r2, #8
 80003d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003d8:	db10      	blt.n	80003fc <__aeabi_l2f+0x5c>
 80003da:	fa01 fc02 	lsl.w	ip, r1, r2
 80003de:	4463      	add	r3, ip
 80003e0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003e4:	f1c2 0220 	rsb	r2, r2, #32
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	fa20 f202 	lsr.w	r2, r0, r2
 80003f0:	eb43 0002 	adc.w	r0, r3, r2
 80003f4:	bf08      	it	eq
 80003f6:	f020 0001 	biceq.w	r0, r0, #1
 80003fa:	4770      	bx	lr
 80003fc:	f102 0220 	add.w	r2, r2, #32
 8000400:	fa01 fc02 	lsl.w	ip, r1, r2
 8000404:	f1c2 0220 	rsb	r2, r2, #32
 8000408:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800040c:	fa21 f202 	lsr.w	r2, r1, r2
 8000410:	eb43 0002 	adc.w	r0, r3, r2
 8000414:	bf08      	it	eq
 8000416:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800041a:	4770      	bx	lr

0800041c <__aeabi_uldivmod>:
 800041c:	b953      	cbnz	r3, 8000434 <__aeabi_uldivmod+0x18>
 800041e:	b94a      	cbnz	r2, 8000434 <__aeabi_uldivmod+0x18>
 8000420:	2900      	cmp	r1, #0
 8000422:	bf08      	it	eq
 8000424:	2800      	cmpeq	r0, #0
 8000426:	bf1c      	itt	ne
 8000428:	f04f 31ff 	movne.w	r1, #4294967295
 800042c:	f04f 30ff 	movne.w	r0, #4294967295
 8000430:	f000 b996 	b.w	8000760 <__aeabi_idiv0>
 8000434:	f1ad 0c08 	sub.w	ip, sp, #8
 8000438:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800043c:	f000 f82a 	bl	8000494 <__udivmoddi4>
 8000440:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000448:	b004      	add	sp, #16
 800044a:	4770      	bx	lr

0800044c <__aeabi_f2ulz>:
 800044c:	b5d0      	push	{r4, r6, r7, lr}
 800044e:	f000 faed 	bl	8000a2c <__aeabi_f2d>
 8000452:	2200      	movs	r2, #0
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__aeabi_f2ulz+0x40>)
 8000456:	4606      	mov	r6, r0
 8000458:	460f      	mov	r7, r1
 800045a:	f000 fb3f 	bl	8000adc <__aeabi_dmul>
 800045e:	f000 fd4f 	bl	8000f00 <__aeabi_d2uiz>
 8000462:	4604      	mov	r4, r0
 8000464:	f000 fac0 	bl	80009e8 <__aeabi_ui2d>
 8000468:	2200      	movs	r2, #0
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <__aeabi_f2ulz+0x44>)
 800046c:	f000 fb36 	bl	8000adc <__aeabi_dmul>
 8000470:	4602      	mov	r2, r0
 8000472:	460b      	mov	r3, r1
 8000474:	4630      	mov	r0, r6
 8000476:	4639      	mov	r1, r7
 8000478:	f000 f978 	bl	800076c <__aeabi_dsub>
 800047c:	f000 fd40 	bl	8000f00 <__aeabi_d2uiz>
 8000480:	2200      	movs	r2, #0
 8000482:	4623      	mov	r3, r4
 8000484:	4310      	orrs	r0, r2
 8000486:	4619      	mov	r1, r3
 8000488:	bdd0      	pop	{r4, r6, r7, pc}
 800048a:	bf00      	nop
 800048c:	3df00000 	.word	0x3df00000
 8000490:	41f00000 	.word	0x41f00000

08000494 <__udivmoddi4>:
 8000494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000498:	9e08      	ldr	r6, [sp, #32]
 800049a:	4604      	mov	r4, r0
 800049c:	4688      	mov	r8, r1
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d14b      	bne.n	800053a <__udivmoddi4+0xa6>
 80004a2:	428a      	cmp	r2, r1
 80004a4:	4615      	mov	r5, r2
 80004a6:	d967      	bls.n	8000578 <__udivmoddi4+0xe4>
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	b14a      	cbz	r2, 80004c2 <__udivmoddi4+0x2e>
 80004ae:	f1c2 0720 	rsb	r7, r2, #32
 80004b2:	fa01 f302 	lsl.w	r3, r1, r2
 80004b6:	fa20 f707 	lsr.w	r7, r0, r7
 80004ba:	4095      	lsls	r5, r2
 80004bc:	ea47 0803 	orr.w	r8, r7, r3
 80004c0:	4094      	lsls	r4, r2
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	0c23      	lsrs	r3, r4, #16
 80004c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80004cc:	fa1f fc85 	uxth.w	ip, r5
 80004d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80004d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004d8:	fb07 f10c 	mul.w	r1, r7, ip
 80004dc:	4299      	cmp	r1, r3
 80004de:	d909      	bls.n	80004f4 <__udivmoddi4+0x60>
 80004e0:	18eb      	adds	r3, r5, r3
 80004e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80004e6:	f080 811b 	bcs.w	8000720 <__udivmoddi4+0x28c>
 80004ea:	4299      	cmp	r1, r3
 80004ec:	f240 8118 	bls.w	8000720 <__udivmoddi4+0x28c>
 80004f0:	3f02      	subs	r7, #2
 80004f2:	442b      	add	r3, r5
 80004f4:	1a5b      	subs	r3, r3, r1
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000500:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000504:	fb00 fc0c 	mul.w	ip, r0, ip
 8000508:	45a4      	cmp	ip, r4
 800050a:	d909      	bls.n	8000520 <__udivmoddi4+0x8c>
 800050c:	192c      	adds	r4, r5, r4
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	f080 8107 	bcs.w	8000724 <__udivmoddi4+0x290>
 8000516:	45a4      	cmp	ip, r4
 8000518:	f240 8104 	bls.w	8000724 <__udivmoddi4+0x290>
 800051c:	3802      	subs	r0, #2
 800051e:	442c      	add	r4, r5
 8000520:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000524:	eba4 040c 	sub.w	r4, r4, ip
 8000528:	2700      	movs	r7, #0
 800052a:	b11e      	cbz	r6, 8000534 <__udivmoddi4+0xa0>
 800052c:	40d4      	lsrs	r4, r2
 800052e:	2300      	movs	r3, #0
 8000530:	e9c6 4300 	strd	r4, r3, [r6]
 8000534:	4639      	mov	r1, r7
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	428b      	cmp	r3, r1
 800053c:	d909      	bls.n	8000552 <__udivmoddi4+0xbe>
 800053e:	2e00      	cmp	r6, #0
 8000540:	f000 80eb 	beq.w	800071a <__udivmoddi4+0x286>
 8000544:	2700      	movs	r7, #0
 8000546:	e9c6 0100 	strd	r0, r1, [r6]
 800054a:	4638      	mov	r0, r7
 800054c:	4639      	mov	r1, r7
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	fab3 f783 	clz	r7, r3
 8000556:	2f00      	cmp	r7, #0
 8000558:	d147      	bne.n	80005ea <__udivmoddi4+0x156>
 800055a:	428b      	cmp	r3, r1
 800055c:	d302      	bcc.n	8000564 <__udivmoddi4+0xd0>
 800055e:	4282      	cmp	r2, r0
 8000560:	f200 80fa 	bhi.w	8000758 <__udivmoddi4+0x2c4>
 8000564:	1a84      	subs	r4, r0, r2
 8000566:	eb61 0303 	sbc.w	r3, r1, r3
 800056a:	2001      	movs	r0, #1
 800056c:	4698      	mov	r8, r3
 800056e:	2e00      	cmp	r6, #0
 8000570:	d0e0      	beq.n	8000534 <__udivmoddi4+0xa0>
 8000572:	e9c6 4800 	strd	r4, r8, [r6]
 8000576:	e7dd      	b.n	8000534 <__udivmoddi4+0xa0>
 8000578:	b902      	cbnz	r2, 800057c <__udivmoddi4+0xe8>
 800057a:	deff      	udf	#255	; 0xff
 800057c:	fab2 f282 	clz	r2, r2
 8000580:	2a00      	cmp	r2, #0
 8000582:	f040 808f 	bne.w	80006a4 <__udivmoddi4+0x210>
 8000586:	1b49      	subs	r1, r1, r5
 8000588:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800058c:	fa1f f885 	uxth.w	r8, r5
 8000590:	2701      	movs	r7, #1
 8000592:	fbb1 fcfe 	udiv	ip, r1, lr
 8000596:	0c23      	lsrs	r3, r4, #16
 8000598:	fb0e 111c 	mls	r1, lr, ip, r1
 800059c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a0:	fb08 f10c 	mul.w	r1, r8, ip
 80005a4:	4299      	cmp	r1, r3
 80005a6:	d907      	bls.n	80005b8 <__udivmoddi4+0x124>
 80005a8:	18eb      	adds	r3, r5, r3
 80005aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005ae:	d202      	bcs.n	80005b6 <__udivmoddi4+0x122>
 80005b0:	4299      	cmp	r1, r3
 80005b2:	f200 80cd 	bhi.w	8000750 <__udivmoddi4+0x2bc>
 80005b6:	4684      	mov	ip, r0
 80005b8:	1a59      	subs	r1, r3, r1
 80005ba:	b2a3      	uxth	r3, r4
 80005bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80005c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80005c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005c8:	fb08 f800 	mul.w	r8, r8, r0
 80005cc:	45a0      	cmp	r8, r4
 80005ce:	d907      	bls.n	80005e0 <__udivmoddi4+0x14c>
 80005d0:	192c      	adds	r4, r5, r4
 80005d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80005d6:	d202      	bcs.n	80005de <__udivmoddi4+0x14a>
 80005d8:	45a0      	cmp	r8, r4
 80005da:	f200 80b6 	bhi.w	800074a <__udivmoddi4+0x2b6>
 80005de:	4618      	mov	r0, r3
 80005e0:	eba4 0408 	sub.w	r4, r4, r8
 80005e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005e8:	e79f      	b.n	800052a <__udivmoddi4+0x96>
 80005ea:	f1c7 0c20 	rsb	ip, r7, #32
 80005ee:	40bb      	lsls	r3, r7
 80005f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80005f8:	fa01 f407 	lsl.w	r4, r1, r7
 80005fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000600:	fa21 f30c 	lsr.w	r3, r1, ip
 8000604:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000608:	4325      	orrs	r5, r4
 800060a:	fbb3 f9f8 	udiv	r9, r3, r8
 800060e:	0c2c      	lsrs	r4, r5, #16
 8000610:	fb08 3319 	mls	r3, r8, r9, r3
 8000614:	fa1f fa8e 	uxth.w	sl, lr
 8000618:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800061c:	fb09 f40a 	mul.w	r4, r9, sl
 8000620:	429c      	cmp	r4, r3
 8000622:	fa02 f207 	lsl.w	r2, r2, r7
 8000626:	fa00 f107 	lsl.w	r1, r0, r7
 800062a:	d90b      	bls.n	8000644 <__udivmoddi4+0x1b0>
 800062c:	eb1e 0303 	adds.w	r3, lr, r3
 8000630:	f109 30ff 	add.w	r0, r9, #4294967295
 8000634:	f080 8087 	bcs.w	8000746 <__udivmoddi4+0x2b2>
 8000638:	429c      	cmp	r4, r3
 800063a:	f240 8084 	bls.w	8000746 <__udivmoddi4+0x2b2>
 800063e:	f1a9 0902 	sub.w	r9, r9, #2
 8000642:	4473      	add	r3, lr
 8000644:	1b1b      	subs	r3, r3, r4
 8000646:	b2ad      	uxth	r5, r5
 8000648:	fbb3 f0f8 	udiv	r0, r3, r8
 800064c:	fb08 3310 	mls	r3, r8, r0, r3
 8000650:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000654:	fb00 fa0a 	mul.w	sl, r0, sl
 8000658:	45a2      	cmp	sl, r4
 800065a:	d908      	bls.n	800066e <__udivmoddi4+0x1da>
 800065c:	eb1e 0404 	adds.w	r4, lr, r4
 8000660:	f100 33ff 	add.w	r3, r0, #4294967295
 8000664:	d26b      	bcs.n	800073e <__udivmoddi4+0x2aa>
 8000666:	45a2      	cmp	sl, r4
 8000668:	d969      	bls.n	800073e <__udivmoddi4+0x2aa>
 800066a:	3802      	subs	r0, #2
 800066c:	4474      	add	r4, lr
 800066e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000672:	fba0 8902 	umull	r8, r9, r0, r2
 8000676:	eba4 040a 	sub.w	r4, r4, sl
 800067a:	454c      	cmp	r4, r9
 800067c:	46c2      	mov	sl, r8
 800067e:	464b      	mov	r3, r9
 8000680:	d354      	bcc.n	800072c <__udivmoddi4+0x298>
 8000682:	d051      	beq.n	8000728 <__udivmoddi4+0x294>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d069      	beq.n	800075c <__udivmoddi4+0x2c8>
 8000688:	ebb1 050a 	subs.w	r5, r1, sl
 800068c:	eb64 0403 	sbc.w	r4, r4, r3
 8000690:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000694:	40fd      	lsrs	r5, r7
 8000696:	40fc      	lsrs	r4, r7
 8000698:	ea4c 0505 	orr.w	r5, ip, r5
 800069c:	e9c6 5400 	strd	r5, r4, [r6]
 80006a0:	2700      	movs	r7, #0
 80006a2:	e747      	b.n	8000534 <__udivmoddi4+0xa0>
 80006a4:	f1c2 0320 	rsb	r3, r2, #32
 80006a8:	fa20 f703 	lsr.w	r7, r0, r3
 80006ac:	4095      	lsls	r5, r2
 80006ae:	fa01 f002 	lsl.w	r0, r1, r2
 80006b2:	fa21 f303 	lsr.w	r3, r1, r3
 80006b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ba:	4338      	orrs	r0, r7
 80006bc:	0c01      	lsrs	r1, r0, #16
 80006be:	fbb3 f7fe 	udiv	r7, r3, lr
 80006c2:	fa1f f885 	uxth.w	r8, r5
 80006c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80006ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ce:	fb07 f308 	mul.w	r3, r7, r8
 80006d2:	428b      	cmp	r3, r1
 80006d4:	fa04 f402 	lsl.w	r4, r4, r2
 80006d8:	d907      	bls.n	80006ea <__udivmoddi4+0x256>
 80006da:	1869      	adds	r1, r5, r1
 80006dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80006e0:	d22f      	bcs.n	8000742 <__udivmoddi4+0x2ae>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d92d      	bls.n	8000742 <__udivmoddi4+0x2ae>
 80006e6:	3f02      	subs	r7, #2
 80006e8:	4429      	add	r1, r5
 80006ea:	1acb      	subs	r3, r1, r3
 80006ec:	b281      	uxth	r1, r0
 80006ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006fa:	fb00 f308 	mul.w	r3, r0, r8
 80006fe:	428b      	cmp	r3, r1
 8000700:	d907      	bls.n	8000712 <__udivmoddi4+0x27e>
 8000702:	1869      	adds	r1, r5, r1
 8000704:	f100 3cff 	add.w	ip, r0, #4294967295
 8000708:	d217      	bcs.n	800073a <__udivmoddi4+0x2a6>
 800070a:	428b      	cmp	r3, r1
 800070c:	d915      	bls.n	800073a <__udivmoddi4+0x2a6>
 800070e:	3802      	subs	r0, #2
 8000710:	4429      	add	r1, r5
 8000712:	1ac9      	subs	r1, r1, r3
 8000714:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000718:	e73b      	b.n	8000592 <__udivmoddi4+0xfe>
 800071a:	4637      	mov	r7, r6
 800071c:	4630      	mov	r0, r6
 800071e:	e709      	b.n	8000534 <__udivmoddi4+0xa0>
 8000720:	4607      	mov	r7, r0
 8000722:	e6e7      	b.n	80004f4 <__udivmoddi4+0x60>
 8000724:	4618      	mov	r0, r3
 8000726:	e6fb      	b.n	8000520 <__udivmoddi4+0x8c>
 8000728:	4541      	cmp	r1, r8
 800072a:	d2ab      	bcs.n	8000684 <__udivmoddi4+0x1f0>
 800072c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000730:	eb69 020e 	sbc.w	r2, r9, lr
 8000734:	3801      	subs	r0, #1
 8000736:	4613      	mov	r3, r2
 8000738:	e7a4      	b.n	8000684 <__udivmoddi4+0x1f0>
 800073a:	4660      	mov	r0, ip
 800073c:	e7e9      	b.n	8000712 <__udivmoddi4+0x27e>
 800073e:	4618      	mov	r0, r3
 8000740:	e795      	b.n	800066e <__udivmoddi4+0x1da>
 8000742:	4667      	mov	r7, ip
 8000744:	e7d1      	b.n	80006ea <__udivmoddi4+0x256>
 8000746:	4681      	mov	r9, r0
 8000748:	e77c      	b.n	8000644 <__udivmoddi4+0x1b0>
 800074a:	3802      	subs	r0, #2
 800074c:	442c      	add	r4, r5
 800074e:	e747      	b.n	80005e0 <__udivmoddi4+0x14c>
 8000750:	f1ac 0c02 	sub.w	ip, ip, #2
 8000754:	442b      	add	r3, r5
 8000756:	e72f      	b.n	80005b8 <__udivmoddi4+0x124>
 8000758:	4638      	mov	r0, r7
 800075a:	e708      	b.n	800056e <__udivmoddi4+0xda>
 800075c:	4637      	mov	r7, r6
 800075e:	e6e9      	b.n	8000534 <__udivmoddi4+0xa0>

08000760 <__aeabi_idiv0>:
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <__aeabi_drsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000768:	e002      	b.n	8000770 <__adddf3>
 800076a:	bf00      	nop

0800076c <__aeabi_dsub>:
 800076c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000770 <__adddf3>:
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000776:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800077a:	ea94 0f05 	teq	r4, r5
 800077e:	bf08      	it	eq
 8000780:	ea90 0f02 	teqeq	r0, r2
 8000784:	bf1f      	itttt	ne
 8000786:	ea54 0c00 	orrsne.w	ip, r4, r0
 800078a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800078e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000792:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000796:	f000 80e2 	beq.w	800095e <__adddf3+0x1ee>
 800079a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800079e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80007a2:	bfb8      	it	lt
 80007a4:	426d      	neglt	r5, r5
 80007a6:	dd0c      	ble.n	80007c2 <__adddf3+0x52>
 80007a8:	442c      	add	r4, r5
 80007aa:	ea80 0202 	eor.w	r2, r0, r2
 80007ae:	ea81 0303 	eor.w	r3, r1, r3
 80007b2:	ea82 0000 	eor.w	r0, r2, r0
 80007b6:	ea83 0101 	eor.w	r1, r3, r1
 80007ba:	ea80 0202 	eor.w	r2, r0, r2
 80007be:	ea81 0303 	eor.w	r3, r1, r3
 80007c2:	2d36      	cmp	r5, #54	; 0x36
 80007c4:	bf88      	it	hi
 80007c6:	bd30      	pophi	{r4, r5, pc}
 80007c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80007d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80007d8:	d002      	beq.n	80007e0 <__adddf3+0x70>
 80007da:	4240      	negs	r0, r0
 80007dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80007ec:	d002      	beq.n	80007f4 <__adddf3+0x84>
 80007ee:	4252      	negs	r2, r2
 80007f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f4:	ea94 0f05 	teq	r4, r5
 80007f8:	f000 80a7 	beq.w	800094a <__adddf3+0x1da>
 80007fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000800:	f1d5 0e20 	rsbs	lr, r5, #32
 8000804:	db0d      	blt.n	8000822 <__adddf3+0xb2>
 8000806:	fa02 fc0e 	lsl.w	ip, r2, lr
 800080a:	fa22 f205 	lsr.w	r2, r2, r5
 800080e:	1880      	adds	r0, r0, r2
 8000810:	f141 0100 	adc.w	r1, r1, #0
 8000814:	fa03 f20e 	lsl.w	r2, r3, lr
 8000818:	1880      	adds	r0, r0, r2
 800081a:	fa43 f305 	asr.w	r3, r3, r5
 800081e:	4159      	adcs	r1, r3
 8000820:	e00e      	b.n	8000840 <__adddf3+0xd0>
 8000822:	f1a5 0520 	sub.w	r5, r5, #32
 8000826:	f10e 0e20 	add.w	lr, lr, #32
 800082a:	2a01      	cmp	r2, #1
 800082c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000830:	bf28      	it	cs
 8000832:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000836:	fa43 f305 	asr.w	r3, r3, r5
 800083a:	18c0      	adds	r0, r0, r3
 800083c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000840:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000844:	d507      	bpl.n	8000856 <__adddf3+0xe6>
 8000846:	f04f 0e00 	mov.w	lr, #0
 800084a:	f1dc 0c00 	rsbs	ip, ip, #0
 800084e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000852:	eb6e 0101 	sbc.w	r1, lr, r1
 8000856:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800085a:	d31b      	bcc.n	8000894 <__adddf3+0x124>
 800085c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000860:	d30c      	bcc.n	800087c <__adddf3+0x10c>
 8000862:	0849      	lsrs	r1, r1, #1
 8000864:	ea5f 0030 	movs.w	r0, r0, rrx
 8000868:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800086c:	f104 0401 	add.w	r4, r4, #1
 8000870:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000874:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000878:	f080 809a 	bcs.w	80009b0 <__adddf3+0x240>
 800087c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000880:	bf08      	it	eq
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	ea41 0105 	orr.w	r1, r1, r5
 8000892:	bd30      	pop	{r4, r5, pc}
 8000894:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000898:	4140      	adcs	r0, r0
 800089a:	eb41 0101 	adc.w	r1, r1, r1
 800089e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a2:	f1a4 0401 	sub.w	r4, r4, #1
 80008a6:	d1e9      	bne.n	800087c <__adddf3+0x10c>
 80008a8:	f091 0f00 	teq	r1, #0
 80008ac:	bf04      	itt	eq
 80008ae:	4601      	moveq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	fab1 f381 	clz	r3, r1
 80008b6:	bf08      	it	eq
 80008b8:	3320      	addeq	r3, #32
 80008ba:	f1a3 030b 	sub.w	r3, r3, #11
 80008be:	f1b3 0220 	subs.w	r2, r3, #32
 80008c2:	da0c      	bge.n	80008de <__adddf3+0x16e>
 80008c4:	320c      	adds	r2, #12
 80008c6:	dd08      	ble.n	80008da <__adddf3+0x16a>
 80008c8:	f102 0c14 	add.w	ip, r2, #20
 80008cc:	f1c2 020c 	rsb	r2, r2, #12
 80008d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80008d4:	fa21 f102 	lsr.w	r1, r1, r2
 80008d8:	e00c      	b.n	80008f4 <__adddf3+0x184>
 80008da:	f102 0214 	add.w	r2, r2, #20
 80008de:	bfd8      	it	le
 80008e0:	f1c2 0c20 	rsble	ip, r2, #32
 80008e4:	fa01 f102 	lsl.w	r1, r1, r2
 80008e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80008ec:	bfdc      	itt	le
 80008ee:	ea41 010c 	orrle.w	r1, r1, ip
 80008f2:	4090      	lslle	r0, r2
 80008f4:	1ae4      	subs	r4, r4, r3
 80008f6:	bfa2      	ittt	ge
 80008f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80008fc:	4329      	orrge	r1, r5
 80008fe:	bd30      	popge	{r4, r5, pc}
 8000900:	ea6f 0404 	mvn.w	r4, r4
 8000904:	3c1f      	subs	r4, #31
 8000906:	da1c      	bge.n	8000942 <__adddf3+0x1d2>
 8000908:	340c      	adds	r4, #12
 800090a:	dc0e      	bgt.n	800092a <__adddf3+0x1ba>
 800090c:	f104 0414 	add.w	r4, r4, #20
 8000910:	f1c4 0220 	rsb	r2, r4, #32
 8000914:	fa20 f004 	lsr.w	r0, r0, r4
 8000918:	fa01 f302 	lsl.w	r3, r1, r2
 800091c:	ea40 0003 	orr.w	r0, r0, r3
 8000920:	fa21 f304 	lsr.w	r3, r1, r4
 8000924:	ea45 0103 	orr.w	r1, r5, r3
 8000928:	bd30      	pop	{r4, r5, pc}
 800092a:	f1c4 040c 	rsb	r4, r4, #12
 800092e:	f1c4 0220 	rsb	r2, r4, #32
 8000932:	fa20 f002 	lsr.w	r0, r0, r2
 8000936:	fa01 f304 	lsl.w	r3, r1, r4
 800093a:	ea40 0003 	orr.w	r0, r0, r3
 800093e:	4629      	mov	r1, r5
 8000940:	bd30      	pop	{r4, r5, pc}
 8000942:	fa21 f004 	lsr.w	r0, r1, r4
 8000946:	4629      	mov	r1, r5
 8000948:	bd30      	pop	{r4, r5, pc}
 800094a:	f094 0f00 	teq	r4, #0
 800094e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000952:	bf06      	itte	eq
 8000954:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000958:	3401      	addeq	r4, #1
 800095a:	3d01      	subne	r5, #1
 800095c:	e74e      	b.n	80007fc <__adddf3+0x8c>
 800095e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000962:	bf18      	it	ne
 8000964:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000968:	d029      	beq.n	80009be <__adddf3+0x24e>
 800096a:	ea94 0f05 	teq	r4, r5
 800096e:	bf08      	it	eq
 8000970:	ea90 0f02 	teqeq	r0, r2
 8000974:	d005      	beq.n	8000982 <__adddf3+0x212>
 8000976:	ea54 0c00 	orrs.w	ip, r4, r0
 800097a:	bf04      	itt	eq
 800097c:	4619      	moveq	r1, r3
 800097e:	4610      	moveq	r0, r2
 8000980:	bd30      	pop	{r4, r5, pc}
 8000982:	ea91 0f03 	teq	r1, r3
 8000986:	bf1e      	ittt	ne
 8000988:	2100      	movne	r1, #0
 800098a:	2000      	movne	r0, #0
 800098c:	bd30      	popne	{r4, r5, pc}
 800098e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000992:	d105      	bne.n	80009a0 <__adddf3+0x230>
 8000994:	0040      	lsls	r0, r0, #1
 8000996:	4149      	adcs	r1, r1
 8000998:	bf28      	it	cs
 800099a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800099e:	bd30      	pop	{r4, r5, pc}
 80009a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80009a4:	bf3c      	itt	cc
 80009a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80009aa:	bd30      	popcc	{r4, r5, pc}
 80009ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80009b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80009b8:	f04f 0000 	mov.w	r0, #0
 80009bc:	bd30      	pop	{r4, r5, pc}
 80009be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80009c2:	bf1a      	itte	ne
 80009c4:	4619      	movne	r1, r3
 80009c6:	4610      	movne	r0, r2
 80009c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80009cc:	bf1c      	itt	ne
 80009ce:	460b      	movne	r3, r1
 80009d0:	4602      	movne	r2, r0
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	bf06      	itte	eq
 80009d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80009dc:	ea91 0f03 	teqeq	r1, r3
 80009e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80009e4:	bd30      	pop	{r4, r5, pc}
 80009e6:	bf00      	nop

080009e8 <__aeabi_ui2d>:
 80009e8:	f090 0f00 	teq	r0, #0
 80009ec:	bf04      	itt	eq
 80009ee:	2100      	moveq	r1, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	b530      	push	{r4, r5, lr}
 80009f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009fc:	f04f 0500 	mov.w	r5, #0
 8000a00:	f04f 0100 	mov.w	r1, #0
 8000a04:	e750      	b.n	80008a8 <__adddf3+0x138>
 8000a06:	bf00      	nop

08000a08 <__aeabi_i2d>:
 8000a08:	f090 0f00 	teq	r0, #0
 8000a0c:	bf04      	itt	eq
 8000a0e:	2100      	moveq	r1, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	b530      	push	{r4, r5, lr}
 8000a14:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a18:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000a20:	bf48      	it	mi
 8000a22:	4240      	negmi	r0, r0
 8000a24:	f04f 0100 	mov.w	r1, #0
 8000a28:	e73e      	b.n	80008a8 <__adddf3+0x138>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_f2d>:
 8000a2c:	0042      	lsls	r2, r0, #1
 8000a2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000a32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a36:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000a3a:	bf1f      	itttt	ne
 8000a3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000a40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000a44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000a48:	4770      	bxne	lr
 8000a4a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000a4e:	bf08      	it	eq
 8000a50:	4770      	bxeq	lr
 8000a52:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000a56:	bf04      	itt	eq
 8000a58:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000a5c:	4770      	bxeq	lr
 8000a5e:	b530      	push	{r4, r5, lr}
 8000a60:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000a64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a6c:	e71c      	b.n	80008a8 <__adddf3+0x138>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_ul2d>:
 8000a70:	ea50 0201 	orrs.w	r2, r0, r1
 8000a74:	bf08      	it	eq
 8000a76:	4770      	bxeq	lr
 8000a78:	b530      	push	{r4, r5, lr}
 8000a7a:	f04f 0500 	mov.w	r5, #0
 8000a7e:	e00a      	b.n	8000a96 <__aeabi_l2d+0x16>

08000a80 <__aeabi_l2d>:
 8000a80:	ea50 0201 	orrs.w	r2, r0, r1
 8000a84:	bf08      	it	eq
 8000a86:	4770      	bxeq	lr
 8000a88:	b530      	push	{r4, r5, lr}
 8000a8a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000a8e:	d502      	bpl.n	8000a96 <__aeabi_l2d+0x16>
 8000a90:	4240      	negs	r0, r0
 8000a92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a96:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a9a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a9e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000aa2:	f43f aed8 	beq.w	8000856 <__adddf3+0xe6>
 8000aa6:	f04f 0203 	mov.w	r2, #3
 8000aaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000aae:	bf18      	it	ne
 8000ab0:	3203      	addne	r2, #3
 8000ab2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000ab6:	bf18      	it	ne
 8000ab8:	3203      	addne	r2, #3
 8000aba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000abe:	f1c2 0320 	rsb	r3, r2, #32
 8000ac2:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ac6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aca:	fa01 fe03 	lsl.w	lr, r1, r3
 8000ace:	ea40 000e 	orr.w	r0, r0, lr
 8000ad2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ad6:	4414      	add	r4, r2
 8000ad8:	e6bd      	b.n	8000856 <__adddf3+0xe6>
 8000ada:	bf00      	nop

08000adc <__aeabi_dmul>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ae6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aea:	bf1d      	ittte	ne
 8000aec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000af0:	ea94 0f0c 	teqne	r4, ip
 8000af4:	ea95 0f0c 	teqne	r5, ip
 8000af8:	f000 f8de 	bleq	8000cb8 <__aeabi_dmul+0x1dc>
 8000afc:	442c      	add	r4, r5
 8000afe:	ea81 0603 	eor.w	r6, r1, r3
 8000b02:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000b06:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000b0a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000b0e:	bf18      	it	ne
 8000b10:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000b14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b1c:	d038      	beq.n	8000b90 <__aeabi_dmul+0xb4>
 8000b1e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000b22:	f04f 0500 	mov.w	r5, #0
 8000b26:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000b2a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000b2e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000b32:	f04f 0600 	mov.w	r6, #0
 8000b36:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000b3a:	f09c 0f00 	teq	ip, #0
 8000b3e:	bf18      	it	ne
 8000b40:	f04e 0e01 	orrne.w	lr, lr, #1
 8000b44:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000b48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000b4c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000b50:	d204      	bcs.n	8000b5c <__aeabi_dmul+0x80>
 8000b52:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000b56:	416d      	adcs	r5, r5
 8000b58:	eb46 0606 	adc.w	r6, r6, r6
 8000b5c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000b60:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000b64:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000b68:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000b6c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000b70:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b74:	bf88      	it	hi
 8000b76:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b7a:	d81e      	bhi.n	8000bba <__aeabi_dmul+0xde>
 8000b7c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000b80:	bf08      	it	eq
 8000b82:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000b86:	f150 0000 	adcs.w	r0, r0, #0
 8000b8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000b94:	ea46 0101 	orr.w	r1, r6, r1
 8000b98:	ea40 0002 	orr.w	r0, r0, r2
 8000b9c:	ea81 0103 	eor.w	r1, r1, r3
 8000ba0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000baa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bae:	bd70      	popgt	{r4, r5, r6, pc}
 8000bb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb4:	f04f 0e00 	mov.w	lr, #0
 8000bb8:	3c01      	subs	r4, #1
 8000bba:	f300 80ab 	bgt.w	8000d14 <__aeabi_dmul+0x238>
 8000bbe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000bc2:	bfde      	ittt	le
 8000bc4:	2000      	movle	r0, #0
 8000bc6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000bca:	bd70      	pople	{r4, r5, r6, pc}
 8000bcc:	f1c4 0400 	rsb	r4, r4, #0
 8000bd0:	3c20      	subs	r4, #32
 8000bd2:	da35      	bge.n	8000c40 <__aeabi_dmul+0x164>
 8000bd4:	340c      	adds	r4, #12
 8000bd6:	dc1b      	bgt.n	8000c10 <__aeabi_dmul+0x134>
 8000bd8:	f104 0414 	add.w	r4, r4, #20
 8000bdc:	f1c4 0520 	rsb	r5, r4, #32
 8000be0:	fa00 f305 	lsl.w	r3, r0, r5
 8000be4:	fa20 f004 	lsr.w	r0, r0, r4
 8000be8:	fa01 f205 	lsl.w	r2, r1, r5
 8000bec:	ea40 0002 	orr.w	r0, r0, r2
 8000bf0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000bf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000bf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000bfc:	fa21 f604 	lsr.w	r6, r1, r4
 8000c00:	eb42 0106 	adc.w	r1, r2, r6
 8000c04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c08:	bf08      	it	eq
 8000c0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
 8000c10:	f1c4 040c 	rsb	r4, r4, #12
 8000c14:	f1c4 0520 	rsb	r5, r4, #32
 8000c18:	fa00 f304 	lsl.w	r3, r0, r4
 8000c1c:	fa20 f005 	lsr.w	r0, r0, r5
 8000c20:	fa01 f204 	lsl.w	r2, r1, r4
 8000c24:	ea40 0002 	orr.w	r0, r0, r2
 8000c28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c30:	f141 0100 	adc.w	r1, r1, #0
 8000c34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c38:	bf08      	it	eq
 8000c3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
 8000c40:	f1c4 0520 	rsb	r5, r4, #32
 8000c44:	fa00 f205 	lsl.w	r2, r0, r5
 8000c48:	ea4e 0e02 	orr.w	lr, lr, r2
 8000c4c:	fa20 f304 	lsr.w	r3, r0, r4
 8000c50:	fa01 f205 	lsl.w	r2, r1, r5
 8000c54:	ea43 0302 	orr.w	r3, r3, r2
 8000c58:	fa21 f004 	lsr.w	r0, r1, r4
 8000c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c60:	fa21 f204 	lsr.w	r2, r1, r4
 8000c64:	ea20 0002 	bic.w	r0, r0, r2
 8000c68:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000c6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c76:	bd70      	pop	{r4, r5, r6, pc}
 8000c78:	f094 0f00 	teq	r4, #0
 8000c7c:	d10f      	bne.n	8000c9e <__aeabi_dmul+0x1c2>
 8000c7e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000c82:	0040      	lsls	r0, r0, #1
 8000c84:	eb41 0101 	adc.w	r1, r1, r1
 8000c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c8c:	bf08      	it	eq
 8000c8e:	3c01      	subeq	r4, #1
 8000c90:	d0f7      	beq.n	8000c82 <__aeabi_dmul+0x1a6>
 8000c92:	ea41 0106 	orr.w	r1, r1, r6
 8000c96:	f095 0f00 	teq	r5, #0
 8000c9a:	bf18      	it	ne
 8000c9c:	4770      	bxne	lr
 8000c9e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000ca2:	0052      	lsls	r2, r2, #1
 8000ca4:	eb43 0303 	adc.w	r3, r3, r3
 8000ca8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000cac:	bf08      	it	eq
 8000cae:	3d01      	subeq	r5, #1
 8000cb0:	d0f7      	beq.n	8000ca2 <__aeabi_dmul+0x1c6>
 8000cb2:	ea43 0306 	orr.w	r3, r3, r6
 8000cb6:	4770      	bx	lr
 8000cb8:	ea94 0f0c 	teq	r4, ip
 8000cbc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000cc0:	bf18      	it	ne
 8000cc2:	ea95 0f0c 	teqne	r5, ip
 8000cc6:	d00c      	beq.n	8000ce2 <__aeabi_dmul+0x206>
 8000cc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ccc:	bf18      	it	ne
 8000cce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cd2:	d1d1      	bne.n	8000c78 <__aeabi_dmul+0x19c>
 8000cd4:	ea81 0103 	eor.w	r1, r1, r3
 8000cd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cdc:	f04f 0000 	mov.w	r0, #0
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}
 8000ce2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ce6:	bf06      	itte	eq
 8000ce8:	4610      	moveq	r0, r2
 8000cea:	4619      	moveq	r1, r3
 8000cec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cf0:	d019      	beq.n	8000d26 <__aeabi_dmul+0x24a>
 8000cf2:	ea94 0f0c 	teq	r4, ip
 8000cf6:	d102      	bne.n	8000cfe <__aeabi_dmul+0x222>
 8000cf8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000cfc:	d113      	bne.n	8000d26 <__aeabi_dmul+0x24a>
 8000cfe:	ea95 0f0c 	teq	r5, ip
 8000d02:	d105      	bne.n	8000d10 <__aeabi_dmul+0x234>
 8000d04:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000d08:	bf1c      	itt	ne
 8000d0a:	4610      	movne	r0, r2
 8000d0c:	4619      	movne	r1, r3
 8000d0e:	d10a      	bne.n	8000d26 <__aeabi_dmul+0x24a>
 8000d10:	ea81 0103 	eor.w	r1, r1, r3
 8000d14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d18:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000d1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000d20:	f04f 0000 	mov.w	r0, #0
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
 8000d26:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000d2a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}

08000d30 <__aeabi_ddiv>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000d3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000d3e:	bf1d      	ittte	ne
 8000d40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000d44:	ea94 0f0c 	teqne	r4, ip
 8000d48:	ea95 0f0c 	teqne	r5, ip
 8000d4c:	f000 f8a7 	bleq	8000e9e <__aeabi_ddiv+0x16e>
 8000d50:	eba4 0405 	sub.w	r4, r4, r5
 8000d54:	ea81 0e03 	eor.w	lr, r1, r3
 8000d58:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000d60:	f000 8088 	beq.w	8000e74 <__aeabi_ddiv+0x144>
 8000d64:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000d68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000d6c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000d70:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000d74:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000d78:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000d7c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000d80:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000d84:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000d88:	429d      	cmp	r5, r3
 8000d8a:	bf08      	it	eq
 8000d8c:	4296      	cmpeq	r6, r2
 8000d8e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000d92:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000d96:	d202      	bcs.n	8000d9e <__aeabi_ddiv+0x6e>
 8000d98:	085b      	lsrs	r3, r3, #1
 8000d9a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d9e:	1ab6      	subs	r6, r6, r2
 8000da0:	eb65 0503 	sbc.w	r5, r5, r3
 8000da4:	085b      	lsrs	r3, r3, #1
 8000da6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000daa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000dae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000db2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000db6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000dba:	bf22      	ittt	cs
 8000dbc:	1ab6      	subcs	r6, r6, r2
 8000dbe:	4675      	movcs	r5, lr
 8000dc0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dca:	ebb6 0e02 	subs.w	lr, r6, r2
 8000dce:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000dd2:	bf22      	ittt	cs
 8000dd4:	1ab6      	subcs	r6, r6, r2
 8000dd6:	4675      	movcs	r5, lr
 8000dd8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ddc:	085b      	lsrs	r3, r3, #1
 8000dde:	ea4f 0232 	mov.w	r2, r2, rrx
 8000de2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000de6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000dea:	bf22      	ittt	cs
 8000dec:	1ab6      	subcs	r6, r6, r2
 8000dee:	4675      	movcs	r5, lr
 8000df0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000df4:	085b      	lsrs	r3, r3, #1
 8000df6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dfa:	ebb6 0e02 	subs.w	lr, r6, r2
 8000dfe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e02:	bf22      	ittt	cs
 8000e04:	1ab6      	subcs	r6, r6, r2
 8000e06:	4675      	movcs	r5, lr
 8000e08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e0c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000e10:	d018      	beq.n	8000e44 <__aeabi_ddiv+0x114>
 8000e12:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000e16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000e1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000e1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000e22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000e26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000e2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000e2e:	d1c0      	bne.n	8000db2 <__aeabi_ddiv+0x82>
 8000e30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e34:	d10b      	bne.n	8000e4e <__aeabi_ddiv+0x11e>
 8000e36:	ea41 0100 	orr.w	r1, r1, r0
 8000e3a:	f04f 0000 	mov.w	r0, #0
 8000e3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000e42:	e7b6      	b.n	8000db2 <__aeabi_ddiv+0x82>
 8000e44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e48:	bf04      	itt	eq
 8000e4a:	4301      	orreq	r1, r0
 8000e4c:	2000      	moveq	r0, #0
 8000e4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000e52:	bf88      	it	hi
 8000e54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000e58:	f63f aeaf 	bhi.w	8000bba <__aeabi_dmul+0xde>
 8000e5c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000e60:	bf04      	itt	eq
 8000e62:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000e66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000e6a:	f150 0000 	adcs.w	r0, r0, #0
 8000e6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
 8000e74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000e78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000e7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000e80:	bfc2      	ittt	gt
 8000e82:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000e86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000e8a:	bd70      	popgt	{r4, r5, r6, pc}
 8000e8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e90:	f04f 0e00 	mov.w	lr, #0
 8000e94:	3c01      	subs	r4, #1
 8000e96:	e690      	b.n	8000bba <__aeabi_dmul+0xde>
 8000e98:	ea45 0e06 	orr.w	lr, r5, r6
 8000e9c:	e68d      	b.n	8000bba <__aeabi_dmul+0xde>
 8000e9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ea2:	ea94 0f0c 	teq	r4, ip
 8000ea6:	bf08      	it	eq
 8000ea8:	ea95 0f0c 	teqeq	r5, ip
 8000eac:	f43f af3b 	beq.w	8000d26 <__aeabi_dmul+0x24a>
 8000eb0:	ea94 0f0c 	teq	r4, ip
 8000eb4:	d10a      	bne.n	8000ecc <__aeabi_ddiv+0x19c>
 8000eb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000eba:	f47f af34 	bne.w	8000d26 <__aeabi_dmul+0x24a>
 8000ebe:	ea95 0f0c 	teq	r5, ip
 8000ec2:	f47f af25 	bne.w	8000d10 <__aeabi_dmul+0x234>
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	e72c      	b.n	8000d26 <__aeabi_dmul+0x24a>
 8000ecc:	ea95 0f0c 	teq	r5, ip
 8000ed0:	d106      	bne.n	8000ee0 <__aeabi_ddiv+0x1b0>
 8000ed2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ed6:	f43f aefd 	beq.w	8000cd4 <__aeabi_dmul+0x1f8>
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	e722      	b.n	8000d26 <__aeabi_dmul+0x24a>
 8000ee0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ee4:	bf18      	it	ne
 8000ee6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000eea:	f47f aec5 	bne.w	8000c78 <__aeabi_dmul+0x19c>
 8000eee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ef2:	f47f af0d 	bne.w	8000d10 <__aeabi_dmul+0x234>
 8000ef6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000efa:	f47f aeeb 	bne.w	8000cd4 <__aeabi_dmul+0x1f8>
 8000efe:	e712      	b.n	8000d26 <__aeabi_dmul+0x24a>

08000f00 <__aeabi_d2uiz>:
 8000f00:	004a      	lsls	r2, r1, #1
 8000f02:	d211      	bcs.n	8000f28 <__aeabi_d2uiz+0x28>
 8000f04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f08:	d211      	bcs.n	8000f2e <__aeabi_d2uiz+0x2e>
 8000f0a:	d50d      	bpl.n	8000f28 <__aeabi_d2uiz+0x28>
 8000f0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f14:	d40e      	bmi.n	8000f34 <__aeabi_d2uiz+0x34>
 8000f16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f22:	fa23 f002 	lsr.w	r0, r3, r2
 8000f26:	4770      	bx	lr
 8000f28:	f04f 0000 	mov.w	r0, #0
 8000f2c:	4770      	bx	lr
 8000f2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f32:	d102      	bne.n	8000f3a <__aeabi_d2uiz+0x3a>
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <uDelayTim1>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "hcSensor.h"

void uDelayTim1(uint64_t uSec)
{
 8000f40:	b490      	push	{r4, r7}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	e9c7 0100 	strd	r0, r1, [r7]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <uDelayTim1+0x38>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < uSec);
 8000f52:	bf00      	nop
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <uDelayTim1+0x38>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f64:	42a2      	cmp	r2, r4
 8000f66:	bf08      	it	eq
 8000f68:	4299      	cmpeq	r1, r3
 8000f6a:	d3f3      	bcc.n	8000f54 <uDelayTim1+0x14>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc90      	pop	{r4, r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20001918 	.word	0x20001918

08000f7c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f7c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
	const float soundSpeed = 0.0343;
 8000f86:	4b56      	ldr	r3, [pc, #344]	; (80010e0 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000f88:	60fb      	str	r3, [r7, #12]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7f1b      	ldrb	r3, [r3, #28]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	f040 80a1 	bne.w	80010d6 <HAL_TIM_IC_CaptureCallback+0x15a>
	{
		if(waitOnFallingEdge==0)
 8000f94:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d11d      	bne.n	8000fd8 <HAL_TIM_IC_CaptureCallback+0x5c>
		{
			valueRisingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f003 fbb4 	bl	800470c <HAL_TIM_ReadCapturedValue>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f04f 0400 	mov.w	r4, #0
 8000faa:	4a4f      	ldr	r2, [pc, #316]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000fac:	e9c2 3400 	strd	r3, r4, [r2]
			waitOnFallingEdge = 1;
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 020a 	bic.w	r2, r2, #10
 8000fc4:	621a      	str	r2, [r3, #32]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0202 	orr.w	r2, r2, #2
 8000fd4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);

		}
	}

}
 8000fd6:	e07e      	b.n	80010d6 <HAL_TIM_IC_CaptureCallback+0x15a>
		else if (waitOnFallingEdge == 1)
 8000fd8:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d17a      	bne.n	80010d6 <HAL_TIM_IC_CaptureCallback+0x15a>
			valueFallingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f003 fb92 	bl	800470c <HAL_TIM_ReadCapturedValue>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f04f 0400 	mov.w	r4, #0
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x170>)
 8000ff0:	e9c2 3400 	strd	r3, r4, [r2]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
			if(valueFallingEdge >= valueRisingEdge)
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x170>)
 8000ffe:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001002:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001004:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001008:	42a2      	cmp	r2, r4
 800100a:	bf08      	it	eq
 800100c:	4299      	cmpeq	r1, r3
 800100e:	d30f      	bcc.n	8001030 <HAL_TIM_IC_CaptureCallback+0xb4>
				measureTime = valueFallingEdge - valueRisingEdge;
 8001010:	4b36      	ldr	r3, [pc, #216]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x170>)
 8001012:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001018:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800101c:	460b      	mov	r3, r1
 800101e:	4614      	mov	r4, r2
 8001020:	ebb3 030b 	subs.w	r3, r3, fp
 8001024:	eb64 040c 	sbc.w	r4, r4, ip
 8001028:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x174>)
 800102a:	e9c2 3400 	strd	r3, r4, [r2]
 800102e:	e01f      	b.n	8001070 <HAL_TIM_IC_CaptureCallback+0xf4>
			else if (valueRisingEdge > valueFallingEdge)
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001032:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001036:	4a2d      	ldr	r2, [pc, #180]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x170>)
 8001038:	e9d2 1200 	ldrd	r1, r2, [r2]
 800103c:	42a2      	cmp	r2, r4
 800103e:	bf08      	it	eq
 8001040:	4299      	cmpeq	r1, r3
 8001042:	d215      	bcs.n	8001070 <HAL_TIM_IC_CaptureCallback+0xf4>
				measureTime = (0xffff - valueRisingEdge) + valueFallingEdge;
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <HAL_TIM_IC_CaptureCallback+0x170>)
 8001046:	e9d3 1200 	ldrd	r1, r2, [r3]
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800104c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001050:	1ac9      	subs	r1, r1, r3
 8001052:	eb62 0204 	sbc.w	r2, r2, r4
 8001056:	468b      	mov	fp, r1
 8001058:	4694      	mov	ip, r2
 800105a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	eb1b 0301 	adds.w	r3, fp, r1
 8001066:	eb4c 0402 	adc.w	r4, ip, r2
 800106a:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x174>)
 800106c:	e9c2 3400 	strd	r3, r4, [r2]
			distance = measureTime * soundSpeed/2;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001072:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001076:	4618      	mov	r0, r3
 8001078:	4621      	mov	r1, r4
 800107a:	f7ff f989 	bl	8000390 <__aeabi_ul2f>
 800107e:	ee07 0a10 	vmov	s14, r0
 8001082:	edd7 7a03 	vldr	s15, [r7, #12]
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800108e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001092:	ee16 0a90 	vmov	r0, s13
 8001096:	f7ff f9d9 	bl	800044c <__aeabi_f2ulz>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x178>)
 80010a0:	e9c2 3400 	strd	r3, r4, [r2]
			waitOnFallingEdge = 0;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_TIM_IC_CaptureCallback+0x168>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6a1a      	ldr	r2, [r3, #32]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 020a 	bic.w	r2, r2, #10
 80010b8:	621a      	str	r2, [r3, #32]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6a12      	ldr	r2, [r2, #32]
 80010c4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0202 	bic.w	r2, r2, #2
 80010d4:	60da      	str	r2, [r3, #12]
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80010e0:	3d0c7e28 	.word	0x3d0c7e28
 80010e4:	200018f8 	.word	0x200018f8
 80010e8:	20001968 	.word	0x20001968
 80010ec:	20001910 	.word	0x20001910
 80010f0:	20001978 	.word	0x20001978
 80010f4:	20001900 	.word	0x20001900
 80010f8:	20001918 	.word	0x20001918

080010fc <triggerMeasureCenter>:

uint64_t triggerMeasureCenter(void)
{
 80010fc:	b598      	push	{r3, r4, r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_CENTER, PIN_CENTER, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2108      	movs	r1, #8
 8001104:	4810      	ldr	r0, [pc, #64]	; (8001148 <triggerMeasureCenter+0x4c>)
 8001106:	f001 f873 	bl	80021f0 <HAL_GPIO_WritePin>
	uDelayTim1(10);
 800110a:	f04f 000a 	mov.w	r0, #10
 800110e:	f04f 0100 	mov.w	r1, #0
 8001112:	f7ff ff15 	bl	8000f40 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_CENTER, PIN_CENTER, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2108      	movs	r1, #8
 800111a:	480b      	ldr	r0, [pc, #44]	; (8001148 <triggerMeasureCenter+0x4c>)
 800111c:	f001 f868 	bl	80021f0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <triggerMeasureCenter+0x50>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <triggerMeasureCenter+0x50>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0202 	orr.w	r2, r2, #2
 800112e:	60da      	str	r2, [r3, #12]

	distanceCenter = distance;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <triggerMeasureCenter+0x54>)
 8001132:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001136:	4a07      	ldr	r2, [pc, #28]	; (8001154 <triggerMeasureCenter+0x58>)
 8001138:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceCenter;
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <triggerMeasureCenter+0x58>)
 800113e:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 8001142:	4618      	mov	r0, r3
 8001144:	4621      	mov	r1, r4
 8001146:	bd98      	pop	{r3, r4, r7, pc}
 8001148:	48001400 	.word	0x48001400
 800114c:	20001918 	.word	0x20001918
 8001150:	20001900 	.word	0x20001900
 8001154:	200018f0 	.word	0x200018f0

08001158 <triggerMeasureLeft>:

uint64_t triggerMeasureLeft(void)
{
 8001158:	b598      	push	{r3, r4, r7, lr}
 800115a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_LEFT, PIN_LEFT, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2120      	movs	r1, #32
 8001160:	4810      	ldr	r0, [pc, #64]	; (80011a4 <triggerMeasureLeft+0x4c>)
 8001162:	f001 f845 	bl	80021f0 <HAL_GPIO_WritePin>
	uDelayTim1(10);
 8001166:	f04f 000a 	mov.w	r0, #10
 800116a:	f04f 0100 	mov.w	r1, #0
 800116e:	f7ff fee7 	bl	8000f40 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_LEFT, PIN_LEFT, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2120      	movs	r1, #32
 8001176:	480b      	ldr	r0, [pc, #44]	; (80011a4 <triggerMeasureLeft+0x4c>)
 8001178:	f001 f83a 	bl	80021f0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <triggerMeasureLeft+0x50>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <triggerMeasureLeft+0x50>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0202 	orr.w	r2, r2, #2
 800118a:	60da      	str	r2, [r3, #12]

	distanceLeft = distance;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <triggerMeasureLeft+0x54>)
 800118e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001192:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <triggerMeasureLeft+0x58>)
 8001194:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceLeft;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <triggerMeasureLeft+0x58>)
 800119a:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	4621      	mov	r1, r4
 80011a2:	bd98      	pop	{r3, r4, r7, pc}
 80011a4:	48001400 	.word	0x48001400
 80011a8:	20001918 	.word	0x20001918
 80011ac:	20001900 	.word	0x20001900
 80011b0:	20001908 	.word	0x20001908

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f000 fd4b 	bl	8001c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f000 f84e 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f000 f9f4 	bl	80015ac <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80011c4:	f000 f8d2 	bl	800136c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80011c8:	f000 f920 	bl	800140c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011cc:	f000 f9c4 	bl	8001558 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80011d0:	f000 f968 	bl	80014a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80011d4:	2100      	movs	r1, #0
 80011d6:	4814      	ldr	r0, [pc, #80]	; (8001228 <main+0x74>)
 80011d8:	f002 ffa2 	bl	8004120 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011dc:	f004 fdc4 	bl	8005d68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HCSR04_first */
  HCSR04_firstHandle = osThreadNew(hcsr04_1, NULL, &HCSR04_first_attributes);
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <main+0x78>)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <main+0x7c>)
 80011e6:	f004 fe29 	bl	8005e3c <osThreadNew>
 80011ea:	4602      	mov	r2, r0
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <main+0x80>)
 80011ee:	601a      	str	r2, [r3, #0]

  /* creation of HCSR04_second */
  HCSR04_secondHandle = osThreadNew(hcsr04_2, NULL, &HCSR04_second_attributes);
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <main+0x84>)
 80011f2:	2100      	movs	r1, #0
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <main+0x88>)
 80011f6:	f004 fe21 	bl	8005e3c <osThreadNew>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <main+0x8c>)
 80011fe:	601a      	str	r2, [r3, #0]

  /* creation of HCSR04_fthird */
  HCSR04_fthirdHandle = osThreadNew(hcsr04_3, NULL, &HCSR04_fthird_attributes);
 8001200:	4a10      	ldr	r2, [pc, #64]	; (8001244 <main+0x90>)
 8001202:	2100      	movs	r1, #0
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <main+0x94>)
 8001206:	f004 fe19 	bl	8005e3c <osThreadNew>
 800120a:	4602      	mov	r2, r0
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <main+0x98>)
 800120e:	601a      	str	r2, [r3, #0]

  /* creation of LCD_buzzer */
  LCD_buzzerHandle = osThreadNew(lcd_buzz, NULL, &LCD_buzzer_attributes);
 8001210:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <main+0x9c>)
 8001212:	2100      	movs	r1, #0
 8001214:	480f      	ldr	r0, [pc, #60]	; (8001254 <main+0xa0>)
 8001216:	f004 fe11 	bl	8005e3c <osThreadNew>
 800121a:	4602      	mov	r2, r0
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <main+0xa4>)
 800121e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001220:	f004 fdd6 	bl	8005dd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001224:	e7fe      	b.n	8001224 <main+0x70>
 8001226:	bf00      	nop
 8001228:	20001918 	.word	0x20001918
 800122c:	080088c8 	.word	0x080088c8
 8001230:	08001751 	.word	0x08001751
 8001234:	20001f30 	.word	0x20001f30
 8001238:	080088ec 	.word	0x080088ec
 800123c:	08001765 	.word	0x08001765
 8001240:	20001f34 	.word	0x20001f34
 8001244:	08008910 	.word	0x08008910
 8001248:	08001789 	.word	0x08001789
 800124c:	20001ea0 	.word	0x20001ea0
 8001250:	08008934 	.word	0x08008934
 8001254:	08001799 	.word	0x08001799
 8001258:	20001f38 	.word	0x20001f38

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0bc      	sub	sp, #240	; 0xf0
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001266:	2244      	movs	r2, #68	; 0x44
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f007 fae5 	bl	800883a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2294      	movs	r2, #148	; 0x94
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f007 fad7 	bl	800883a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800128c:	2000      	movs	r0, #0
 800128e:	f001 f949 	bl	8002524 <HAL_PWREx_ControlVoltageScaling>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001298:	f000 fa98 	bl	80017cc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800129c:	2301      	movs	r3, #1
 800129e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80012bc:	231e      	movs	r3, #30
 80012be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 f9e7 	bl	80026ac <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012e4:	f000 fa72 	bl	80017cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001308:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800130c:	2105      	movs	r1, #5
 800130e:	4618      	mov	r0, r3
 8001310:	f001 fdf2 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800131a:	f000 fa57 	bl	80017cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 800131e:	f242 0324 	movw	r3, #8228	; 0x2024
 8001322:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001324:	2300      	movs	r3, #0
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001328:	2300      	movs	r3, #0
 800132a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800132c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001330:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001332:	2303      	movs	r3, #3
 8001334:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001336:	2301      	movs	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800133a:	230c      	movs	r3, #12
 800133c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800133e:	2302      	movs	r3, #2
 8001340:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001346:	2302      	movs	r3, #2
 8001348:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800134a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800134e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4618      	mov	r0, r3
 8001354:	f002 f8b2 	bl	80034bc <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x106>
  {
    Error_Handler();
 800135e:	f000 fa35 	bl	80017cc <Error_Handler>
  }
}
 8001362:	bf00      	nop
 8001364:	37f0      	adds	r7, #240	; 0xf0
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 8001372:	4a23      	ldr	r2, [pc, #140]	; (8001400 <MX_LPUART1_UART_Init+0x94>)
 8001374:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 8001378:	4a22      	ldr	r2, [pc, #136]	; (8001404 <MX_LPUART1_UART_Init+0x98>)
 800137a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 800137e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001382:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 80013b6:	f003 fc95 	bl	8004ce4 <HAL_UART_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80013c0:	f000 fa04 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c4:	2100      	movs	r1, #0
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 80013c8:	f004 f951 	bl	800566e <HAL_UARTEx_SetTxFifoThreshold>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013d2:	f000 f9fb 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4808      	ldr	r0, [pc, #32]	; (80013fc <MX_LPUART1_UART_Init+0x90>)
 80013da:	f004 f986 	bl	80056ea <HAL_UARTEx_SetRxFifoThreshold>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013e4:	f000 f9f2 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <MX_LPUART1_UART_Init+0x9c>)
 80013ea:	f004 f907 	bl	80055fc <HAL_UARTEx_DisableFifoMode>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013f4:	f000 f9ea 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20001e14 	.word	0x20001e14
 8001400:	40008000 	.word	0x40008000
 8001404:	00033324 	.word	0x00033324
 8001408:	20001ea4 	.word	0x20001ea4

0800140c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <MX_USART3_UART_Init+0x90>)
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <MX_USART3_UART_Init+0x94>)
 8001414:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <MX_USART3_UART_Init+0x90>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b1f      	ldr	r3, [pc, #124]	; (800149c <MX_USART3_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <MX_USART3_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <MX_USART3_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_USART3_UART_Init+0x90>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <MX_USART3_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_USART3_UART_Init+0x90>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <MX_USART3_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_USART3_UART_Init+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <MX_USART3_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001454:	4811      	ldr	r0, [pc, #68]	; (800149c <MX_USART3_UART_Init+0x90>)
 8001456:	f003 fc45 	bl	8004ce4 <HAL_UART_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001460:	f000 f9b4 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001464:	2100      	movs	r1, #0
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <MX_USART3_UART_Init+0x90>)
 8001468:	f004 f901 	bl	800566e <HAL_UARTEx_SetTxFifoThreshold>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001472:	f000 f9ab 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001476:	2100      	movs	r1, #0
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <MX_USART3_UART_Init+0x90>)
 800147a:	f004 f936 	bl	80056ea <HAL_UARTEx_SetRxFifoThreshold>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001484:	f000 f9a2 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_USART3_UART_Init+0x90>)
 800148a:	f004 f8b7 	bl	80055fc <HAL_UARTEx_DisableFifoMode>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001494:	f000 f99a 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20001980 	.word	0x20001980
 80014a0:	40004800 	.word	0x40004800

080014a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <MX_TIM1_Init+0xac>)
 80014c4:	4a23      	ldr	r2, [pc, #140]	; (8001554 <MX_TIM1_Init+0xb0>)
 80014c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_TIM1_Init+0xac>)
 80014ca:	2277      	movs	r2, #119	; 0x77
 80014cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <MX_TIM1_Init+0xac>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_TIM1_Init+0xac>)
 80014d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_TIM1_Init+0xac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_TIM1_Init+0xac>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_TIM1_Init+0xac>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80014ee:	4818      	ldr	r0, [pc, #96]	; (8001550 <MX_TIM1_Init+0xac>)
 80014f0:	f002 fdbe 	bl	8004070 <HAL_TIM_IC_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80014fa:	f000 f967 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <MX_TIM1_Init+0xac>)
 8001512:	f003 fb41 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800151c:	f000 f956 	bl	80017cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001524:	2301      	movs	r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_TIM1_Init+0xac>)
 8001538:	f003 f853 	bl	80045e2 <HAL_TIM_IC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001542:	f000 f943 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20001918 	.word	0x20001918
 8001554:	40012c00 	.word	0x40012c00

08001558 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800155e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001562:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001566:	2206      	movs	r2, #6
 8001568:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800156c:	2202      	movs	r2, #2
 800156e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001572:	2201      	movs	r2, #1
 8001574:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001584:	2201      	movs	r2, #1
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001590:	2201      	movs	r2, #1
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001596:	f000 fe5d 	bl	8002254 <HAL_PCD_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80015a0:	f000 f914 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20001a0c 	.word	0x20001a0c

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	4b5d      	ldr	r3, [pc, #372]	; (8001738 <MX_GPIO_Init+0x18c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a5c      	ldr	r2, [pc, #368]	; (8001738 <MX_GPIO_Init+0x18c>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b5a      	ldr	r3, [pc, #360]	; (8001738 <MX_GPIO_Init+0x18c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	623b      	str	r3, [r7, #32]
 80015d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015da:	4b57      	ldr	r3, [pc, #348]	; (8001738 <MX_GPIO_Init+0x18c>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	4a56      	ldr	r2, [pc, #344]	; (8001738 <MX_GPIO_Init+0x18c>)
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e6:	4b54      	ldr	r3, [pc, #336]	; (8001738 <MX_GPIO_Init+0x18c>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <MX_GPIO_Init+0x18c>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a50      	ldr	r2, [pc, #320]	; (8001738 <MX_GPIO_Init+0x18c>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160a:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <MX_GPIO_Init+0x18c>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a4a      	ldr	r2, [pc, #296]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001616:	4b48      	ldr	r3, [pc, #288]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a44      	ldr	r2, [pc, #272]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b42      	ldr	r3, [pc, #264]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800163a:	4b3f      	ldr	r3, [pc, #252]	; (8001738 <MX_GPIO_Init+0x18c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a3e      	ldr	r2, [pc, #248]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	4a38      	ldr	r2, [pc, #224]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800165c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165e:	4b36      	ldr	r3, [pc, #216]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800166a:	f001 f80f 	bl	800268c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b32      	ldr	r3, [pc, #200]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a31      	ldr	r2, [pc, #196]	; (8001738 <MX_GPIO_Init+0x18c>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <MX_GPIO_Init+0x18c>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Trig1_Pin|Trig2_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2128      	movs	r1, #40	; 0x28
 800168a:	482c      	ldr	r0, [pc, #176]	; (800173c <MX_GPIO_Init+0x190>)
 800168c:	f000 fdb0 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001696:	482a      	ldr	r0, [pc, #168]	; (8001740 <MX_GPIO_Init+0x194>)
 8001698:	f000 fdaa 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2120      	movs	r1, #32
 80016a0:	4828      	ldr	r0, [pc, #160]	; (8001744 <MX_GPIO_Init+0x198>)
 80016a2:	f000 fda5 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <MX_GPIO_Init+0x19c>)
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	4824      	ldr	r0, [pc, #144]	; (800174c <MX_GPIO_Init+0x1a0>)
 80016bc:	f000 fc06 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig1_Pin Trig2_Pin */
  GPIO_InitStruct.Pin = Trig1_Pin|Trig2_Pin;
 80016c0:	2328      	movs	r3, #40	; 0x28
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	4619      	mov	r1, r3
 80016d6:	4819      	ldr	r0, [pc, #100]	; (800173c <MX_GPIO_Init+0x190>)
 80016d8:	f000 fbf8 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80016dc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	4812      	ldr	r0, [pc, #72]	; (8001740 <MX_GPIO_Init+0x194>)
 80016f6:	f000 fbe9 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016fa:	2320      	movs	r3, #32
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_GPIO_Init+0x198>)
 8001712:	f000 fbdb 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001716:	2340      	movs	r3, #64	; 0x40
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <MX_GPIO_Init+0x198>)
 800172a:	f000 fbcf 	bl	8001ecc <HAL_GPIO_Init>

}
 800172e:	bf00      	nop
 8001730:	3738      	adds	r7, #56	; 0x38
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	48001400 	.word	0x48001400
 8001740:	48000400 	.word	0x48000400
 8001744:	48001800 	.word	0x48001800
 8001748:	10110000 	.word	0x10110000
 800174c:	48000800 	.word	0x48000800

08001750 <hcsr04_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_hcsr04_1 */
void hcsr04_1(void *argument)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	triggerMeasureCenter();
 8001758:	f7ff fcd0 	bl	80010fc <triggerMeasureCenter>
    osDelay(100);
 800175c:	2064      	movs	r0, #100	; 0x64
 800175e:	f004 fc13 	bl	8005f88 <osDelay>
	triggerMeasureCenter();
 8001762:	e7f9      	b.n	8001758 <hcsr04_1+0x8>

08001764 <hcsr04_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hcsr04_2 */
void hcsr04_2(void *argument)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hcsr04_2 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800176c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <hcsr04_2+0x20>)
 8001772:	f000 fd55 	bl	8002220 <HAL_GPIO_TogglePin>
	triggerMeasureLeft();
 8001776:	f7ff fcef 	bl	8001158 <triggerMeasureLeft>
    osDelay(100);
 800177a:	2064      	movs	r0, #100	; 0x64
 800177c:	f004 fc04 	bl	8005f88 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001780:	e7f4      	b.n	800176c <hcsr04_2+0x8>
 8001782:	bf00      	nop
 8001784:	48000400 	.word	0x48000400

08001788 <hcsr04_3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hcsr04_3 */
void hcsr04_3(void *argument)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hcsr04_3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001790:	2001      	movs	r0, #1
 8001792:	f004 fbf9 	bl	8005f88 <osDelay>
 8001796:	e7fb      	b.n	8001790 <hcsr04_3+0x8>

08001798 <lcd_buzz>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcd_buzz */
void lcd_buzz(void *argument)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lcd_buzz */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f004 fbf1 	bl	8005f88 <osDelay>
 80017a6:	e7fb      	b.n	80017a0 <lcd_buzz+0x8>

080017a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ba:	f000 fa63 	bl	8001c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40001000 	.word	0x40001000

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_MspInit+0x44>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_MspInit+0x44>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6613      	str	r3, [r2, #96]	; 0x60
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_MspInit+0x44>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_MspInit+0x44>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_MspInit+0x44>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6593      	str	r3, [r2, #88]	; 0x58
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_MspInit+0x44>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a30      	ldr	r2, [pc, #192]	; (8001904 <HAL_UART_MspInit+0xe0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12b      	bne.n	800189e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <HAL_UART_MspInit+0xe4>)
 8001848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184a:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <HAL_UART_MspInit+0xe4>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_UART_MspInit+0xe4>)
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_UART_MspInit+0xe4>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a29      	ldr	r2, [pc, #164]	; (8001908 <HAL_UART_MspInit+0xe4>)
 8001864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_UART_MspInit+0xe4>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001876:	f000 ff09 	bl	800268c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800187a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800187e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800188c:	2308      	movs	r3, #8
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	481d      	ldr	r0, [pc, #116]	; (800190c <HAL_UART_MspInit+0xe8>)
 8001898:	f000 fb18 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800189c:	e02d      	b.n	80018fa <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_UART_MspInit+0xec>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d128      	bne.n	80018fa <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_UART_MspInit+0xe4>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_UART_MspInit+0xe4>)
 80018ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_UART_MspInit+0xe4>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_UART_MspInit+0xe4>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_UART_MspInit+0xe4>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_UART_MspInit+0xe4>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ea:	2307      	movs	r3, #7
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4807      	ldr	r0, [pc, #28]	; (8001914 <HAL_UART_MspInit+0xf0>)
 80018f6:	f000 fae9 	bl	8001ecc <HAL_GPIO_Init>
}
 80018fa:	bf00      	nop
 80018fc:	3730      	adds	r7, #48	; 0x30
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40008000 	.word	0x40008000
 8001908:	40021000 	.word	0x40021000
 800190c:	48001800 	.word	0x48001800
 8001910:	40004800 	.word	0x40004800
 8001914:	48000c00 	.word	0x48000c00

08001918 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_TIM_IC_MspInit+0x8c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d130      	bne.n	800199c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_TIM_IC_MspInit+0x90>)
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <HAL_TIM_IC_MspInit+0x90>)
 8001940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001944:	6613      	str	r3, [r2, #96]	; 0x60
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_TIM_IC_MspInit+0x90>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_TIM_IC_MspInit+0x90>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <HAL_TIM_IC_MspInit+0x90>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_TIM_IC_MspInit+0x90>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800196a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800197c:	2301      	movs	r3, #1
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <HAL_TIM_IC_MspInit+0x94>)
 8001988:	f000 faa0 	bl	8001ecc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	201b      	movs	r0, #27
 8001992:	f000 fa71 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001996:	201b      	movs	r0, #27
 8001998:	f000 fa8a 	bl	8001eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40021000 	.word	0x40021000
 80019ac:	48001000 	.word	0x48001000

080019b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d0:	d154      	bne.n	8001a7c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	4a2b      	ldr	r2, [pc, #172]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019ea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019fc:	230a      	movs	r3, #10
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f000 fa5f 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f000 fa51 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 8001a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d114      	bne.n	8001a78 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001a66:	f000 fe01 	bl	800266c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_PCD_MspInit+0xd4>)
 8001a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a76:	e001      	b.n	8001a7c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001a78:	f000 fdf8 	bl	800266c <HAL_PWREx_EnableVddUSB>
}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	2036      	movs	r0, #54	; 0x36
 8001a9e:	f000 f9eb 	bl	8001e78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aa2:	2036      	movs	r0, #54	; 0x36
 8001aa4:	f000 fa04 	bl	8001eb0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <HAL_InitTick+0xa0>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	4a1e      	ldr	r2, [pc, #120]	; (8001b28 <HAL_InitTick+0xa0>)
 8001aae:	f043 0310 	orr.w	r3, r3, #16
 8001ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <HAL_InitTick+0xa0>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 fc02 	bl	80032d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ad0:	f001 fbd4 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <HAL_InitTick+0xa4>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0c9b      	lsrs	r3, r3, #18
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_InitTick+0xa8>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <HAL_InitTick+0xac>)
 8001aec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_InitTick+0xa8>)
 8001af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001af4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_InitTick+0xa8>)
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_InitTick+0xa8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_InitTick+0xa8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b08:	4809      	ldr	r0, [pc, #36]	; (8001b30 <HAL_InitTick+0xa8>)
 8001b0a:	f002 f9df 	bl	8003ecc <HAL_TIM_Base_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d104      	bne.n	8001b1e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b14:	4806      	ldr	r0, [pc, #24]	; (8001b30 <HAL_InitTick+0xa8>)
 8001b16:	f002 fa3b 	bl	8003f90 <HAL_TIM_Base_Start_IT>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	e000      	b.n	8001b20 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3730      	adds	r7, #48	; 0x30
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	431bde83 	.word	0x431bde83
 8001b30:	20001f3c 	.word	0x20001f3c
 8001b34:	40001000 	.word	0x40001000

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <MemManage_Handler+0x4>

08001b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <TIM1_CC_IRQHandler+0x10>)
 8001b72:	f002 fc17 	bl	80043a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20001918 	.word	0x20001918

08001b80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <TIM6_DAC_IRQHandler+0x10>)
 8001b86:	f002 fc0d 	bl	80043a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20001f3c 	.word	0x20001f3c

08001b94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <SystemInit+0x64>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <SystemInit+0x64>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <SystemInit+0x68>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <SystemInit+0x68>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <SystemInit+0x68>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <SystemInit+0x68>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <SystemInit+0x68>)
 8001bc0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001bc4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <SystemInit+0x68>)
 8001bcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <SystemInit+0x68>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <SystemInit+0x68>)
 8001bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <SystemInit+0x68>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <SystemInit+0x64>)
 8001be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bea:	609a      	str	r2, [r3, #8]
#endif
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00
 8001bfc:	40021000 	.word	0x40021000

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff ffc6 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c0a:	e003      	b.n	8001c14 <LoopCopyDataInit>

08001c0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c12:	3104      	adds	r1, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c14:	480a      	ldr	r0, [pc, #40]	; (8001c40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c1c:	d3f6      	bcc.n	8001c0c <CopyDataInit>
	ldr	r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c20:	e002      	b.n	8001c28 <LoopFillZerobss>

08001c22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c24:	f842 3b04 	str.w	r3, [r2], #4

08001c28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <LoopForever+0x16>)
	cmp	r2, r3
 8001c2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c2c:	d3f9      	bcc.n	8001c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f006 fdd5 	bl	80087dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7ff fabf 	bl	80011b4 <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001c3c:	080089c8 	.word	0x080089c8
	ldr	r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c44:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001c48:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001c4c:	20001fcc 	.word	0x20001fcc

08001c50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_IRQHandler>

08001c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 f900 	bl	8001e62 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7ff ff10 	bl	8001a88 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	e001      	b.n	8001c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c74:	f7ff fdb2 	bl	80017dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	20001f88 	.word	0x20001f88

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20001f88 	.word	0x20001f88

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_Delay+0x40>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000008 	.word	0x20000008

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	; (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff4c 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8a:	f7ff ff61 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001e8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	6978      	ldr	r0, [r7, #20]
 8001e96:	f7ff ffb1 	bl	8001dfc <NVIC_EncodePriority>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff80 	bl	8001da8 <__NVIC_SetPriority>
}
 8001ea8:	bf00      	nop
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff54 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	e166      	b.n	80021aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8158 	beq.w	80021a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d00b      	beq.n	8001f14 <HAL_GPIO_Init+0x48>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d007      	beq.n	8001f14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f08:	2b11      	cmp	r3, #17
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b12      	cmp	r3, #18
 8001f12:	d130      	bne.n	8001f76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 0201 	and.w	r2, r3, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0xea>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d123      	bne.n	8001ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	6939      	ldr	r1, [r7, #16]
 8001ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0203 	and.w	r2, r3, #3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80b2 	beq.w	80021a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002040:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <HAL_GPIO_Init+0x2fc>)
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	4a60      	ldr	r2, [pc, #384]	; (80021c8 <HAL_GPIO_Init+0x2fc>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6613      	str	r3, [r2, #96]	; 0x60
 800204c:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_GPIO_Init+0x2fc>)
 800204e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002058:	4a5c      	ldr	r2, [pc, #368]	; (80021cc <HAL_GPIO_Init+0x300>)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	220f      	movs	r2, #15
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002082:	d02b      	beq.n	80020dc <HAL_GPIO_Init+0x210>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_GPIO_Init+0x304>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d025      	beq.n	80020d8 <HAL_GPIO_Init+0x20c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <HAL_GPIO_Init+0x308>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d01f      	beq.n	80020d4 <HAL_GPIO_Init+0x208>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a50      	ldr	r2, [pc, #320]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d019      	beq.n	80020d0 <HAL_GPIO_Init+0x204>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a4f      	ldr	r2, [pc, #316]	; (80021dc <HAL_GPIO_Init+0x310>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d013      	beq.n	80020cc <HAL_GPIO_Init+0x200>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <HAL_GPIO_Init+0x314>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00d      	beq.n	80020c8 <HAL_GPIO_Init+0x1fc>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a4d      	ldr	r2, [pc, #308]	; (80021e4 <HAL_GPIO_Init+0x318>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <HAL_GPIO_Init+0x1f8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <HAL_GPIO_Init+0x31c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_GPIO_Init+0x1f4>
 80020bc:	2307      	movs	r3, #7
 80020be:	e00e      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020c0:	2308      	movs	r3, #8
 80020c2:	e00c      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020c4:	2306      	movs	r3, #6
 80020c6:	e00a      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020c8:	2305      	movs	r3, #5
 80020ca:	e008      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020cc:	2304      	movs	r3, #4
 80020ce:	e006      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020d0:	2303      	movs	r3, #3
 80020d2:	e004      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e002      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <HAL_GPIO_Init+0x212>
 80020dc:	2300      	movs	r3, #0
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	f002 0203 	and.w	r2, r2, #3
 80020e4:	0092      	lsls	r2, r2, #2
 80020e6:	4093      	lsls	r3, r2
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ee:	4937      	ldr	r1, [pc, #220]	; (80021cc <HAL_GPIO_Init+0x300>)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3302      	adds	r3, #2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_GPIO_Init+0x320>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	43db      	mvns	r3, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002120:	4a32      	ldr	r2, [pc, #200]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800214a:	4a28      	ldr	r2, [pc, #160]	; (80021ec <HAL_GPIO_Init+0x320>)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002150:	4b26      	ldr	r3, [pc, #152]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_GPIO_Init+0x320>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_GPIO_Init+0x320>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800219e:	4a13      	ldr	r2, [pc, #76]	; (80021ec <HAL_GPIO_Init+0x320>)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3301      	adds	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f ae91 	bne.w	8001edc <HAL_GPIO_Init+0x10>
  }
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010000 	.word	0x40010000
 80021d0:	48000400 	.word	0x48000400
 80021d4:	48000800 	.word	0x48000800
 80021d8:	48000c00 	.word	0x48000c00
 80021dc:	48001000 	.word	0x48001000
 80021e0:	48001400 	.word	0x48001400
 80021e4:	48001800 	.word	0x48001800
 80021e8:	48001c00 	.word	0x48001c00
 80021ec:	40010400 	.word	0x40010400

080021f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
 80021fc:	4613      	mov	r3, r2
 80021fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002200:	787b      	ldrb	r3, [r7, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800220c:	e002      	b.n	8002214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4013      	ands	r3, r2
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43d9      	mvns	r1, r3
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	400b      	ands	r3, r1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002256:	b08f      	sub	sp, #60	; 0x3c
 8002258:	af0a      	add	r7, sp, #40	; 0x28
 800225a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e116      	b.n	8002494 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d106      	bne.n	8002286 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fb95 	bl	80019b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 fb19 	bl	80058dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	687e      	ldr	r6, [r7, #4]
 80022b2:	466d      	mov	r5, sp
 80022b4:	f106 0410 	add.w	r4, r6, #16
 80022b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80022c8:	1d33      	adds	r3, r6, #4
 80022ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022cc:	6838      	ldr	r0, [r7, #0]
 80022ce:	f003 fab3 	bl	8005838 <USB_CoreInit>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0d7      	b.n	8002494 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fb07 	bl	80058fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e04a      	b.n	800238c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	333d      	adds	r3, #61	; 0x3d
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	333c      	adds	r3, #60	; 0x3c
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	b298      	uxth	r0, r3
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3342      	adds	r3, #66	; 0x42
 8002332:	4602      	mov	r2, r0
 8002334:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	333f      	adds	r3, #63	; 0x3f
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	3344      	adds	r3, #68	; 0x44
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3348      	adds	r3, #72	; 0x48
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	3350      	adds	r3, #80	; 0x50
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	3301      	adds	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d3af      	bcc.n	80022f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e044      	b.n	8002426 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	3301      	adds	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d3b5      	bcc.n	800239c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	687e      	ldr	r6, [r7, #4]
 8002438:	466d      	mov	r5, sp
 800243a:	f106 0410 	add.w	r4, r6, #16
 800243e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800244a:	e885 0003 	stmia.w	r5, {r0, r1}
 800244e:	1d33      	adds	r3, r6, #4
 8002450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002452:	6838      	ldr	r0, [r7, #0]
 8002454:	f003 fa7e 	bl	8005954 <USB_DevInit>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e014      	b.n	8002494 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	2b01      	cmp	r3, #1
 8002480:	d102      	bne.n	8002488 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f80a 	bl	800249c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fc0e 	bl	8005cae <USB_DevDisconnect>

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800249c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	f043 0303 	orr.w	r3, r3, #3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_PWREx_GetVoltageRange+0x3c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f4:	d102      	bne.n	80024fc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80024f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fa:	e00b      	b.n	8002514 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_PWREx_GetVoltageRange+0x3c>)
 80024fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800250a:	d102      	bne.n	8002512 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800250c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002510:	e000      	b.n	8002514 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002512:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40007000 	.word	0x40007000

08002524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d141      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002532:	4b4b      	ldr	r3, [pc, #300]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253e:	d131      	bne.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002540:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002546:	4a46      	ldr	r2, [pc, #280]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800254c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002550:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002558:	4a41      	ldr	r2, [pc, #260]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002560:	4b40      	ldr	r3, [pc, #256]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2232      	movs	r2, #50	; 0x32
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	0c9b      	lsrs	r3, r3, #18
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002576:	e002      	b.n	800257e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3b01      	subs	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257e:	4b38      	ldr	r3, [pc, #224]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258a:	d102      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f2      	bne.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002592:	4b33      	ldr	r3, [pc, #204]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d158      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e057      	b.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025aa:	4a2d      	ldr	r2, [pc, #180]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025b4:	e04d      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	d141      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025be:	4b28      	ldr	r3, [pc, #160]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d131      	bne.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d2:	4a23      	ldr	r2, [pc, #140]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025e4:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2232      	movs	r2, #50	; 0x32
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	0c9b      	lsrs	r3, r3, #18
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002602:	e002      	b.n	800260a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3b01      	subs	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002616:	d102      	bne.n	800261e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f2      	bne.n	8002604 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262a:	d112      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e011      	b.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002640:	e007      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002650:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40007000 	.word	0x40007000
 8002664:	20000000 	.word	0x20000000
 8002668:	431bde83 	.word	0x431bde83

0800266c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267a:	6053      	str	r3, [r2, #4]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40007000 	.word	0x40007000

0800268c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269a:	6053      	str	r3, [r2, #4]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40007000 	.word	0x40007000

080026ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f000 bc16 	b.w	8002eec <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c0:	4ba0      	ldr	r3, [pc, #640]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ca:	4b9e      	ldr	r3, [pc, #632]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80e4 	beq.w	80028aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4c>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	f040 808b 	bne.w	8002806 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	f040 8087 	bne.w	8002806 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026f8:	4b92      	ldr	r3, [pc, #584]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_OscConfig+0x64>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e3ed      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	4b8b      	ldr	r3, [pc, #556]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <HAL_RCC_OscConfig+0x7e>
 8002720:	4b88      	ldr	r3, [pc, #544]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002728:	e005      	b.n	8002736 <HAL_RCC_OscConfig+0x8a>
 800272a:	4b86      	ldr	r3, [pc, #536]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800272c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002736:	4293      	cmp	r3, r2
 8002738:	d223      	bcs.n	8002782 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fdfa 	bl	8003338 <RCC_SetFlashLatencyFromMSIRange>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e3ce      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800274e:	4b7d      	ldr	r3, [pc, #500]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7c      	ldr	r2, [pc, #496]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002754:	f043 0308 	orr.w	r3, r3, #8
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b7a      	ldr	r3, [pc, #488]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4977      	ldr	r1, [pc, #476]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800276c:	4b75      	ldr	r3, [pc, #468]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	4972      	ldr	r1, [pc, #456]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
 8002780:	e025      	b.n	80027ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002782:	4b70      	ldr	r3, [pc, #448]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6f      	ldr	r2, [pc, #444]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	496a      	ldr	r1, [pc, #424]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	4965      	ldr	r1, [pc, #404]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fdba 	bl	8003338 <RCC_SetFlashLatencyFromMSIRange>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e38e      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ce:	f000 fcbf 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 80027d2:	4601      	mov	r1, r0
 80027d4:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	4a5a      	ldr	r2, [pc, #360]	; (8002948 <HAL_RCC_OscConfig+0x29c>)
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	fa21 f303 	lsr.w	r3, r1, r3
 80027ea:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_RCC_OscConfig+0x2a0>)
 80027ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027ee:	4b58      	ldr	r3, [pc, #352]	; (8002950 <HAL_RCC_OscConfig+0x2a4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f948 	bl	8001a88 <HAL_InitTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d052      	beq.n	80028a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	e372      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d032      	beq.n	8002874 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800280e:	4b4d      	ldr	r3, [pc, #308]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a4c      	ldr	r2, [pc, #304]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800281a:	f7ff fa47 	bl	8001cac <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002822:	f7ff fa43 	bl	8001cac <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e35b      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002834:	4b43      	ldr	r3, [pc, #268]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a3f      	ldr	r2, [pc, #252]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002846:	f043 0308 	orr.w	r3, r3, #8
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	493a      	ldr	r1, [pc, #232]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285e:	4b39      	ldr	r3, [pc, #228]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	4935      	ldr	r1, [pc, #212]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]
 8002872:	e01a      	b.n	80028aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002874:	4b33      	ldr	r3, [pc, #204]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a32      	ldr	r2, [pc, #200]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002880:	f7ff fa14 	bl	8001cac <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002888:	f7ff fa10 	bl	8001cac <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e328      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x1dc>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d073      	beq.n	800299e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_OscConfig+0x21c>
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d10e      	bne.n	80028e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d10b      	bne.n	80028e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d063      	beq.n	800299c <HAL_RCC_OscConfig+0x2f0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d15f      	bne.n	800299c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e305      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e8:	d106      	bne.n	80028f8 <HAL_RCC_OscConfig+0x24c>
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a15      	ldr	r2, [pc, #84]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e01d      	b.n	8002934 <HAL_RCC_OscConfig+0x288>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x270>
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a0f      	ldr	r2, [pc, #60]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0x288>
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a08      	ldr	r2, [pc, #32]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 8002922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a05      	ldr	r2, [pc, #20]	; (8002944 <HAL_RCC_OscConfig+0x298>)
 800292e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7ff f9b6 	bl	8001cac <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002942:	e010      	b.n	8002966 <HAL_RCC_OscConfig+0x2ba>
 8002944:	40021000 	.word	0x40021000
 8002948:	08008958 	.word	0x08008958
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002954:	f7ff f9aa 	bl	8001cac <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e2c2      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002966:	4baf      	ldr	r3, [pc, #700]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x2a8>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7ff f99a 	bl	8001cac <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7ff f996 	bl	8001cac <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e2ae      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800298e:	4ba5      	ldr	r3, [pc, #660]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x2d0>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d060      	beq.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_OscConfig+0x310>
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d119      	bne.n	80029ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d116      	bne.n	80029ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029bc:	4b99      	ldr	r3, [pc, #612]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_OscConfig+0x328>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e28b      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b93      	ldr	r3, [pc, #588]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	4990      	ldr	r1, [pc, #576]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e8:	e040      	b.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d023      	beq.n	8002a3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f2:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a8b      	ldr	r2, [pc, #556]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7ff f955 	bl	8001cac <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a06:	f7ff f951 	bl	8001cac <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e269      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a18:	4b82      	ldr	r3, [pc, #520]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b7f      	ldr	r3, [pc, #508]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	497c      	ldr	r1, [pc, #496]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
 8002a38:	e018      	b.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3a:	4b7a      	ldr	r3, [pc, #488]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a79      	ldr	r2, [pc, #484]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a46:	f7ff f931 	bl	8001cac <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4e:	f7ff f92d 	bl	8001cac <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e245      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a60:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f0      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d03c      	beq.n	8002af2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01c      	beq.n	8002aba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a80:	4b68      	ldr	r3, [pc, #416]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a86:	4a67      	ldr	r2, [pc, #412]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7ff f90c 	bl	8001cac <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a98:	f7ff f908 	bl	8001cac <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e220      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aaa:	4b5e      	ldr	r3, [pc, #376]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ef      	beq.n	8002a98 <HAL_RCC_OscConfig+0x3ec>
 8002ab8:	e01b      	b.n	8002af2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aba:	4b5a      	ldr	r3, [pc, #360]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aca:	f7ff f8ef 	bl	8001cac <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad2:	f7ff f8eb 	bl	8001cac <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e203      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ef      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80a6 	beq.w	8002c4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b04:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10d      	bne.n	8002b2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b44      	ldr	r3, [pc, #272]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	4a43      	ldr	r2, [pc, #268]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <HAL_RCC_OscConfig+0x57c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d118      	bne.n	8002b6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b38:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <HAL_RCC_OscConfig+0x57c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a3a      	ldr	r2, [pc, #232]	; (8002c28 <HAL_RCC_OscConfig+0x57c>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b44:	f7ff f8b2 	bl	8001cac <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4c:	f7ff f8ae 	bl	8001cac <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e1c6      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5e:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <HAL_RCC_OscConfig+0x57c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d108      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4d8>
 8002b72:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b82:	e024      	b.n	8002bce <HAL_RCC_OscConfig+0x522>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d110      	bne.n	8002bae <HAL_RCC_OscConfig+0x502>
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002b94:	f043 0304 	orr.w	r3, r3, #4
 8002b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b9c:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	4a20      	ldr	r2, [pc, #128]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bac:	e00f      	b.n	8002bce <HAL_RCC_OscConfig+0x522>
 8002bae:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002bc6:	f023 0304 	bic.w	r3, r3, #4
 8002bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d016      	beq.n	8002c04 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7ff f869 	bl	8001cac <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7ff f865 	bl	8001cac <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e17b      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ed      	beq.n	8002bde <HAL_RCC_OscConfig+0x532>
 8002c02:	e01a      	b.n	8002c3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7ff f852 	bl	8001cac <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c0a:	e00f      	b.n	8002c2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7ff f84e 	bl	8001cac <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d906      	bls.n	8002c2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e164      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c2c:	4ba8      	ldr	r3, [pc, #672]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e8      	bne.n	8002c0c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c3a:	7ffb      	ldrb	r3, [r7, #31]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c40:	4ba3      	ldr	r3, [pc, #652]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	4aa2      	ldr	r2, [pc, #648]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d03c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c60:	4b9b      	ldr	r3, [pc, #620]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c66:	4a9a      	ldr	r2, [pc, #616]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7ff f81c 	bl	8001cac <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c78:	f7ff f818 	bl	8001cac <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e130      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c8a:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002c8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ef      	beq.n	8002c78 <HAL_RCC_OscConfig+0x5cc>
 8002c98:	e01b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c9a:	4b8d      	ldr	r3, [pc, #564]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ca0:	4a8b      	ldr	r2, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002caa:	f7fe ffff 	bl	8001cac <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cb2:	f7fe fffb 	bl	8001cac <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e113      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cc4:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1ef      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8107 	beq.w	8002eea <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	f040 80cb 	bne.w	8002e7c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ce6:	4b7a      	ldr	r3, [pc, #488]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0203 	and.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d12c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	3b01      	subs	r3, #1
 8002d06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d123      	bne.n	8002d54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d11b      	bne.n	8002d54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d113      	bne.n	8002d54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d109      	bne.n	8002d54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d06d      	beq.n	8002e30 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d068      	beq.n	8002e2c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d66:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0ba      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d82:	f7fe ff93 	bl	8001cac <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe ff8f 	bl	8001cac <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0a7      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d9c:	4b4c      	ldr	r3, [pc, #304]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da8:	4b49      	ldr	r3, [pc, #292]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	4b49      	ldr	r3, [pc, #292]	; (8002ed4 <HAL_RCC_OscConfig+0x828>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002db8:	3a01      	subs	r2, #1
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	4311      	orrs	r1, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dc2:	0212      	lsls	r2, r2, #8
 8002dc4:	4311      	orrs	r1, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dca:	0852      	lsrs	r2, r2, #1
 8002dcc:	3a01      	subs	r2, #1
 8002dce:	0552      	lsls	r2, r2, #21
 8002dd0:	4311      	orrs	r1, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dd6:	0852      	lsrs	r2, r2, #1
 8002dd8:	3a01      	subs	r2, #1
 8002dda:	0652      	lsls	r2, r2, #25
 8002ddc:	4311      	orrs	r1, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002de2:	06d2      	lsls	r2, r2, #27
 8002de4:	430a      	orrs	r2, r1
 8002de6:	493a      	ldr	r1, [pc, #232]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dec:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a37      	ldr	r2, [pc, #220]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a34      	ldr	r2, [pc, #208]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e04:	f7fe ff52 	bl	8001cac <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe ff4e 	bl	8001cac <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e066      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2a:	e05e      	b.n	8002eea <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e05d      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d156      	bne.n	8002eea <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a23      	ldr	r2, [pc, #140]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a20      	ldr	r2, [pc, #128]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e54:	f7fe ff2a 	bl	8001cac <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fe ff26 	bl	8001cac <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e03e      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x7b0>
 8002e7a:	e036      	b.n	8002eea <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d031      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002ea0:	f023 0303 	bic.w	r3, r3, #3
 8002ea4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_RCC_OscConfig+0x824>)
 8002eac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fef9 	bl	8001cac <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ebc:	e00c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7fe fef5 	bl	8001cac <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d905      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e00d      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_OscConfig+0x848>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ec      	bne.n	8002ebe <HAL_RCC_OscConfig+0x812>
 8002ee4:	e001      	b.n	8002eea <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e10f      	b.n	8003130 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f10:	4b89      	ldr	r3, [pc, #548]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d910      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b86      	ldr	r3, [pc, #536]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 020f 	bic.w	r2, r3, #15
 8002f26:	4984      	ldr	r1, [pc, #528]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b82      	ldr	r3, [pc, #520]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0f7      	b.n	8003130 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8089 	beq.w	8003060 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d133      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f56:	4b79      	ldr	r3, [pc, #484]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0e4      	b.n	8003130 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002f66:	f000 fa41 	bl	80033ec <RCC_GetSysClockFreqFromPLLSource>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	4b74      	ldr	r3, [pc, #464]	; (8003140 <HAL_RCC_ClockConfig+0x248>)
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d955      	bls.n	800301e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002f72:	4b72      	ldr	r3, [pc, #456]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f7e:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f86:	4a6d      	ldr	r2, [pc, #436]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e044      	b.n	800301e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d03e      	beq.n	800301e <HAL_RCC_ClockConfig+0x126>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d13a      	bne.n	800301e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fa8:	4b64      	ldr	r3, [pc, #400]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb0:	4a62      	ldr	r2, [pc, #392]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	e02f      	b.n	800301e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc6:	4b5d      	ldr	r3, [pc, #372]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d115      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0ac      	b.n	8003130 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e0a0      	b.n	8003130 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fee:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e098      	b.n	8003130 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002ffe:	f000 f8a7 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 8003002:	4602      	mov	r2, r0
 8003004:	4b4e      	ldr	r3, [pc, #312]	; (8003140 <HAL_RCC_ClockConfig+0x248>)
 8003006:	429a      	cmp	r2, r3
 8003008:	d909      	bls.n	800301e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800300a:	4b4c      	ldr	r3, [pc, #304]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003012:	4a4a      	ldr	r2, [pc, #296]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8003014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003018:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4944      	ldr	r1, [pc, #272]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003030:	f7fe fe3c 	bl	8001cac <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe fe38 	bl	8001cac <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e070      	b.n	8003130 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b3b      	ldr	r3, [pc, #236]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b33      	ldr	r3, [pc, #204]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4930      	ldr	r1, [pc, #192]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
 800307e:	e008      	b.n	8003092 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b80      	cmp	r3, #128	; 0x80
 8003084:	d105      	bne.n	8003092 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4a2c      	ldr	r2, [pc, #176]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 800308c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003090:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003092:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d210      	bcs.n	80030c2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a0:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 020f 	bic.w	r2, r3, #15
 80030a8:	4923      	ldr	r1, [pc, #140]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <HAL_RCC_ClockConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e036      	b.n	8003130 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4918      	ldr	r1, [pc, #96]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4910      	ldr	r1, [pc, #64]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003100:	f000 f826 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 8003104:	4601      	mov	r1, r0
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_RCC_ClockConfig+0x244>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	4a0c      	ldr	r2, [pc, #48]	; (8003144 <HAL_RCC_ClockConfig+0x24c>)
 8003112:	5cd3      	ldrb	r3, [r2, r3]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	fa21 f303 	lsr.w	r3, r1, r3
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <HAL_RCC_ClockConfig+0x250>)
 800311e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_RCC_ClockConfig+0x254>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe fcaf 	bl	8001a88 <HAL_InitTick>
 800312a:	4603      	mov	r3, r0
 800312c:	73fb      	strb	r3, [r7, #15]

  return status;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40022000 	.word	0x40022000
 800313c:	40021000 	.word	0x40021000
 8003140:	04c4b400 	.word	0x04c4b400
 8003144:	08008958 	.word	0x08008958
 8003148:	20000000 	.word	0x20000000
 800314c:	20000004 	.word	0x20000004

08003150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315e:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <HAL_RCC_GetSysClockFreq+0x104>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003168:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <HAL_RCC_GetSysClockFreq+0x104>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x34>
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d121      	bne.n	80031c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d11e      	bne.n	80031c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003184:	4b33      	ldr	r3, [pc, #204]	; (8003254 <HAL_RCC_GetSysClockFreq+0x104>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003190:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_RCC_GetSysClockFreq+0x104>)
 8003192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	e005      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <HAL_RCC_GetSysClockFreq+0x104>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d102      	bne.n	80031ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	e004      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031d4:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_RCC_GetSysClockFreq+0x110>)
 80031d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d133      	bne.n	8003246 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <HAL_RCC_GetSysClockFreq+0x104>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d002      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d003      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0xaa>
 80031f2:	e005      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_GetSysClockFreq+0x10c>)
 80031f6:	617b      	str	r3, [r7, #20]
      break;
 80031f8:	e005      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_GetSysClockFreq+0x110>)
 80031fc:	617b      	str	r3, [r7, #20]
      break;
 80031fe:	e002      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	617b      	str	r3, [r7, #20]
      break;
 8003204:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_RCC_GetSysClockFreq+0x104>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	3301      	adds	r3, #1
 8003212:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <HAL_RCC_GetSysClockFreq+0x104>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	fb02 f203 	mul.w	r2, r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_GetSysClockFreq+0x104>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0e5b      	lsrs	r3, r3, #25
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	3301      	adds	r3, #1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003246:	69bb      	ldr	r3, [r7, #24]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3724      	adds	r7, #36	; 0x24
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	40021000 	.word	0x40021000
 8003258:	08008970 	.word	0x08008970
 800325c:	00f42400 	.word	0x00f42400
 8003260:	007a1200 	.word	0x007a1200

08003264 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_RCC_GetHCLKFreq+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003280:	f7ff fff0 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8003284:	4601      	mov	r1, r0
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	08008968 	.word	0x08008968

080032a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032ac:	f7ff ffda 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032b0:	4601      	mov	r1, r0
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	0adb      	lsrs	r3, r3, #11
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08008968 	.word	0x08008968

080032d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	220f      	movs	r2, #15
 80032e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0203 	and.w	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	08db      	lsrs	r3, r3, #3
 800330e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_RCC_GetClockConfig+0x60>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	40022000 	.word	0x40022000

08003338 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003350:	f7ff f8c8 	bl	80024e4 <HAL_PWREx_GetVoltageRange>
 8003354:	6178      	str	r0, [r7, #20]
 8003356:	e014      	b.n	8003382 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	4a21      	ldr	r2, [pc, #132]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003362:	6593      	str	r3, [r2, #88]	; 0x58
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003370:	f7ff f8b8 	bl	80024e4 <HAL_PWREx_GetVoltageRange>
 8003374:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003388:	d10b      	bne.n	80033a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d913      	bls.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2ba0      	cmp	r3, #160	; 0xa0
 8003394:	d902      	bls.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003396:	2302      	movs	r3, #2
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e00d      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800339c:	2301      	movs	r3, #1
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	e00a      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b7f      	cmp	r3, #127	; 0x7f
 80033a6:	d902      	bls.n	80033ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033a8:	2302      	movs	r3, #2
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	e004      	b.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b70      	cmp	r3, #112	; 0x70
 80033b2:	d101      	bne.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b4:	2301      	movs	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 020f 	bic.w	r2, r3, #15
 80033c0:	4909      	ldr	r1, [pc, #36]	; (80033e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40022000 	.word	0x40022000

080033ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d118      	bne.n	8003434 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003402:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d107      	bne.n	800341e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800340e:	4b27      	ldr	r3, [pc, #156]	; (80034ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e005      	b.n	800342a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800342a:	4a21      	ldr	r2, [pc, #132]	; (80034b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003432:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003434:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d002      	beq.n	800344a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003444:	2b03      	cmp	r3, #3
 8003446:	d003      	beq.n	8003450 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003448:	e005      	b.n	8003456 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800344a:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800344c:	613b      	str	r3, [r7, #16]
    break;
 800344e:	e005      	b.n	800345c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003452:	613b      	str	r3, [r7, #16]
    break;
 8003454:	e002      	b.n	800345c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	613b      	str	r3, [r7, #16]
    break;
 800345a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3301      	adds	r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	fb02 f203 	mul.w	r2, r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	0e5b      	lsrs	r3, r3, #25
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	3301      	adds	r3, #1
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800349c:	683b      	ldr	r3, [r7, #0]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	08008970 	.word	0x08008970
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c4:	2300      	movs	r3, #0
 80034c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034c8:	2300      	movs	r3, #0
 80034ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d03d      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034dc:	2b40      	cmp	r3, #64	; 0x40
 80034de:	d00b      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d804      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00e      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d015      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034ec:	e01d      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80034ee:	2b60      	cmp	r3, #96	; 0x60
 80034f0:	d01e      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d01c      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034f6:	e018      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034f8:	4b86      	ldr	r3, [pc, #536]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4a85      	ldr	r2, [pc, #532]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003502:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003504:	e015      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fafd 	bl	8003b0c <RCCEx_PLLSAI1_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003516:	e00c      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3320      	adds	r3, #32
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fbe4 	bl	8003cec <RCCEx_PLLSAI2_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003528:	e003      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	74fb      	strb	r3, [r7, #19]
      break;
 800352e:	e000      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003532:	7cfb      	ldrb	r3, [r7, #19]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003538:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800353a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800353e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003546:	4973      	ldr	r1, [pc, #460]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800354e:	e001      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d042      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003568:	d00f      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800356a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356e:	d805      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d011      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003578:	d017      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xee>
 800357a:	e01f      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x100>
 800357c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003580:	d01f      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d01c      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003588:	e018      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800358a:	4b62      	ldr	r3, [pc, #392]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	4a61      	ldr	r2, [pc, #388]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003596:	e015      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fab4 	bl	8003b0c <RCCEx_PLLSAI1_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035a8:	e00c      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3320      	adds	r3, #32
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fb9b 	bl	8003cec <RCCEx_PLLSAI2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ba:	e003      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	74fb      	strb	r3, [r7, #19]
      break;
 80035c0:	e000      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80035c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035ca:	4b52      	ldr	r3, [pc, #328]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	494e      	ldr	r1, [pc, #312]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80035e0:	e001      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 809f 	beq.w	8003732 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f4:	2300      	movs	r3, #0
 80035f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035f8:	4b46      	ldr	r3, [pc, #280]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	4a40      	ldr	r2, [pc, #256]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003618:	6593      	str	r3, [r2, #88]	; 0x58
 800361a:	4b3e      	ldr	r3, [pc, #248]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003626:	2301      	movs	r3, #1
 8003628:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a3a      	ldr	r2, [pc, #232]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003634:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003636:	f7fe fb39 	bl	8001cac <HAL_GetTick>
 800363a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800363c:	e009      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363e:	f7fe fb35 	bl	8001cac <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d902      	bls.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	74fb      	strb	r3, [r7, #19]
        break;
 8003650:	e005      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ef      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d15b      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003664:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01f      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	429a      	cmp	r2, r3
 8003680:	d019      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003682:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800368e:	4b21      	ldr	r3, [pc, #132]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036ae:	4a19      	ldr	r2, [pc, #100]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe faf4 	bl	8001cac <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c6:	e00b      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe faf0 	bl	8001cac <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d902      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	74fb      	strb	r3, [r7, #19]
            break;
 80036de:	e006      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e0:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ec      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10c      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	4903      	ldr	r1, [pc, #12]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800370c:	e008      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	74bb      	strb	r3, [r7, #18]
 8003712:	e005      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003714:	40021000 	.word	0x40021000
 8003718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003720:	7c7b      	ldrb	r3, [r7, #17]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d105      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4ba0      	ldr	r3, [pc, #640]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	4a9f      	ldr	r2, [pc, #636]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003730:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800373e:	4b9a      	ldr	r3, [pc, #616]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f023 0203 	bic.w	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	4996      	ldr	r1, [pc, #600]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003760:	4b91      	ldr	r3, [pc, #580]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f023 020c 	bic.w	r2, r3, #12
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	498e      	ldr	r1, [pc, #568]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003782:	4b89      	ldr	r3, [pc, #548]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	4985      	ldr	r1, [pc, #532]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037a4:	4b80      	ldr	r3, [pc, #512]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b2:	497d      	ldr	r1, [pc, #500]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037c6:	4b78      	ldr	r3, [pc, #480]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d4:	4974      	ldr	r1, [pc, #464]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037e8:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f6:	496c      	ldr	r1, [pc, #432]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003818:	4963      	ldr	r1, [pc, #396]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800382c:	4b5e      	ldr	r3, [pc, #376]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800383a:	495b      	ldr	r1, [pc, #364]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800384e:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	4952      	ldr	r1, [pc, #328]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003870:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	494a      	ldr	r1, [pc, #296]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003892:	4b45      	ldr	r3, [pc, #276]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	4941      	ldr	r1, [pc, #260]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038b4:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	4939      	ldr	r1, [pc, #228]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d028      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d6:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e4:	4930      	ldr	r1, [pc, #192]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f4:	d106      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f6:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003900:	60d3      	str	r3, [r2, #12]
 8003902:	e011      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800390c:	d10c      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	2101      	movs	r1, #1
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f8f9 	bl	8003b0c <RCCEx_PLLSAI1_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d04d      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800393c:	d108      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800393e:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800394a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800394e:	e012      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003950:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003956:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800395c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396e:	490e      	ldr	r1, [pc, #56]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800397a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800397e:	d106      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398a:	60d3      	str	r3, [r2, #12]
 800398c:	e020      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003996:	d109      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4a02      	ldr	r2, [pc, #8]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a2:	60d3      	str	r3, [r2, #12]
 80039a4:	e014      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3304      	adds	r3, #4
 80039ba:	2101      	movs	r1, #1
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 f8a5 	bl	8003b0c <RCCEx_PLLSAI1_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039c6:	7cfb      	ldrb	r3, [r7, #19]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d028      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039dc:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ea:	4947      	ldr	r1, [pc, #284]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fa:	d106      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039fc:	4b42      	ldr	r3, [pc, #264]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a41      	ldr	r2, [pc, #260]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a06:	60d3      	str	r3, [r2, #12]
 8003a08:	e011      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a12:	d10c      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	2101      	movs	r1, #1
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f876 	bl	8003b0c <RCCEx_PLLSAI1_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01e      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a3a:	4b33      	ldr	r3, [pc, #204]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4a:	492f      	ldr	r1, [pc, #188]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2102      	movs	r1, #2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f851 	bl	8003b0c <RCCEx_PLLSAI1_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a84:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a8a:	f023 0204 	bic.w	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a94:	491c      	ldr	r1, [pc, #112]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003aa8:	4b17      	ldr	r3, [pc, #92]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aae:	f023 0218 	bic.w	r2, r3, #24
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	4913      	ldr	r1, [pc, #76]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d017      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003acc:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ad2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003adc:	490a      	ldr	r1, [pc, #40]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aee:	d105      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003afc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000

08003b0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b1a:	4b70      	ldr	r3, [pc, #448]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00e      	beq.n	8003b44 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b26:	4b6d      	ldr	r3, [pc, #436]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0203 	and.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d103      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
       ||
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d13f      	bne.n	8003bbe <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
 8003b42:	e03c      	b.n	8003bbe <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d00c      	beq.n	8003b66 <RCCEx_PLLSAI1_Config+0x5a>
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d013      	beq.n	8003b78 <RCCEx_PLLSAI1_Config+0x6c>
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d120      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b54:	4b61      	ldr	r3, [pc, #388]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11d      	bne.n	8003b9c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b64:	e01a      	b.n	8003b9c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b66:	4b5d      	ldr	r3, [pc, #372]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d116      	bne.n	8003ba0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e013      	b.n	8003ba0 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b78:	4b58      	ldr	r3, [pc, #352]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10f      	bne.n	8003ba4 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b84:	4b55      	ldr	r3, [pc, #340]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b94:	e006      	b.n	8003ba4 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9a:	e004      	b.n	8003ba6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003b9c:	bf00      	nop
 8003b9e:	e002      	b.n	8003ba6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003ba0:	bf00      	nop
 8003ba2:	e000      	b.n	8003ba6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003ba4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d108      	bne.n	8003bbe <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f023 0203 	bic.w	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4948      	ldr	r1, [pc, #288]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 8086 	bne.w	8003cd2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bc6:	4b45      	ldr	r3, [pc, #276]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a44      	ldr	r2, [pc, #272]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd2:	f7fe f86b 	bl	8001cac <HAL_GetTick>
 8003bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bd8:	e009      	b.n	8003bee <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bda:	f7fe f867 	bl	8001cac <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d902      	bls.n	8003bee <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	73fb      	strb	r3, [r7, #15]
        break;
 8003bec:	e005      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bee:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ef      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d168      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d113      	bne.n	8003c2e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c06:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6892      	ldr	r2, [r2, #8]
 8003c12:	0211      	lsls	r1, r2, #8
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68d2      	ldr	r2, [r2, #12]
 8003c18:	06d2      	lsls	r2, r2, #27
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6852      	ldr	r2, [r2, #4]
 8003c20:	3a01      	subs	r2, #1
 8003c22:	0112      	lsls	r2, r2, #4
 8003c24:	430a      	orrs	r2, r1
 8003c26:	492d      	ldr	r1, [pc, #180]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	610b      	str	r3, [r1, #16]
 8003c2c:	e02d      	b.n	8003c8a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d115      	bne.n	8003c60 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c34:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6892      	ldr	r2, [r2, #8]
 8003c40:	0211      	lsls	r1, r2, #8
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6912      	ldr	r2, [r2, #16]
 8003c46:	0852      	lsrs	r2, r2, #1
 8003c48:	3a01      	subs	r2, #1
 8003c4a:	0552      	lsls	r2, r2, #21
 8003c4c:	4311      	orrs	r1, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6852      	ldr	r2, [r2, #4]
 8003c52:	3a01      	subs	r2, #1
 8003c54:	0112      	lsls	r2, r2, #4
 8003c56:	430a      	orrs	r2, r1
 8003c58:	4920      	ldr	r1, [pc, #128]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	610b      	str	r3, [r1, #16]
 8003c5e:	e014      	b.n	8003c8a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c60:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6892      	ldr	r2, [r2, #8]
 8003c6c:	0211      	lsls	r1, r2, #8
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6952      	ldr	r2, [r2, #20]
 8003c72:	0852      	lsrs	r2, r2, #1
 8003c74:	3a01      	subs	r2, #1
 8003c76:	0652      	lsls	r2, r2, #25
 8003c78:	4311      	orrs	r1, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6852      	ldr	r2, [r2, #4]
 8003c7e:	3a01      	subs	r2, #1
 8003c80:	0112      	lsls	r2, r2, #4
 8003c82:	430a      	orrs	r2, r1
 8003c84:	4915      	ldr	r1, [pc, #84]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c96:	f7fe f809 	bl	8001cac <HAL_GetTick>
 8003c9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c9c:	e009      	b.n	8003cb2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c9e:	f7fe f805 	bl	8001cac <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d902      	bls.n	8003cb2 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	73fb      	strb	r3, [r7, #15]
          break;
 8003cb0:	e005      	b.n	8003cbe <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ef      	beq.n	8003c9e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	07ff800f 	.word	0x07ff800f
 8003ce4:	ff9f800f 	.word	0xff9f800f
 8003ce8:	f9ff800f 	.word	0xf9ff800f

08003cec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cfa:	4b70      	ldr	r3, [pc, #448]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00e      	beq.n	8003d24 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d06:	4b6d      	ldr	r3, [pc, #436]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0203 	and.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d103      	bne.n	8003d1e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
       ||
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d13f      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
 8003d22:	e03c      	b.n	8003d9e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d00c      	beq.n	8003d46 <RCCEx_PLLSAI2_Config+0x5a>
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d013      	beq.n	8003d58 <RCCEx_PLLSAI2_Config+0x6c>
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d120      	bne.n	8003d76 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d34:	4b61      	ldr	r3, [pc, #388]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d11d      	bne.n	8003d7c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d44:	e01a      	b.n	8003d7c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d46:	4b5d      	ldr	r3, [pc, #372]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d56:	e013      	b.n	8003d80 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d58:	4b58      	ldr	r3, [pc, #352]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10f      	bne.n	8003d84 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d64:	4b55      	ldr	r3, [pc, #340]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d74:	e006      	b.n	8003d84 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7a:	e004      	b.n	8003d86 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003d7c:	bf00      	nop
 8003d7e:	e002      	b.n	8003d86 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003d84:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003d8c:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f023 0203 	bic.w	r2, r3, #3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4948      	ldr	r1, [pc, #288]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 8086 	bne.w	8003eb2 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003da6:	4b45      	ldr	r3, [pc, #276]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a44      	ldr	r2, [pc, #272]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db2:	f7fd ff7b 	bl	8001cac <HAL_GetTick>
 8003db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003db8:	e009      	b.n	8003dce <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dba:	f7fd ff77 	bl	8001cac <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d902      	bls.n	8003dce <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	73fb      	strb	r3, [r7, #15]
        break;
 8003dcc:	e005      	b.n	8003dda <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dce:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ef      	bne.n	8003dba <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d168      	bne.n	8003eb2 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d113      	bne.n	8003e0e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003de6:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	4b35      	ldr	r3, [pc, #212]	; (8003ec0 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6892      	ldr	r2, [r2, #8]
 8003df2:	0211      	lsls	r1, r2, #8
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68d2      	ldr	r2, [r2, #12]
 8003df8:	06d2      	lsls	r2, r2, #27
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6852      	ldr	r2, [r2, #4]
 8003e00:	3a01      	subs	r2, #1
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	430a      	orrs	r2, r1
 8003e06:	492d      	ldr	r1, [pc, #180]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	614b      	str	r3, [r1, #20]
 8003e0c:	e02d      	b.n	8003e6a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d115      	bne.n	8003e40 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e14:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6892      	ldr	r2, [r2, #8]
 8003e20:	0211      	lsls	r1, r2, #8
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6912      	ldr	r2, [r2, #16]
 8003e26:	0852      	lsrs	r2, r2, #1
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	0552      	lsls	r2, r2, #21
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6852      	ldr	r2, [r2, #4]
 8003e32:	3a01      	subs	r2, #1
 8003e34:	0112      	lsls	r2, r2, #4
 8003e36:	430a      	orrs	r2, r1
 8003e38:	4920      	ldr	r1, [pc, #128]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	614b      	str	r3, [r1, #20]
 8003e3e:	e014      	b.n	8003e6a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e40:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6892      	ldr	r2, [r2, #8]
 8003e4c:	0211      	lsls	r1, r2, #8
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6952      	ldr	r2, [r2, #20]
 8003e52:	0852      	lsrs	r2, r2, #1
 8003e54:	3a01      	subs	r2, #1
 8003e56:	0652      	lsls	r2, r2, #25
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6852      	ldr	r2, [r2, #4]
 8003e5e:	3a01      	subs	r2, #1
 8003e60:	0112      	lsls	r2, r2, #4
 8003e62:	430a      	orrs	r2, r1
 8003e64:	4915      	ldr	r1, [pc, #84]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e76:	f7fd ff19 	bl	8001cac <HAL_GetTick>
 8003e7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e7c:	e009      	b.n	8003e92 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e7e:	f7fd ff15 	bl	8001cac <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d902      	bls.n	8003e92 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e90:	e005      	b.n	8003e9e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e92:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ef      	beq.n	8003e7e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	07ff800f 	.word	0x07ff800f
 8003ec4:	ff9f800f 	.word	0xff9f800f
 8003ec8:	f9ff800f 	.word	0xf9ff800f

08003ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e049      	b.n	8003f72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f841 	bl	8003f7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f000 fc60 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e04f      	b.n	8004048 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01d      	beq.n	8004006 <HAL_TIM_Base_Start_IT+0x76>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d018      	beq.n	8004006 <HAL_TIM_Base_Start_IT+0x76>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_TIM_Base_Start_IT+0x76>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <HAL_TIM_Base_Start_IT+0xcc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIM_Base_Start_IT+0x76>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_TIM_Base_Start_IT+0x76>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIM_Base_Start_IT+0x76>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a19      	ldr	r2, [pc, #100]	; (8004068 <HAL_TIM_Base_Start_IT+0xd8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d115      	bne.n	8004032 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <HAL_TIM_Base_Start_IT+0xdc>)
 800400e:	4013      	ands	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b06      	cmp	r3, #6
 8004016:	d015      	beq.n	8004044 <HAL_TIM_Base_Start_IT+0xb4>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401e:	d011      	beq.n	8004044 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004030:	e008      	b.n	8004044 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e000      	b.n	8004046 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004044:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40013400 	.word	0x40013400
 8004068:	40014000 	.word	0x40014000
 800406c:	00010007 	.word	0x00010007

08004070 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e049      	b.n	8004116 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fc3e 	bl	8001918 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f000 fb8e 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <HAL_TIM_IC_Start_IT+0x1a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004136:	b2db      	uxtb	r3, r3
 8004138:	e023      	b.n	8004182 <HAL_TIM_IC_Start_IT+0x62>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d104      	bne.n	800414a <HAL_TIM_IC_Start_IT+0x2a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e01b      	b.n	8004182 <HAL_TIM_IC_Start_IT+0x62>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d104      	bne.n	800415a <HAL_TIM_IC_Start_IT+0x3a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004156:	b2db      	uxtb	r3, r3
 8004158:	e013      	b.n	8004182 <HAL_TIM_IC_Start_IT+0x62>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b0c      	cmp	r3, #12
 800415e:	d104      	bne.n	800416a <HAL_TIM_IC_Start_IT+0x4a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004166:	b2db      	uxtb	r3, r3
 8004168:	e00b      	b.n	8004182 <HAL_TIM_IC_Start_IT+0x62>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b10      	cmp	r3, #16
 800416e:	d104      	bne.n	800417a <HAL_TIM_IC_Start_IT+0x5a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004176:	b2db      	uxtb	r3, r3
 8004178:	e003      	b.n	8004182 <HAL_TIM_IC_Start_IT+0x62>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004180:	b2db      	uxtb	r3, r3
 8004182:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d104      	bne.n	8004194 <HAL_TIM_IC_Start_IT+0x74>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e013      	b.n	80041bc <HAL_TIM_IC_Start_IT+0x9c>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b04      	cmp	r3, #4
 8004198:	d104      	bne.n	80041a4 <HAL_TIM_IC_Start_IT+0x84>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	e00b      	b.n	80041bc <HAL_TIM_IC_Start_IT+0x9c>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d104      	bne.n	80041b4 <HAL_TIM_IC_Start_IT+0x94>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	e003      	b.n	80041bc <HAL_TIM_IC_Start_IT+0x9c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d102      	bne.n	80041ca <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80041c4:	7bbb      	ldrb	r3, [r7, #14]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d001      	beq.n	80041ce <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0d8      	b.n	8004380 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d104      	bne.n	80041de <HAL_TIM_IC_Start_IT+0xbe>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041dc:	e023      	b.n	8004226 <HAL_TIM_IC_Start_IT+0x106>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d104      	bne.n	80041ee <HAL_TIM_IC_Start_IT+0xce>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ec:	e01b      	b.n	8004226 <HAL_TIM_IC_Start_IT+0x106>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_IC_Start_IT+0xde>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041fc:	e013      	b.n	8004226 <HAL_TIM_IC_Start_IT+0x106>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b0c      	cmp	r3, #12
 8004202:	d104      	bne.n	800420e <HAL_TIM_IC_Start_IT+0xee>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800420c:	e00b      	b.n	8004226 <HAL_TIM_IC_Start_IT+0x106>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b10      	cmp	r3, #16
 8004212:	d104      	bne.n	800421e <HAL_TIM_IC_Start_IT+0xfe>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421c:	e003      	b.n	8004226 <HAL_TIM_IC_Start_IT+0x106>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <HAL_TIM_IC_Start_IT+0x116>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004234:	e013      	b.n	800425e <HAL_TIM_IC_Start_IT+0x13e>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b04      	cmp	r3, #4
 800423a:	d104      	bne.n	8004246 <HAL_TIM_IC_Start_IT+0x126>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004244:	e00b      	b.n	800425e <HAL_TIM_IC_Start_IT+0x13e>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d104      	bne.n	8004256 <HAL_TIM_IC_Start_IT+0x136>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004254:	e003      	b.n	800425e <HAL_TIM_IC_Start_IT+0x13e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b0c      	cmp	r3, #12
 8004262:	d841      	bhi.n	80042e8 <HAL_TIM_IC_Start_IT+0x1c8>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <HAL_TIM_IC_Start_IT+0x14c>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042e9 	.word	0x080042e9
 8004274:	080042e9 	.word	0x080042e9
 8004278:	080042e9 	.word	0x080042e9
 800427c:	080042b3 	.word	0x080042b3
 8004280:	080042e9 	.word	0x080042e9
 8004284:	080042e9 	.word	0x080042e9
 8004288:	080042e9 	.word	0x080042e9
 800428c:	080042c5 	.word	0x080042c5
 8004290:	080042e9 	.word	0x080042e9
 8004294:	080042e9 	.word	0x080042e9
 8004298:	080042e9 	.word	0x080042e9
 800429c:	080042d7 	.word	0x080042d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0202 	orr.w	r2, r2, #2
 80042ae:	60da      	str	r2, [r3, #12]
      break;
 80042b0:	e01b      	b.n	80042ea <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0204 	orr.w	r2, r2, #4
 80042c0:	60da      	str	r2, [r3, #12]
      break;
 80042c2:	e012      	b.n	80042ea <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0208 	orr.w	r2, r2, #8
 80042d2:	60da      	str	r2, [r3, #12]
      break;
 80042d4:	e009      	b.n	80042ea <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0210 	orr.w	r2, r2, #16
 80042e4:	60da      	str	r2, [r3, #12]
      break;
 80042e6:	e000      	b.n	80042ea <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 80042e8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fc2a 	bl	8004b4c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a22      	ldr	r2, [pc, #136]	; (8004388 <HAL_TIM_IC_Start_IT+0x268>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d01d      	beq.n	800433e <HAL_TIM_IC_Start_IT+0x21e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430a:	d018      	beq.n	800433e <HAL_TIM_IC_Start_IT+0x21e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1e      	ldr	r2, [pc, #120]	; (800438c <HAL_TIM_IC_Start_IT+0x26c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <HAL_TIM_IC_Start_IT+0x21e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <HAL_TIM_IC_Start_IT+0x270>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <HAL_TIM_IC_Start_IT+0x21e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_TIM_IC_Start_IT+0x274>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d009      	beq.n	800433e <HAL_TIM_IC_Start_IT+0x21e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1a      	ldr	r2, [pc, #104]	; (8004398 <HAL_TIM_IC_Start_IT+0x278>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIM_IC_Start_IT+0x21e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a18      	ldr	r2, [pc, #96]	; (800439c <HAL_TIM_IC_Start_IT+0x27c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d115      	bne.n	800436a <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_TIM_IC_Start_IT+0x280>)
 8004346:	4013      	ands	r3, r2
 8004348:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b06      	cmp	r3, #6
 800434e:	d015      	beq.n	800437c <HAL_TIM_IC_Start_IT+0x25c>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004356:	d011      	beq.n	800437c <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004368:	e008      	b.n	800437c <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	e000      	b.n	800437e <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40012c00 	.word	0x40012c00
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00
 8004398:	40013400 	.word	0x40013400
 800439c:	40014000 	.word	0x40014000
 80043a0:	00010007 	.word	0x00010007

080043a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d122      	bne.n	8004400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d11b      	bne.n	8004400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0202 	mvn.w	r2, #2
 80043d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc fdc8 	bl	8000f7c <HAL_TIM_IC_CaptureCallback>
 80043ec:	e005      	b.n	80043fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f9d0 	bl	8004794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f9d7 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b04      	cmp	r3, #4
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0204 	mvn.w	r2, #4
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fc fd9e 	bl	8000f7c <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9a6 	bl	8004794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f9ad 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b08      	cmp	r3, #8
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b08      	cmp	r3, #8
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0208 	mvn.w	r2, #8
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2204      	movs	r2, #4
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc fd74 	bl	8000f7c <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f97c 	bl	8004794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f983 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0210 	mvn.w	r2, #16
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2208      	movs	r2, #8
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fd4a 	bl	8000f7c <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f952 	bl	8004794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f959 	bl	80047a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10e      	bne.n	8004528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0201 	mvn.w	r2, #1
 8004520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd f940 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b80      	cmp	r3, #128	; 0x80
 8004534:	d10e      	bne.n	8004554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	d107      	bne.n	8004554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800454c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fbb4 	bl	8004cbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004562:	d10e      	bne.n	8004582 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d107      	bne.n	8004582 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800457a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fba7 	bl	8004cd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d10e      	bne.n	80045ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d107      	bne.n	80045ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f907 	bl	80047bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d10e      	bne.n	80045da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d107      	bne.n	80045da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f06f 0220 	mvn.w	r2, #32
 80045d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fb67 	bl	8004ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_TIM_IC_ConfigChannel+0x1a>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e082      	b.n	8004702 <HAL_TIM_IC_ConfigChannel+0x120>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11b      	bne.n	8004642 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f000 f973 	bl	8004904 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 020c 	bic.w	r2, r2, #12
 800462c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6999      	ldr	r1, [r3, #24]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	619a      	str	r2, [r3, #24]
 8004640:	e05a      	b.n	80046f8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b04      	cmp	r3, #4
 8004646:	d11c      	bne.n	8004682 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6819      	ldr	r1, [r3, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f000 f9c2 	bl	80049e0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800466a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6999      	ldr	r1, [r3, #24]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	021a      	lsls	r2, r3, #8
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	619a      	str	r2, [r3, #24]
 8004680:	e03a      	b.n	80046f8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	6819      	ldr	r1, [r3, #0]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f000 f9df 	bl	8004a5a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 020c 	bic.w	r2, r2, #12
 80046aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69d9      	ldr	r1, [r3, #28]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	61da      	str	r2, [r3, #28]
 80046be:	e01b      	b.n	80046f8 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f000 f9ff 	bl	8004ad2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69d9      	ldr	r1, [r3, #28]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	021a      	lsls	r2, r3, #8
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	d831      	bhi.n	8004784 <HAL_TIM_ReadCapturedValue+0x78>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	0800475d 	.word	0x0800475d
 800472c:	08004785 	.word	0x08004785
 8004730:	08004785 	.word	0x08004785
 8004734:	08004785 	.word	0x08004785
 8004738:	08004767 	.word	0x08004767
 800473c:	08004785 	.word	0x08004785
 8004740:	08004785 	.word	0x08004785
 8004744:	08004785 	.word	0x08004785
 8004748:	08004771 	.word	0x08004771
 800474c:	08004785 	.word	0x08004785
 8004750:	08004785 	.word	0x08004785
 8004754:	08004785 	.word	0x08004785
 8004758:	0800477b 	.word	0x0800477b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	60fb      	str	r3, [r7, #12]

      break;
 8004764:	e00f      	b.n	8004786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	60fb      	str	r3, [r7, #12]

      break;
 800476e:	e00a      	b.n	8004786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	60fb      	str	r3, [r7, #12]

      break;
 8004778:	e005      	b.n	8004786 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	60fb      	str	r3, [r7, #12]

      break;
 8004782:	e000      	b.n	8004786 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004784:	bf00      	nop
  }

  return tmpreg;
 8004786:	68fb      	ldr	r3, [r7, #12]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a40      	ldr	r2, [pc, #256]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d00f      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3d      	ldr	r2, [pc, #244]	; (80048e8 <TIM_Base_SetConfig+0x118>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00b      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a3c      	ldr	r2, [pc, #240]	; (80048ec <TIM_Base_SetConfig+0x11c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3b      	ldr	r2, [pc, #236]	; (80048f0 <TIM_Base_SetConfig+0x120>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3a      	ldr	r2, [pc, #232]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a2f      	ldr	r2, [pc, #188]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01f      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d01b      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <TIM_Base_SetConfig+0x118>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d017      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2b      	ldr	r2, [pc, #172]	; (80048ec <TIM_Base_SetConfig+0x11c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2a      	ldr	r2, [pc, #168]	; (80048f0 <TIM_Base_SetConfig+0x120>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00f      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a29      	ldr	r2, [pc, #164]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00b      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a28      	ldr	r2, [pc, #160]	; (80048f8 <TIM_Base_SetConfig+0x128>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a27      	ldr	r2, [pc, #156]	; (80048fc <TIM_Base_SetConfig+0x12c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a26      	ldr	r2, [pc, #152]	; (8004900 <TIM_Base_SetConfig+0x130>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a10      	ldr	r2, [pc, #64]	; (80048e4 <TIM_Base_SetConfig+0x114>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00f      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <TIM_Base_SetConfig+0x124>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00b      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a11      	ldr	r2, [pc, #68]	; (80048f8 <TIM_Base_SetConfig+0x128>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a10      	ldr	r2, [pc, #64]	; (80048fc <TIM_Base_SetConfig+0x12c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0xf8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a0f      	ldr	r2, [pc, #60]	; (8004900 <TIM_Base_SetConfig+0x130>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d103      	bne.n	80048d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	615a      	str	r2, [r3, #20]
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40013400 	.word	0x40013400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f023 0201 	bic.w	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <TIM_TI1_SetConfig+0xc4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d017      	beq.n	8004962 <TIM_TI1_SetConfig+0x5e>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004938:	d013      	beq.n	8004962 <TIM_TI1_SetConfig+0x5e>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a23      	ldr	r2, [pc, #140]	; (80049cc <TIM_TI1_SetConfig+0xc8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00f      	beq.n	8004962 <TIM_TI1_SetConfig+0x5e>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <TIM_TI1_SetConfig+0xcc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00b      	beq.n	8004962 <TIM_TI1_SetConfig+0x5e>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <TIM_TI1_SetConfig+0xd0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <TIM_TI1_SetConfig+0x5e>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <TIM_TI1_SetConfig+0xd4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_TI1_SetConfig+0x5e>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <TIM_TI1_SetConfig+0xd8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d101      	bne.n	8004966 <TIM_TI1_SetConfig+0x62>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <TIM_TI1_SetConfig+0x64>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e003      	b.n	8004986 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800498c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	b2db      	uxtb	r3, r3
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f023 030a 	bic.w	r3, r3, #10
 80049a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f003 030a 	and.w	r3, r3, #10
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	40013400 	.word	0x40013400
 80049dc:	40014000 	.word	0x40014000

080049e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0210 	bic.w	r2, r3, #16
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	031b      	lsls	r3, r3, #12
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b087      	sub	sp, #28
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	60b9      	str	r1, [r7, #8]
 8004a64:	607a      	str	r2, [r7, #4]
 8004a66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0303 	bic.w	r3, r3, #3
 8004a86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	031b      	lsls	r3, r3, #12
 8004b2a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	621a      	str	r2, [r3, #32]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	2201      	movs	r2, #1
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1a      	ldr	r2, [r3, #32]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	401a      	ands	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1a      	ldr	r2, [r3, #32]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e068      	b.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2e      	ldr	r2, [pc, #184]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d108      	bne.n	8004bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01d      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c22:	d018      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1a      	ldr	r2, [pc, #104]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d10c      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40013400 	.word	0x40013400
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40014000 	.word	0x40014000

08004ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e042      	b.n	8004d7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fc fd8b 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2224      	movs	r2, #36	; 0x24
 8004d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f82c 	bl	8004d84 <UART_SetConfig>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e022      	b.n	8004d7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 faf2 	bl	8005328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fb79 	bl	800546c <UART_CheckIdleState>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d84:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004d88:	b088      	sub	sp, #32
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4bb1      	ldr	r3, [pc, #708]	; (8005080 <UART_SetConfig+0x2fc>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	69f9      	ldr	r1, [r7, #28]
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4aa6      	ldr	r2, [pc, #664]	; (8005084 <UART_SetConfig+0x300>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	69f9      	ldr	r1, [r7, #28]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	f023 010f 	bic.w	r1, r3, #15
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a97      	ldr	r2, [pc, #604]	; (8005088 <UART_SetConfig+0x304>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d121      	bne.n	8004e74 <UART_SetConfig+0xf0>
 8004e30:	4b96      	ldr	r3, [pc, #600]	; (800508c <UART_SetConfig+0x308>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d816      	bhi.n	8004e6c <UART_SetConfig+0xe8>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0xc0>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e61 	.word	0x08004e61
 8004e4c:	08004e5b 	.word	0x08004e5b
 8004e50:	08004e67 	.word	0x08004e67
 8004e54:	2301      	movs	r3, #1
 8004e56:	76fb      	strb	r3, [r7, #27]
 8004e58:	e0e8      	b.n	800502c <UART_SetConfig+0x2a8>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	76fb      	strb	r3, [r7, #27]
 8004e5e:	e0e5      	b.n	800502c <UART_SetConfig+0x2a8>
 8004e60:	2304      	movs	r3, #4
 8004e62:	76fb      	strb	r3, [r7, #27]
 8004e64:	e0e2      	b.n	800502c <UART_SetConfig+0x2a8>
 8004e66:	2308      	movs	r3, #8
 8004e68:	76fb      	strb	r3, [r7, #27]
 8004e6a:	e0df      	b.n	800502c <UART_SetConfig+0x2a8>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	76fb      	strb	r3, [r7, #27]
 8004e70:	bf00      	nop
 8004e72:	e0db      	b.n	800502c <UART_SetConfig+0x2a8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a85      	ldr	r2, [pc, #532]	; (8005090 <UART_SetConfig+0x30c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d134      	bne.n	8004ee8 <UART_SetConfig+0x164>
 8004e7e:	4b83      	ldr	r3, [pc, #524]	; (800508c <UART_SetConfig+0x308>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f003 030c 	and.w	r3, r3, #12
 8004e88:	2b0c      	cmp	r3, #12
 8004e8a:	d829      	bhi.n	8004ee0 <UART_SetConfig+0x15c>
 8004e8c:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <UART_SetConfig+0x110>)
 8004e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e92:	bf00      	nop
 8004e94:	08004ec9 	.word	0x08004ec9
 8004e98:	08004ee1 	.word	0x08004ee1
 8004e9c:	08004ee1 	.word	0x08004ee1
 8004ea0:	08004ee1 	.word	0x08004ee1
 8004ea4:	08004ed5 	.word	0x08004ed5
 8004ea8:	08004ee1 	.word	0x08004ee1
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004ee1 	.word	0x08004ee1
 8004eb4:	08004ecf 	.word	0x08004ecf
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004ee1 	.word	0x08004ee1
 8004ec4:	08004edb 	.word	0x08004edb
 8004ec8:	2300      	movs	r3, #0
 8004eca:	76fb      	strb	r3, [r7, #27]
 8004ecc:	e0ae      	b.n	800502c <UART_SetConfig+0x2a8>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	76fb      	strb	r3, [r7, #27]
 8004ed2:	e0ab      	b.n	800502c <UART_SetConfig+0x2a8>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	76fb      	strb	r3, [r7, #27]
 8004ed8:	e0a8      	b.n	800502c <UART_SetConfig+0x2a8>
 8004eda:	2308      	movs	r3, #8
 8004edc:	76fb      	strb	r3, [r7, #27]
 8004ede:	e0a5      	b.n	800502c <UART_SetConfig+0x2a8>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	76fb      	strb	r3, [r7, #27]
 8004ee4:	bf00      	nop
 8004ee6:	e0a1      	b.n	800502c <UART_SetConfig+0x2a8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a69      	ldr	r2, [pc, #420]	; (8005094 <UART_SetConfig+0x310>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d120      	bne.n	8004f34 <UART_SetConfig+0x1b0>
 8004ef2:	4b66      	ldr	r3, [pc, #408]	; (800508c <UART_SetConfig+0x308>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d00f      	beq.n	8004f20 <UART_SetConfig+0x19c>
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d802      	bhi.n	8004f0a <UART_SetConfig+0x186>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <UART_SetConfig+0x190>
 8004f08:	e010      	b.n	8004f2c <UART_SetConfig+0x1a8>
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d005      	beq.n	8004f1a <UART_SetConfig+0x196>
 8004f0e:	2b30      	cmp	r3, #48	; 0x30
 8004f10:	d009      	beq.n	8004f26 <UART_SetConfig+0x1a2>
 8004f12:	e00b      	b.n	8004f2c <UART_SetConfig+0x1a8>
 8004f14:	2300      	movs	r3, #0
 8004f16:	76fb      	strb	r3, [r7, #27]
 8004f18:	e088      	b.n	800502c <UART_SetConfig+0x2a8>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	76fb      	strb	r3, [r7, #27]
 8004f1e:	e085      	b.n	800502c <UART_SetConfig+0x2a8>
 8004f20:	2304      	movs	r3, #4
 8004f22:	76fb      	strb	r3, [r7, #27]
 8004f24:	e082      	b.n	800502c <UART_SetConfig+0x2a8>
 8004f26:	2308      	movs	r3, #8
 8004f28:	76fb      	strb	r3, [r7, #27]
 8004f2a:	e07f      	b.n	800502c <UART_SetConfig+0x2a8>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	76fb      	strb	r3, [r7, #27]
 8004f30:	bf00      	nop
 8004f32:	e07b      	b.n	800502c <UART_SetConfig+0x2a8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a57      	ldr	r2, [pc, #348]	; (8005098 <UART_SetConfig+0x314>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d120      	bne.n	8004f80 <UART_SetConfig+0x1fc>
 8004f3e:	4b53      	ldr	r3, [pc, #332]	; (800508c <UART_SetConfig+0x308>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f48:	2b40      	cmp	r3, #64	; 0x40
 8004f4a:	d00f      	beq.n	8004f6c <UART_SetConfig+0x1e8>
 8004f4c:	2b40      	cmp	r3, #64	; 0x40
 8004f4e:	d802      	bhi.n	8004f56 <UART_SetConfig+0x1d2>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <UART_SetConfig+0x1dc>
 8004f54:	e010      	b.n	8004f78 <UART_SetConfig+0x1f4>
 8004f56:	2b80      	cmp	r3, #128	; 0x80
 8004f58:	d005      	beq.n	8004f66 <UART_SetConfig+0x1e2>
 8004f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f5c:	d009      	beq.n	8004f72 <UART_SetConfig+0x1ee>
 8004f5e:	e00b      	b.n	8004f78 <UART_SetConfig+0x1f4>
 8004f60:	2300      	movs	r3, #0
 8004f62:	76fb      	strb	r3, [r7, #27]
 8004f64:	e062      	b.n	800502c <UART_SetConfig+0x2a8>
 8004f66:	2302      	movs	r3, #2
 8004f68:	76fb      	strb	r3, [r7, #27]
 8004f6a:	e05f      	b.n	800502c <UART_SetConfig+0x2a8>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	76fb      	strb	r3, [r7, #27]
 8004f70:	e05c      	b.n	800502c <UART_SetConfig+0x2a8>
 8004f72:	2308      	movs	r3, #8
 8004f74:	76fb      	strb	r3, [r7, #27]
 8004f76:	e059      	b.n	800502c <UART_SetConfig+0x2a8>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	76fb      	strb	r3, [r7, #27]
 8004f7c:	bf00      	nop
 8004f7e:	e055      	b.n	800502c <UART_SetConfig+0x2a8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a45      	ldr	r2, [pc, #276]	; (800509c <UART_SetConfig+0x318>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d124      	bne.n	8004fd4 <UART_SetConfig+0x250>
 8004f8a:	4b40      	ldr	r3, [pc, #256]	; (800508c <UART_SetConfig+0x308>)
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f98:	d012      	beq.n	8004fc0 <UART_SetConfig+0x23c>
 8004f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f9e:	d802      	bhi.n	8004fa6 <UART_SetConfig+0x222>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <UART_SetConfig+0x230>
 8004fa4:	e012      	b.n	8004fcc <UART_SetConfig+0x248>
 8004fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004faa:	d006      	beq.n	8004fba <UART_SetConfig+0x236>
 8004fac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb0:	d009      	beq.n	8004fc6 <UART_SetConfig+0x242>
 8004fb2:	e00b      	b.n	8004fcc <UART_SetConfig+0x248>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	76fb      	strb	r3, [r7, #27]
 8004fb8:	e038      	b.n	800502c <UART_SetConfig+0x2a8>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	76fb      	strb	r3, [r7, #27]
 8004fbe:	e035      	b.n	800502c <UART_SetConfig+0x2a8>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	76fb      	strb	r3, [r7, #27]
 8004fc4:	e032      	b.n	800502c <UART_SetConfig+0x2a8>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	76fb      	strb	r3, [r7, #27]
 8004fca:	e02f      	b.n	800502c <UART_SetConfig+0x2a8>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	76fb      	strb	r3, [r7, #27]
 8004fd0:	bf00      	nop
 8004fd2:	e02b      	b.n	800502c <UART_SetConfig+0x2a8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2a      	ldr	r2, [pc, #168]	; (8005084 <UART_SetConfig+0x300>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d124      	bne.n	8005028 <UART_SetConfig+0x2a4>
 8004fde:	4b2b      	ldr	r3, [pc, #172]	; (800508c <UART_SetConfig+0x308>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fec:	d012      	beq.n	8005014 <UART_SetConfig+0x290>
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff2:	d802      	bhi.n	8004ffa <UART_SetConfig+0x276>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <UART_SetConfig+0x284>
 8004ff8:	e012      	b.n	8005020 <UART_SetConfig+0x29c>
 8004ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffe:	d006      	beq.n	800500e <UART_SetConfig+0x28a>
 8005000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005004:	d009      	beq.n	800501a <UART_SetConfig+0x296>
 8005006:	e00b      	b.n	8005020 <UART_SetConfig+0x29c>
 8005008:	2300      	movs	r3, #0
 800500a:	76fb      	strb	r3, [r7, #27]
 800500c:	e00e      	b.n	800502c <UART_SetConfig+0x2a8>
 800500e:	2302      	movs	r3, #2
 8005010:	76fb      	strb	r3, [r7, #27]
 8005012:	e00b      	b.n	800502c <UART_SetConfig+0x2a8>
 8005014:	2304      	movs	r3, #4
 8005016:	76fb      	strb	r3, [r7, #27]
 8005018:	e008      	b.n	800502c <UART_SetConfig+0x2a8>
 800501a:	2308      	movs	r3, #8
 800501c:	76fb      	strb	r3, [r7, #27]
 800501e:	e005      	b.n	800502c <UART_SetConfig+0x2a8>
 8005020:	2310      	movs	r3, #16
 8005022:	76fb      	strb	r3, [r7, #27]
 8005024:	bf00      	nop
 8005026:	e001      	b.n	800502c <UART_SetConfig+0x2a8>
 8005028:	2310      	movs	r3, #16
 800502a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a14      	ldr	r2, [pc, #80]	; (8005084 <UART_SetConfig+0x300>)
 8005032:	4293      	cmp	r3, r2
 8005034:	f040 80a1 	bne.w	800517a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005038:	7efb      	ldrb	r3, [r7, #27]
 800503a:	2b08      	cmp	r3, #8
 800503c:	d836      	bhi.n	80050ac <UART_SetConfig+0x328>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <UART_SetConfig+0x2c0>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005069 	.word	0x08005069
 8005048:	080050ad 	.word	0x080050ad
 800504c:	08005071 	.word	0x08005071
 8005050:	080050ad 	.word	0x080050ad
 8005054:	08005077 	.word	0x08005077
 8005058:	080050ad 	.word	0x080050ad
 800505c:	080050ad 	.word	0x080050ad
 8005060:	080050ad 	.word	0x080050ad
 8005064:	080050a5 	.word	0x080050a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005068:	f7fe f908 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 800506c:	6178      	str	r0, [r7, #20]
        break;
 800506e:	e022      	b.n	80050b6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <UART_SetConfig+0x31c>)
 8005072:	617b      	str	r3, [r7, #20]
        break;
 8005074:	e01f      	b.n	80050b6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005076:	f7fe f86b 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800507a:	6178      	str	r0, [r7, #20]
        break;
 800507c:	e01b      	b.n	80050b6 <UART_SetConfig+0x332>
 800507e:	bf00      	nop
 8005080:	cfff69f3 	.word	0xcfff69f3
 8005084:	40008000 	.word	0x40008000
 8005088:	40013800 	.word	0x40013800
 800508c:	40021000 	.word	0x40021000
 8005090:	40004400 	.word	0x40004400
 8005094:	40004800 	.word	0x40004800
 8005098:	40004c00 	.word	0x40004c00
 800509c:	40005000 	.word	0x40005000
 80050a0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a8:	617b      	str	r3, [r7, #20]
        break;
 80050aa:	e004      	b.n	80050b6 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	76bb      	strb	r3, [r7, #26]
        break;
 80050b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 811d 	beq.w	80052f8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	4a97      	ldr	r2, [pc, #604]	; (8005320 <UART_SetConfig+0x59c>)
 80050c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050c8:	461a      	mov	r2, r3
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80050d0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	4413      	add	r3, r2
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d305      	bcc.n	80050ee <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d902      	bls.n	80050f4 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	76bb      	strb	r3, [r7, #26]
 80050f2:	e101      	b.n	80052f8 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f04f 0100 	mov.w	r1, #0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	4a87      	ldr	r2, [pc, #540]	; (8005320 <UART_SetConfig+0x59c>)
 8005102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f04f 0400 	mov.w	r4, #0
 800510c:	461a      	mov	r2, r3
 800510e:	4623      	mov	r3, r4
 8005110:	f7fb f984 	bl	800041c <__aeabi_uldivmod>
 8005114:	4603      	mov	r3, r0
 8005116:	460c      	mov	r4, r1
 8005118:	4619      	mov	r1, r3
 800511a:	4622      	mov	r2, r4
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	f04f 0400 	mov.w	r4, #0
 8005124:	0214      	lsls	r4, r2, #8
 8005126:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800512a:	020b      	lsls	r3, r1, #8
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6852      	ldr	r2, [r2, #4]
 8005130:	0852      	lsrs	r2, r2, #1
 8005132:	4611      	mov	r1, r2
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	eb13 0b01 	adds.w	fp, r3, r1
 800513c:	eb44 0c02 	adc.w	ip, r4, r2
 8005140:	4658      	mov	r0, fp
 8005142:	4661      	mov	r1, ip
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f04f 0400 	mov.w	r4, #0
 800514c:	461a      	mov	r2, r3
 800514e:	4623      	mov	r3, r4
 8005150:	f7fb f964 	bl	800041c <__aeabi_uldivmod>
 8005154:	4603      	mov	r3, r0
 8005156:	460c      	mov	r4, r1
 8005158:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005160:	d308      	bcc.n	8005174 <UART_SetConfig+0x3f0>
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005168:	d204      	bcs.n	8005174 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	e0c1      	b.n	80052f8 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	76bb      	strb	r3, [r7, #26]
 8005178:	e0be      	b.n	80052f8 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005182:	d164      	bne.n	800524e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8005184:	7efb      	ldrb	r3, [r7, #27]
 8005186:	2b08      	cmp	r3, #8
 8005188:	d827      	bhi.n	80051da <UART_SetConfig+0x456>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <UART_SetConfig+0x40c>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051b5 	.word	0x080051b5
 8005194:	080051bd 	.word	0x080051bd
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051db 	.word	0x080051db
 80051a0:	080051cb 	.word	0x080051cb
 80051a4:	080051db 	.word	0x080051db
 80051a8:	080051db 	.word	0x080051db
 80051ac:	080051db 	.word	0x080051db
 80051b0:	080051d3 	.word	0x080051d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7fe f862 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 80051b8:	6178      	str	r0, [r7, #20]
        break;
 80051ba:	e013      	b.n	80051e4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051bc:	f7fe f874 	bl	80032a8 <HAL_RCC_GetPCLK2Freq>
 80051c0:	6178      	str	r0, [r7, #20]
        break;
 80051c2:	e00f      	b.n	80051e4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c4:	4b57      	ldr	r3, [pc, #348]	; (8005324 <UART_SetConfig+0x5a0>)
 80051c6:	617b      	str	r3, [r7, #20]
        break;
 80051c8:	e00c      	b.n	80051e4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ca:	f7fd ffc1 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 80051ce:	6178      	str	r0, [r7, #20]
        break;
 80051d0:	e008      	b.n	80051e4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d6:	617b      	str	r3, [r7, #20]
        break;
 80051d8:	e004      	b.n	80051e4 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	76bb      	strb	r3, [r7, #26]
        break;
 80051e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 8086 	beq.w	80052f8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	4a4b      	ldr	r2, [pc, #300]	; (8005320 <UART_SetConfig+0x59c>)
 80051f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f6:	461a      	mov	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80051fe:	005a      	lsls	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	441a      	add	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	b29b      	uxth	r3, r3
 8005212:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d916      	bls.n	8005248 <UART_SetConfig+0x4c4>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005220:	d212      	bcs.n	8005248 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f023 030f 	bic.w	r3, r3, #15
 800522a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	b29b      	uxth	r3, r3
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	b29a      	uxth	r2, r3
 8005238:	89fb      	ldrh	r3, [r7, #14]
 800523a:	4313      	orrs	r3, r2
 800523c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	89fa      	ldrh	r2, [r7, #14]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	e057      	b.n	80052f8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	76bb      	strb	r3, [r7, #26]
 800524c:	e054      	b.n	80052f8 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800524e:	7efb      	ldrb	r3, [r7, #27]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d828      	bhi.n	80052a6 <UART_SetConfig+0x522>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0x4d8>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005281 	.word	0x08005281
 8005260:	08005289 	.word	0x08005289
 8005264:	08005291 	.word	0x08005291
 8005268:	080052a7 	.word	0x080052a7
 800526c:	08005297 	.word	0x08005297
 8005270:	080052a7 	.word	0x080052a7
 8005274:	080052a7 	.word	0x080052a7
 8005278:	080052a7 	.word	0x080052a7
 800527c:	0800529f 	.word	0x0800529f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005280:	f7fd fffc 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8005284:	6178      	str	r0, [r7, #20]
        break;
 8005286:	e013      	b.n	80052b0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005288:	f7fe f80e 	bl	80032a8 <HAL_RCC_GetPCLK2Freq>
 800528c:	6178      	str	r0, [r7, #20]
        break;
 800528e:	e00f      	b.n	80052b0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005290:	4b24      	ldr	r3, [pc, #144]	; (8005324 <UART_SetConfig+0x5a0>)
 8005292:	617b      	str	r3, [r7, #20]
        break;
 8005294:	e00c      	b.n	80052b0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005296:	f7fd ff5b 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800529a:	6178      	str	r0, [r7, #20]
        break;
 800529c:	e008      	b.n	80052b0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a2:	617b      	str	r3, [r7, #20]
        break;
 80052a4:	e004      	b.n	80052b0 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	76bb      	strb	r3, [r7, #26]
        break;
 80052ae:	bf00      	nop
    }

    if (pclk != 0U)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d020      	beq.n	80052f8 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	4a19      	ldr	r2, [pc, #100]	; (8005320 <UART_SetConfig+0x59c>)
 80052bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052c0:	461a      	mov	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	441a      	add	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	b29b      	uxth	r3, r3
 80052da:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	d908      	bls.n	80052f4 <UART_SetConfig+0x570>
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d204      	bcs.n	80052f4 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	e001      	b.n	80052f8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005314:	7ebb      	ldrb	r3, [r7, #26]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005320:	080089a0 	.word	0x080089a0
 8005324:	00f42400 	.word	0x00f42400

08005328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01a      	beq.n	800543e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005426:	d10a      	bne.n	800543e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af02      	add	r7, sp, #8
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800547c:	f7fc fc16 	bl	8001cac <HAL_GetTick>
 8005480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b08      	cmp	r3, #8
 800548e:	d10e      	bne.n	80054ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f82c 	bl	80054fc <UART_WaitOnFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e022      	b.n	80054f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d10e      	bne.n	80054da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f816 	bl	80054fc <UART_WaitOnFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e00c      	b.n	80054f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550c:	e062      	b.n	80055d4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d05e      	beq.n	80055d4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7fc fbc9 	bl	8001cac <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <UART_WaitOnFlagUntilTimeout+0x30>
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d11d      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800553a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e045      	b.n	80055f4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d02e      	beq.n	80055d4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005584:	d126      	bne.n	80055d4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800558e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800559e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e00f      	b.n	80055f4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69da      	ldr	r2, [r3, #28]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4013      	ands	r3, r2
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	bf0c      	ite	eq
 80055e4:	2301      	moveq	r3, #1
 80055e6:	2300      	movne	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d08d      	beq.n	800550e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_UARTEx_DisableFifoMode+0x16>
 800560e:	2302      	movs	r3, #2
 8005610:	e027      	b.n	8005662 <HAL_UARTEx_DisableFifoMode+0x66>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2224      	movs	r2, #36	; 0x24
 800561e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005640:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005682:	2302      	movs	r3, #2
 8005684:	e02d      	b.n	80056e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2224      	movs	r2, #36	; 0x24
 8005692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0201 	bic.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f850 	bl	8005768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056fe:	2302      	movs	r3, #2
 8005700:	e02d      	b.n	800575e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2224      	movs	r2, #36	; 0x24
 800570e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f812 	bl	8005768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b089      	sub	sp, #36	; 0x24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005770:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <UARTEx_SetNbDataToProcess+0xc8>)
 8005772:	f107 0314 	add.w	r3, r7, #20
 8005776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800577a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800577e:	4a2d      	ldr	r2, [pc, #180]	; (8005834 <UARTEx_SetNbDataToProcess+0xcc>)
 8005780:	f107 030c 	add.w	r3, r7, #12
 8005784:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005788:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005790:	2b00      	cmp	r3, #0
 8005792:	d108      	bne.n	80057a6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057a4:	e03d      	b.n	8005822 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057a6:	2308      	movs	r3, #8
 80057a8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057aa:	2308      	movs	r3, #8
 80057ac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	0e5b      	lsrs	r3, r3, #25
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	0f5b      	lsrs	r3, r3, #29
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80057ce:	7fbb      	ldrb	r3, [r7, #30]
 80057d0:	7f3a      	ldrb	r2, [r7, #28]
 80057d2:	f107 0120 	add.w	r1, r7, #32
 80057d6:	440a      	add	r2, r1
 80057d8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	7f3a      	ldrb	r2, [r7, #28]
 80057e2:	f107 0120 	add.w	r1, r7, #32
 80057e6:	440a      	add	r2, r1
 80057e8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80057ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80057f8:	7ffb      	ldrb	r3, [r7, #31]
 80057fa:	7f7a      	ldrb	r2, [r7, #29]
 80057fc:	f107 0120 	add.w	r1, r7, #32
 8005800:	440a      	add	r2, r1
 8005802:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	7f7a      	ldrb	r2, [r7, #29]
 800580c:	f107 0120 	add.w	r1, r7, #32
 8005810:	440a      	add	r2, r1
 8005812:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005816:	fb93 f3f2 	sdiv	r3, r3, r2
 800581a:	b29a      	uxth	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005822:	bf00      	nop
 8005824:	3724      	adds	r7, #36	; 0x24
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	080088a0 	.word	0x080088a0
 8005834:	080088a8 	.word	0x080088a8

08005838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005838:	b084      	sub	sp, #16
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	f107 001c 	add.w	r0, r7, #28
 8005846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	2b01      	cmp	r3, #1
 800584e:	d122      	bne.n	8005896 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587a:	2b01      	cmp	r3, #1
 800587c:	d105      	bne.n	800588a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa30 	bl	8005cf0 <USB_CoreReset>
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
 8005894:	e01a      	b.n	80058cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa24 	bl	8005cf0 <USB_CoreReset>
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
 80058be:	e005      	b.n	80058cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058d8:	b004      	add	sp, #16
 80058da:	4770      	bx	lr

080058dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f023 0201 	bic.w	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d106      	bne.n	800592a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60da      	str	r2, [r3, #12]
 8005928:	e00b      	b.n	8005942 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60da      	str	r2, [r3, #12]
 800593c:	e001      	b.n	8005942 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e003      	b.n	800594a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005942:	2032      	movs	r0, #50	; 0x32
 8005944:	f7fc f9be 	bl	8001cc4 <HAL_Delay>

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005954:	b084      	sub	sp, #16
 8005956:	b580      	push	{r7, lr}
 8005958:	b086      	sub	sp, #24
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	e009      	b.n	8005988 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	3340      	adds	r3, #64	; 0x40
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	2200      	movs	r2, #0
 8005980:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	3301      	adds	r3, #1
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2b0e      	cmp	r3, #14
 800598c:	d9f2      	bls.n	8005974 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800598e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11c      	bne.n	80059ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a2:	f043 0302 	orr.w	r3, r3, #2
 80059a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	e005      	b.n	80059da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059e0:	461a      	mov	r2, r3
 80059e2:	2300      	movs	r3, #0
 80059e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	4619      	mov	r1, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f4:	461a      	mov	r2, r3
 80059f6:	680b      	ldr	r3, [r1, #0]
 80059f8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059fa:	2103      	movs	r1, #3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f93d 	bl	8005c7c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a02:	2110      	movs	r1, #16
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f8f1 	bl	8005bec <USB_FlushTxFifo>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f90f 	bl	8005c38 <USB_FlushRxFifo>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	461a      	mov	r2, r3
 8005a38:	2300      	movs	r3, #0
 8005a3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a42:	461a      	mov	r2, r3
 8005a44:	2300      	movs	r3, #0
 8005a46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	e043      	b.n	8005ad6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a64:	d118      	bne.n	8005a98 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	e013      	b.n	8005aaa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e008      	b.n	8005aaa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	2300      	movs	r3, #0
 8005aba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ace:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	613b      	str	r3, [r7, #16]
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d3b7      	bcc.n	8005a4e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	e043      	b.n	8005b6c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005af6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005afa:	d118      	bne.n	8005b2e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10a      	bne.n	8005b18 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	e013      	b.n	8005b40 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	461a      	mov	r2, r3
 8005b26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	e008      	b.n	8005b40 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d3b7      	bcc.n	8005ae4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f043 0210 	orr.w	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <USB_DevInit+0x294>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f043 0208 	orr.w	r2, r3, #8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d107      	bne.n	8005bd6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bce:	f043 0304 	orr.w	r3, r3, #4
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005be2:	b004      	add	sp, #16
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	803c3800 	.word	0x803c3800

08005bec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	019b      	lsls	r3, r3, #6
 8005bfe:	f043 0220 	orr.w	r2, r3, #32
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <USB_FlushTxFifo+0x48>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d901      	bls.n	8005c18 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e006      	b.n	8005c26 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d0f0      	beq.n	8005c06 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	00030d40 	.word	0x00030d40

08005c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2210      	movs	r2, #16
 8005c48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <USB_FlushRxFifo+0x40>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d901      	bls.n	8005c5c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e006      	b.n	8005c6a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	d0f0      	beq.n	8005c4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	00030d40 	.word	0x00030d40

08005c7c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cc8:	f023 0303 	bic.w	r3, r3, #3
 8005ccc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cdc:	f043 0302 	orr.w	r3, r3, #2
 8005ce0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <USB_CoreReset+0x64>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d901      	bls.n	8005d0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e01b      	b.n	8005d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	daf2      	bge.n	8005cfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f043 0201 	orr.w	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4a09      	ldr	r2, [pc, #36]	; (8005d54 <USB_CoreReset+0x64>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d901      	bls.n	8005d38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e006      	b.n	8005d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d0f0      	beq.n	8005d26 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	00030d40 	.word	0x00030d40

08005d58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005d5c:	bf00      	nop
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d6e:	f3ef 8305 	mrs	r3, IPSR
 8005d72:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10f      	bne.n	8005d9a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d7e:	607b      	str	r3, [r7, #4]
  return(result);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d86:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <osKernelInitialize+0x3a>
 8005d92:	4b0e      	ldr	r3, [pc, #56]	; (8005dcc <osKernelInitialize+0x64>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d103      	bne.n	8005da2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005d9a:	f06f 0305 	mvn.w	r3, #5
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e00c      	b.n	8005dbc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <osKernelInitialize+0x64>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d105      	bne.n	8005db6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005daa:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <osKernelInitialize+0x64>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e002      	b.n	8005dbc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005db6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	2000002c 	.word	0x2000002c

08005dd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dd6:	f3ef 8305 	mrs	r3, IPSR
 8005dda:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10f      	bne.n	8005e02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de2:	f3ef 8310 	mrs	r3, PRIMASK
 8005de6:	607b      	str	r3, [r7, #4]
  return(result);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d105      	bne.n	8005dfa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dee:	f3ef 8311 	mrs	r3, BASEPRI
 8005df2:	603b      	str	r3, [r7, #0]
  return(result);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <osKernelStart+0x3a>
 8005dfa:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <osKernelStart+0x68>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d103      	bne.n	8005e0a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005e02:	f06f 0305 	mvn.w	r3, #5
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e010      	b.n	8005e2c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <osKernelStart+0x68>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d109      	bne.n	8005e26 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e12:	f7ff ffa1 	bl	8005d58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e16:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <osKernelStart+0x68>)
 8005e18:	2202      	movs	r2, #2
 8005e1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e1c:	f001 f870 	bl	8006f00 <vTaskStartScheduler>
      stat = osOK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e002      	b.n	8005e2c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005e26:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	2000002c 	.word	0x2000002c

08005e3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b090      	sub	sp, #64	; 0x40
 8005e40:	af04      	add	r7, sp, #16
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e4c:	f3ef 8305 	mrs	r3, IPSR
 8005e50:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e52:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 808f 	bne.w	8005f78 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d105      	bne.n	8005e72 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e66:	f3ef 8311 	mrs	r3, BASEPRI
 8005e6a:	617b      	str	r3, [r7, #20]
  return(result);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <osThreadNew+0x3e>
 8005e72:	4b44      	ldr	r3, [pc, #272]	; (8005f84 <osThreadNew+0x148>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d07e      	beq.n	8005f78 <osThreadNew+0x13c>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d07b      	beq.n	8005f78 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005e84:	2318      	movs	r3, #24
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d045      	beq.n	8005f24 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <osThreadNew+0x6a>
        name = attr->name;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d008      	beq.n	8005ecc <osThreadNew+0x90>
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	2b38      	cmp	r3, #56	; 0x38
 8005ebe:	d805      	bhi.n	8005ecc <osThreadNew+0x90>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <osThreadNew+0x94>
        return (NULL);
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e054      	b.n	8005f7a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	089b      	lsrs	r3, r3, #2
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00e      	beq.n	8005f06 <osThreadNew+0xca>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	2b5b      	cmp	r3, #91	; 0x5b
 8005eee:	d90a      	bls.n	8005f06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d006      	beq.n	8005f06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <osThreadNew+0xca>
        mem = 1;
 8005f00:	2301      	movs	r3, #1
 8005f02:	623b      	str	r3, [r7, #32]
 8005f04:	e010      	b.n	8005f28 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10c      	bne.n	8005f28 <osThreadNew+0xec>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d108      	bne.n	8005f28 <osThreadNew+0xec>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <osThreadNew+0xec>
          mem = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	e001      	b.n	8005f28 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d110      	bne.n	8005f50 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f36:	9202      	str	r2, [sp, #8]
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fe09 	bl	8006b5c <xTaskCreateStatic>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	e013      	b.n	8005f78 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d110      	bne.n	8005f78 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f107 0310 	add.w	r3, r7, #16
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fe51 	bl	8006c10 <xTaskCreate>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d001      	beq.n	8005f78 <osThreadNew+0x13c>
          hTask = NULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f78:	693b      	ldr	r3, [r7, #16]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3730      	adds	r7, #48	; 0x30
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	2000002c 	.word	0x2000002c

08005f88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f90:	f3ef 8305 	mrs	r3, IPSR
 8005f94:	613b      	str	r3, [r7, #16]
  return(result);
 8005f96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10f      	bne.n	8005fbc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d105      	bne.n	8005fb4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8005fac:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <osDelay+0x3c>
 8005fb4:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <osDelay+0x58>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d103      	bne.n	8005fc4 <osDelay+0x3c>
    stat = osErrorISR;
 8005fbc:	f06f 0305 	mvn.w	r3, #5
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e007      	b.n	8005fd4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 ff62 	bl	8006e98 <vTaskDelay>
    }
  }

  return (stat);
 8005fd4:	697b      	ldr	r3, [r7, #20]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	2000002c 	.word	0x2000002c

08005fe4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a07      	ldr	r2, [pc, #28]	; (8006010 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4a06      	ldr	r2, [pc, #24]	; (8006014 <vApplicationGetIdleTaskMemory+0x30>)
 8005ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2280      	movs	r2, #128	; 0x80
 8006000:	601a      	str	r2, [r3, #0]
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	20000030 	.word	0x20000030
 8006014:	2000008c 	.word	0x2000008c

08006018 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4a07      	ldr	r2, [pc, #28]	; (8006044 <vApplicationGetTimerTaskMemory+0x2c>)
 8006028:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4a06      	ldr	r2, [pc, #24]	; (8006048 <vApplicationGetTimerTaskMemory+0x30>)
 800602e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006036:	601a      	str	r2, [r3, #0]
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	2000028c 	.word	0x2000028c
 8006048:	200002e8 	.word	0x200002e8

0800604c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f103 0208 	add.w	r2, r3, #8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f04f 32ff 	mov.w	r2, #4294967295
 8006064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f103 0208 	add.w	r2, r3, #8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f103 0208 	add.w	r2, r3, #8
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	601a      	str	r2, [r3, #0]
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d103      	bne.n	800610e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	e00c      	b.n	8006128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3308      	adds	r3, #8
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	e002      	b.n	800611c <vListInsert+0x2e>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d2f6      	bcs.n	8006116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6892      	ldr	r2, [r2, #8]
 8006176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6852      	ldr	r2, [r2, #4]
 8006180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	429a      	cmp	r2, r3
 800618a:	d103      	bne.n	8006194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	1e5a      	subs	r2, r3, #1
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	e7fe      	b.n	80061da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80061dc:	f002 f80e 	bl	80081fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	441a      	add	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620c:	3b01      	subs	r3, #1
 800620e:	68f9      	ldr	r1, [r7, #12]
 8006210:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	441a      	add	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	22ff      	movs	r2, #255	; 0xff
 8006220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	22ff      	movs	r2, #255	; 0xff
 8006228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d114      	bne.n	800625c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01a      	beq.n	8006270 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3310      	adds	r3, #16
 800623e:	4618      	mov	r0, r3
 8006240:	f001 f8de 	bl	8007400 <xTaskRemoveFromEventList>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d012      	beq.n	8006270 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800624a:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <xQueueGenericReset+0xcc>)
 800624c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	e009      	b.n	8006270 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3310      	adds	r3, #16
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fef3 	bl	800604c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3324      	adds	r3, #36	; 0x24
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff feee 	bl	800604c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006270:	f001 fff2 	bl	8008258 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006274:	2301      	movs	r3, #1
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	; 0x38
 8006288:	af02      	add	r7, sp, #8
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <xQueueGenericCreateStatic+0x28>
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062aa:	e7fe      	b.n	80062aa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d109      	bne.n	80062c6 <xQueueGenericCreateStatic+0x42>
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
 80062c4:	e7fe      	b.n	80062c4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <xQueueGenericCreateStatic+0x4e>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <xQueueGenericCreateStatic+0x52>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <xQueueGenericCreateStatic+0x54>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <xQueueGenericCreateStatic+0x6c>
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	e7fe      	b.n	80062ee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <xQueueGenericCreateStatic+0x78>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <xQueueGenericCreateStatic+0x7c>
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <xQueueGenericCreateStatic+0x7e>
 8006300:	2300      	movs	r3, #0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <xQueueGenericCreateStatic+0x96>
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	e7fe      	b.n	8006318 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800631a:	2350      	movs	r3, #80	; 0x50
 800631c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b50      	cmp	r3, #80	; 0x50
 8006322:	d009      	beq.n	8006338 <xQueueGenericCreateStatic+0xb4>
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	e7fe      	b.n	8006336 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006338:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00d      	beq.n	8006360 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800634c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	4613      	mov	r3, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f805 	bl	800636a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006362:	4618      	mov	r0, r3
 8006364:	3730      	adds	r7, #48	; 0x30
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
 8006376:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	e002      	b.n	800638c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006398:	2101      	movs	r1, #1
 800639a:	69b8      	ldr	r0, [r7, #24]
 800639c:	f7ff ff0a 	bl	80061b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08e      	sub	sp, #56	; 0x38
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063be:	2300      	movs	r3, #0
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <xQueueGenericSend+0x30>
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063de:	e7fe      	b.n	80063de <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <xQueueGenericSend+0x3e>
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <xQueueGenericSend+0x42>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <xQueueGenericSend+0x44>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d109      	bne.n	800640c <xQueueGenericSend+0x5c>
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
 800640a:	e7fe      	b.n	800640a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d103      	bne.n	800641a <xQueueGenericSend+0x6a>
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <xQueueGenericSend+0x6e>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <xQueueGenericSend+0x70>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d109      	bne.n	8006438 <xQueueGenericSend+0x88>
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	623b      	str	r3, [r7, #32]
 8006436:	e7fe      	b.n	8006436 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006438:	f001 f998 	bl	800776c <xTaskGetSchedulerState>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <xQueueGenericSend+0x98>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <xQueueGenericSend+0x9c>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <xQueueGenericSend+0x9e>
 800644c:	2300      	movs	r3, #0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d109      	bne.n	8006466 <xQueueGenericSend+0xb6>
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	61fb      	str	r3, [r7, #28]
 8006464:	e7fe      	b.n	8006464 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006466:	f001 fec9 	bl	80081fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	429a      	cmp	r2, r3
 8006474:	d302      	bcc.n	800647c <xQueueGenericSend+0xcc>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d129      	bne.n	80064d0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006482:	f000 f9ff 	bl	8006884 <prvCopyDataToQueue>
 8006486:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	d010      	beq.n	80064b2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	3324      	adds	r3, #36	; 0x24
 8006494:	4618      	mov	r0, r3
 8006496:	f000 ffb3 	bl	8007400 <xTaskRemoveFromEventList>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d013      	beq.n	80064c8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064a0:	4b3f      	ldr	r3, [pc, #252]	; (80065a0 <xQueueGenericSend+0x1f0>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	e00a      	b.n	80064c8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064b8:	4b39      	ldr	r3, [pc, #228]	; (80065a0 <xQueueGenericSend+0x1f0>)
 80064ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064c8:	f001 fec6 	bl	8008258 <vPortExitCritical>
				return pdPASS;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e063      	b.n	8006598 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d103      	bne.n	80064de <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064d6:	f001 febf 	bl	8008258 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	e05c      	b.n	8006598 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064e4:	f107 0314 	add.w	r3, r7, #20
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 ffeb 	bl	80074c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ee:	2301      	movs	r3, #1
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064f2:	f001 feb1 	bl	8008258 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064f6:	f000 fd67 	bl	8006fc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064fa:	f001 fe7f 	bl	80081fc <vPortEnterCritical>
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006504:	b25b      	sxtb	r3, r3
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d103      	bne.n	8006514 <xQueueGenericSend+0x164>
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800651a:	b25b      	sxtb	r3, r3
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d103      	bne.n	800652a <xQueueGenericSend+0x17a>
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800652a:	f001 fe95 	bl	8008258 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800652e:	1d3a      	adds	r2, r7, #4
 8006530:	f107 0314 	add.w	r3, r7, #20
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f000 ffda 	bl	80074f0 <xTaskCheckForTimeOut>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d124      	bne.n	800658c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006544:	f000 fa96 	bl	8006a74 <prvIsQueueFull>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d018      	beq.n	8006580 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	3310      	adds	r3, #16
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f000 ff04 	bl	8007364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800655c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800655e:	f000 fa21 	bl	80069a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006562:	f000 fd3f 	bl	8006fe4 <xTaskResumeAll>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	f47f af7c 	bne.w	8006466 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800656e:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <xQueueGenericSend+0x1f0>)
 8006570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	e772      	b.n	8006466 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006582:	f000 fa0f 	bl	80069a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006586:	f000 fd2d 	bl	8006fe4 <xTaskResumeAll>
 800658a:	e76c      	b.n	8006466 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800658c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800658e:	f000 fa09 	bl	80069a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006592:	f000 fd27 	bl	8006fe4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006596:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006598:	4618      	mov	r0, r3
 800659a:	3738      	adds	r7, #56	; 0x38
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	e000ed04 	.word	0xe000ed04

080065a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08e      	sub	sp, #56	; 0x38
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <xQueueGenericSendFromISR+0x2c>
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
 80065ce:	e7fe      	b.n	80065ce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <xQueueGenericSendFromISR+0x3a>
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <xQueueGenericSendFromISR+0x3e>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <xQueueGenericSendFromISR+0x40>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <xQueueGenericSendFromISR+0x58>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	e7fe      	b.n	80065fa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d103      	bne.n	800660a <xQueueGenericSendFromISR+0x66>
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <xQueueGenericSendFromISR+0x6a>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <xQueueGenericSendFromISR+0x6c>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d109      	bne.n	8006628 <xQueueGenericSendFromISR+0x84>
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	e7fe      	b.n	8006626 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006628:	f001 fec4 	bl	80083b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800662c:	f3ef 8211 	mrs	r2, BASEPRI
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	61ba      	str	r2, [r7, #24]
 8006642:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006644:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006650:	429a      	cmp	r2, r3
 8006652:	d302      	bcc.n	800665a <xQueueGenericSendFromISR+0xb6>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d12c      	bne.n	80066b4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800666a:	f000 f90b 	bl	8006884 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800666e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d112      	bne.n	800669e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d016      	beq.n	80066ae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	3324      	adds	r3, #36	; 0x24
 8006684:	4618      	mov	r0, r3
 8006686:	f000 febb 	bl	8007400 <xTaskRemoveFromEventList>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00e      	beq.n	80066ae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e007      	b.n	80066ae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800669e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066a2:	3301      	adds	r3, #1
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	b25a      	sxtb	r2, r3
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80066ae:	2301      	movs	r3, #1
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80066b2:	e001      	b.n	80066b8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3738      	adds	r7, #56	; 0x38
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08c      	sub	sp, #48	; 0x30
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066d8:	2300      	movs	r3, #0
 80066da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <xQueueReceive+0x2e>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	623b      	str	r3, [r7, #32]
 80066f8:	e7fe      	b.n	80066f8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <xQueueReceive+0x3c>
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <xQueueReceive+0x40>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <xQueueReceive+0x42>
 800670c:	2300      	movs	r3, #0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d109      	bne.n	8006726 <xQueueReceive+0x5a>
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	e7fe      	b.n	8006724 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006726:	f001 f821 	bl	800776c <xTaskGetSchedulerState>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d102      	bne.n	8006736 <xQueueReceive+0x6a>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <xQueueReceive+0x6e>
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <xQueueReceive+0x70>
 800673a:	2300      	movs	r3, #0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <xQueueReceive+0x88>
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	e7fe      	b.n	8006752 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006754:	f001 fd52 	bl	80081fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01f      	beq.n	80067a4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006768:	f000 f8f6 	bl	8006958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	1e5a      	subs	r2, r3, #1
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00f      	beq.n	800679c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	3310      	adds	r3, #16
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fe3d 	bl	8007400 <xTaskRemoveFromEventList>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800678c:	4b3c      	ldr	r3, [pc, #240]	; (8006880 <xQueueReceive+0x1b4>)
 800678e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800679c:	f001 fd5c 	bl	8008258 <vPortExitCritical>
				return pdPASS;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e069      	b.n	8006878 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067aa:	f001 fd55 	bl	8008258 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e062      	b.n	8006878 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067b8:	f107 0310 	add.w	r3, r7, #16
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fe81 	bl	80074c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067c2:	2301      	movs	r3, #1
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067c6:	f001 fd47 	bl	8008258 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ca:	f000 fbfd 	bl	8006fc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ce:	f001 fd15 	bl	80081fc <vPortEnterCritical>
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d8:	b25b      	sxtb	r3, r3
 80067da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067de:	d103      	bne.n	80067e8 <xQueueReceive+0x11c>
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ee:	b25b      	sxtb	r3, r3
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d103      	bne.n	80067fe <xQueueReceive+0x132>
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067fe:	f001 fd2b 	bl	8008258 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006802:	1d3a      	adds	r2, r7, #4
 8006804:	f107 0310 	add.w	r3, r7, #16
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fe70 	bl	80074f0 <xTaskCheckForTimeOut>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d123      	bne.n	800685e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006818:	f000 f916 	bl	8006a48 <prvIsQueueEmpty>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d017      	beq.n	8006852 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	3324      	adds	r3, #36	; 0x24
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	4611      	mov	r1, r2
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fd9a 	bl	8007364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006832:	f000 f8b7 	bl	80069a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006836:	f000 fbd5 	bl	8006fe4 <xTaskResumeAll>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d189      	bne.n	8006754 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006840:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <xQueueReceive+0x1b4>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	e780      	b.n	8006754 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006854:	f000 f8a6 	bl	80069a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006858:	f000 fbc4 	bl	8006fe4 <xTaskResumeAll>
 800685c:	e77a      	b.n	8006754 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800685e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006860:	f000 f8a0 	bl	80069a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006864:	f000 fbbe 	bl	8006fe4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800686a:	f000 f8ed 	bl	8006a48 <prvIsQueueEmpty>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	f43f af6f 	beq.w	8006754 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006876:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006878:	4618      	mov	r0, r3
 800687a:	3730      	adds	r7, #48	; 0x30
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10d      	bne.n	80068be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d14d      	bne.n	8006946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 ff7a 	bl	80077a8 <xTaskPriorityDisinherit>
 80068b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	609a      	str	r2, [r3, #8]
 80068bc:	e043      	b.n	8006946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d119      	bne.n	80068f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6858      	ldr	r0, [r3, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	461a      	mov	r2, r3
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	f001 ffa8 	bl	8008824 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	441a      	add	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d32b      	bcc.n	8006946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]
 80068f6:	e026      	b.n	8006946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68d8      	ldr	r0, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	461a      	mov	r2, r3
 8006902:	68b9      	ldr	r1, [r7, #8]
 8006904:	f001 ff8e 	bl	8008824 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	425b      	negs	r3, r3
 8006912:	441a      	add	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d207      	bcs.n	8006934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	425b      	negs	r3, r3
 800692e:	441a      	add	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d105      	bne.n	8006946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	3b01      	subs	r3, #1
 8006944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800694e:	697b      	ldr	r3, [r7, #20]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d018      	beq.n	800699c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	441a      	add	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	429a      	cmp	r2, r3
 8006982:	d303      	bcc.n	800698c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68d9      	ldr	r1, [r3, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	461a      	mov	r2, r3
 8006996:	6838      	ldr	r0, [r7, #0]
 8006998:	f001 ff44 	bl	8008824 <memcpy>
	}
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069ac:	f001 fc26 	bl	80081fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069b8:	e011      	b.n	80069de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d012      	beq.n	80069e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3324      	adds	r3, #36	; 0x24
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fd1a 	bl	8007400 <xTaskRemoveFromEventList>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069d2:	f000 fded 	bl	80075b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	3b01      	subs	r3, #1
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dce9      	bgt.n	80069ba <prvUnlockQueue+0x16>
 80069e6:	e000      	b.n	80069ea <prvUnlockQueue+0x46>
					break;
 80069e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	22ff      	movs	r2, #255	; 0xff
 80069ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069f2:	f001 fc31 	bl	8008258 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069f6:	f001 fc01 	bl	80081fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a02:	e011      	b.n	8006a28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d012      	beq.n	8006a32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3310      	adds	r3, #16
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fcf5 	bl	8007400 <xTaskRemoveFromEventList>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a1c:	f000 fdc8 	bl	80075b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dce9      	bgt.n	8006a04 <prvUnlockQueue+0x60>
 8006a30:	e000      	b.n	8006a34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	22ff      	movs	r2, #255	; 0xff
 8006a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a3c:	f001 fc0c 	bl	8008258 <vPortExitCritical>
}
 8006a40:	bf00      	nop
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a50:	f001 fbd4 	bl	80081fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e001      	b.n	8006a66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a66:	f001 fbf7 	bl	8008258 <vPortExitCritical>

	return xReturn;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a7c:	f001 fbbe 	bl	80081fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d102      	bne.n	8006a92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e001      	b.n	8006a96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a96:	f001 fbdf 	bl	8008258 <vPortExitCritical>

	return xReturn;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	e014      	b.n	8006ade <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ab4:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <vQueueAddToRegistry+0x4c>)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10b      	bne.n	8006ad8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ac0:	490b      	ldr	r1, [pc, #44]	; (8006af0 <vQueueAddToRegistry+0x4c>)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aca:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <vQueueAddToRegistry+0x4c>)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ad6:	e005      	b.n	8006ae4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b07      	cmp	r3, #7
 8006ae2:	d9e7      	bls.n	8006ab4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	20001f8c 	.word	0x20001f8c

08006af4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b04:	f001 fb7a 	bl	80081fc <vPortEnterCritical>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b0e:	b25b      	sxtb	r3, r3
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b14:	d103      	bne.n	8006b1e <vQueueWaitForMessageRestricted+0x2a>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b24:	b25b      	sxtb	r3, r3
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d103      	bne.n	8006b34 <vQueueWaitForMessageRestricted+0x40>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b34:	f001 fb90 	bl	8008258 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	3324      	adds	r3, #36	; 0x24
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fc2f 	bl	80073ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b4e:	6978      	ldr	r0, [r7, #20]
 8006b50:	f7ff ff28 	bl	80069a4 <prvUnlockQueue>
	}
 8006b54:	bf00      	nop
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08e      	sub	sp, #56	; 0x38
 8006b60:	af04      	add	r7, sp, #16
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <xTaskCreateStatic+0x28>
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	623b      	str	r3, [r7, #32]
 8006b82:	e7fe      	b.n	8006b82 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <xTaskCreateStatic+0x42>
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	e7fe      	b.n	8006b9c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b9e:	235c      	movs	r3, #92	; 0x5c
 8006ba0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b5c      	cmp	r3, #92	; 0x5c
 8006ba6:	d009      	beq.n	8006bbc <xTaskCreateStatic+0x60>
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e7fe      	b.n	8006bba <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01e      	beq.n	8006c02 <xTaskCreateStatic+0xa6>
 8006bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d01b      	beq.n	8006c02 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9303      	str	r3, [sp, #12]
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	9302      	str	r3, [sp, #8]
 8006be4:	f107 0314 	add.w	r3, r7, #20
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f850 	bl	8006c9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bfc:	f000 f8dc 	bl	8006db8 <prvAddNewTaskToReadyList>
 8006c00:	e001      	b.n	8006c06 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c06:	697b      	ldr	r3, [r7, #20]
	}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3728      	adds	r7, #40	; 0x28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08c      	sub	sp, #48	; 0x30
 8006c14:	af04      	add	r7, sp, #16
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 fc03 	bl	8008430 <pvPortMalloc>
 8006c2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00e      	beq.n	8006c50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c32:	205c      	movs	r0, #92	; 0x5c
 8006c34:	f001 fbfc 	bl	8008430 <pvPortMalloc>
 8006c38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	631a      	str	r2, [r3, #48]	; 0x30
 8006c46:	e005      	b.n	8006c54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c48:	6978      	ldr	r0, [r7, #20]
 8006c4a:	f001 fcb3 	bl	80085b4 <vPortFree>
 8006c4e:	e001      	b.n	8006c54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c50:	2300      	movs	r3, #0
 8006c52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d017      	beq.n	8006c8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c62:	88fa      	ldrh	r2, [r7, #6]
 8006c64:	2300      	movs	r3, #0
 8006c66:	9303      	str	r3, [sp, #12]
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	9302      	str	r3, [sp, #8]
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f80e 	bl	8006c9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c7e:	69f8      	ldr	r0, [r7, #28]
 8006c80:	f000 f89a 	bl	8006db8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c84:	2301      	movs	r3, #1
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	e002      	b.n	8006c90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c90:	69bb      	ldr	r3, [r7, #24]
	}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b088      	sub	sp, #32
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	21a5      	movs	r1, #165	; 0xa5
 8006cb4:	f001 fdc1 	bl	800883a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	f023 0307 	bic.w	r3, r3, #7
 8006cd0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d009      	beq.n	8006cf0 <prvInitialiseNewTask+0x56>
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e7fe      	b.n	8006cee <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d01f      	beq.n	8006d36 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	e012      	b.n	8006d22 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	7819      	ldrb	r1, [r3, #0]
 8006d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4413      	add	r3, r2
 8006d0a:	3334      	adds	r3, #52	; 0x34
 8006d0c:	460a      	mov	r2, r1
 8006d0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4413      	add	r3, r2
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d006      	beq.n	8006d2a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	2b0f      	cmp	r3, #15
 8006d26:	d9e9      	bls.n	8006cfc <prvInitialiseNewTask+0x62>
 8006d28:	e000      	b.n	8006d2c <prvInitialiseNewTask+0x92>
			{
				break;
 8006d2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d34:	e003      	b.n	8006d3e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	2b37      	cmp	r3, #55	; 0x37
 8006d42:	d901      	bls.n	8006d48 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d44:	2337      	movs	r3, #55	; 0x37
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	2200      	movs	r2, #0
 8006d58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff f994 	bl	800608c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	3318      	adds	r3, #24
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff f98f 	bl	800608c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	2200      	movs	r2, #0
 8006d88:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	68f9      	ldr	r1, [r7, #12]
 8006d96:	69b8      	ldr	r0, [r7, #24]
 8006d98:	f001 f90c 	bl	8007fb4 <pxPortInitialiseStack>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dae:	bf00      	nop
 8006db0:	3720      	adds	r7, #32
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006dc0:	f001 fa1c 	bl	80081fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dc4:	4b2d      	ldr	r3, [pc, #180]	; (8006e7c <prvAddNewTaskToReadyList+0xc4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	4a2c      	ldr	r2, [pc, #176]	; (8006e7c <prvAddNewTaskToReadyList+0xc4>)
 8006dcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dce:	4b2c      	ldr	r3, [pc, #176]	; (8006e80 <prvAddNewTaskToReadyList+0xc8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d109      	bne.n	8006dea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dd6:	4a2a      	ldr	r2, [pc, #168]	; (8006e80 <prvAddNewTaskToReadyList+0xc8>)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ddc:	4b27      	ldr	r3, [pc, #156]	; (8006e7c <prvAddNewTaskToReadyList+0xc4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d110      	bne.n	8006e06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006de4:	f000 fc08 	bl	80075f8 <prvInitialiseTaskLists>
 8006de8:	e00d      	b.n	8006e06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dea:	4b26      	ldr	r3, [pc, #152]	; (8006e84 <prvAddNewTaskToReadyList+0xcc>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006df2:	4b23      	ldr	r3, [pc, #140]	; (8006e80 <prvAddNewTaskToReadyList+0xc8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d802      	bhi.n	8006e06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e00:	4a1f      	ldr	r2, [pc, #124]	; (8006e80 <prvAddNewTaskToReadyList+0xc8>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e06:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <prvAddNewTaskToReadyList+0xd0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	4a1e      	ldr	r2, [pc, #120]	; (8006e88 <prvAddNewTaskToReadyList+0xd0>)
 8006e0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e10:	4b1d      	ldr	r3, [pc, #116]	; (8006e88 <prvAddNewTaskToReadyList+0xd0>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1c:	4b1b      	ldr	r3, [pc, #108]	; (8006e8c <prvAddNewTaskToReadyList+0xd4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d903      	bls.n	8006e2c <prvAddNewTaskToReadyList+0x74>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	4a18      	ldr	r2, [pc, #96]	; (8006e8c <prvAddNewTaskToReadyList+0xd4>)
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <prvAddNewTaskToReadyList+0xd8>)
 8006e3a:	441a      	add	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	4619      	mov	r1, r3
 8006e42:	4610      	mov	r0, r2
 8006e44:	f7ff f92f 	bl	80060a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e48:	f001 fa06 	bl	8008258 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e4c:	4b0d      	ldr	r3, [pc, #52]	; (8006e84 <prvAddNewTaskToReadyList+0xcc>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00e      	beq.n	8006e72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e54:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <prvAddNewTaskToReadyList+0xc8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d207      	bcs.n	8006e72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e62:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <prvAddNewTaskToReadyList+0xdc>)
 8006e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e72:	bf00      	nop
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000bbc 	.word	0x20000bbc
 8006e80:	200006e8 	.word	0x200006e8
 8006e84:	20000bc8 	.word	0x20000bc8
 8006e88:	20000bd8 	.word	0x20000bd8
 8006e8c:	20000bc4 	.word	0x20000bc4
 8006e90:	200006ec 	.word	0x200006ec
 8006e94:	e000ed04 	.word	0xe000ed04

08006e98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006eaa:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <vTaskDelay+0x60>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d009      	beq.n	8006ec6 <vTaskDelay+0x2e>
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	60bb      	str	r3, [r7, #8]
 8006ec4:	e7fe      	b.n	8006ec4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006ec6:	f000 f87f 	bl	8006fc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006eca:	2100      	movs	r1, #0
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fcd7 	bl	8007880 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ed2:	f000 f887 	bl	8006fe4 <xTaskResumeAll>
 8006ed6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d107      	bne.n	8006eee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006ede:	4b07      	ldr	r3, [pc, #28]	; (8006efc <vTaskDelay+0x64>)
 8006ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000be4 	.word	0x20000be4
 8006efc:	e000ed04 	.word	0xe000ed04

08006f00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	; 0x28
 8006f04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f0e:	463a      	mov	r2, r7
 8006f10:	1d39      	adds	r1, r7, #4
 8006f12:	f107 0308 	add.w	r3, r7, #8
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff f864 	bl	8005fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	9202      	str	r2, [sp, #8]
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	2300      	movs	r3, #0
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	460a      	mov	r2, r1
 8006f2e:	4920      	ldr	r1, [pc, #128]	; (8006fb0 <vTaskStartScheduler+0xb0>)
 8006f30:	4820      	ldr	r0, [pc, #128]	; (8006fb4 <vTaskStartScheduler+0xb4>)
 8006f32:	f7ff fe13 	bl	8006b5c <xTaskCreateStatic>
 8006f36:	4602      	mov	r2, r0
 8006f38:	4b1f      	ldr	r3, [pc, #124]	; (8006fb8 <vTaskStartScheduler+0xb8>)
 8006f3a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f3c:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <vTaskStartScheduler+0xb8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f44:	2301      	movs	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e001      	b.n	8006f4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d102      	bne.n	8006f5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f54:	f000 fce8 	bl	8007928 <xTimerCreateTimerTask>
 8006f58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d115      	bne.n	8006f8c <vTaskStartScheduler+0x8c>
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f72:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <vTaskStartScheduler+0xbc>)
 8006f74:	f04f 32ff 	mov.w	r2, #4294967295
 8006f78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f7a:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <vTaskStartScheduler+0xc0>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f80:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <vTaskStartScheduler+0xc4>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f86:	f001 f89b 	bl	80080c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f8a:	e00d      	b.n	8006fa8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d109      	bne.n	8006fa8 <vTaskStartScheduler+0xa8>
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	e7fe      	b.n	8006fa6 <vTaskStartScheduler+0xa6>
}
 8006fa8:	bf00      	nop
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	080088b0 	.word	0x080088b0
 8006fb4:	080075c9 	.word	0x080075c9
 8006fb8:	20000be0 	.word	0x20000be0
 8006fbc:	20000bdc 	.word	0x20000bdc
 8006fc0:	20000bc8 	.word	0x20000bc8
 8006fc4:	20000bc0 	.word	0x20000bc0

08006fc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006fcc:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <vTaskSuspendAll+0x18>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	4a03      	ldr	r2, [pc, #12]	; (8006fe0 <vTaskSuspendAll+0x18>)
 8006fd4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006fd6:	bf00      	nop
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	20000be4 	.word	0x20000be4

08006fe4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ff2:	4b41      	ldr	r3, [pc, #260]	; (80070f8 <xTaskResumeAll+0x114>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d109      	bne.n	800700e <xTaskResumeAll+0x2a>
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	e7fe      	b.n	800700c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800700e:	f001 f8f5 	bl	80081fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007012:	4b39      	ldr	r3, [pc, #228]	; (80070f8 <xTaskResumeAll+0x114>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3b01      	subs	r3, #1
 8007018:	4a37      	ldr	r2, [pc, #220]	; (80070f8 <xTaskResumeAll+0x114>)
 800701a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800701c:	4b36      	ldr	r3, [pc, #216]	; (80070f8 <xTaskResumeAll+0x114>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d162      	bne.n	80070ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007024:	4b35      	ldr	r3, [pc, #212]	; (80070fc <xTaskResumeAll+0x118>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d05e      	beq.n	80070ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800702c:	e02f      	b.n	800708e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800702e:	4b34      	ldr	r3, [pc, #208]	; (8007100 <xTaskResumeAll+0x11c>)
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3318      	adds	r3, #24
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff f890 	bl	8006160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3304      	adds	r3, #4
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff f88b 	bl	8006160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704e:	4b2d      	ldr	r3, [pc, #180]	; (8007104 <xTaskResumeAll+0x120>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d903      	bls.n	800705e <xTaskResumeAll+0x7a>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	4a2a      	ldr	r2, [pc, #168]	; (8007104 <xTaskResumeAll+0x120>)
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4a27      	ldr	r2, [pc, #156]	; (8007108 <xTaskResumeAll+0x124>)
 800706c:	441a      	add	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3304      	adds	r3, #4
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f7ff f816 	bl	80060a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707e:	4b23      	ldr	r3, [pc, #140]	; (800710c <xTaskResumeAll+0x128>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	429a      	cmp	r2, r3
 8007086:	d302      	bcc.n	800708e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007088:	4b21      	ldr	r3, [pc, #132]	; (8007110 <xTaskResumeAll+0x12c>)
 800708a:	2201      	movs	r2, #1
 800708c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800708e:	4b1c      	ldr	r3, [pc, #112]	; (8007100 <xTaskResumeAll+0x11c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1cb      	bne.n	800702e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800709c:	f000 fb46 	bl	800772c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80070a0:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <xTaskResumeAll+0x130>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d010      	beq.n	80070ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070ac:	f000 f846 	bl	800713c <xTaskIncrementTick>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80070b6:	4b16      	ldr	r3, [pc, #88]	; (8007110 <xTaskResumeAll+0x12c>)
 80070b8:	2201      	movs	r2, #1
 80070ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3b01      	subs	r3, #1
 80070c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1f1      	bne.n	80070ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80070c8:	4b12      	ldr	r3, [pc, #72]	; (8007114 <xTaskResumeAll+0x130>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070ce:	4b10      	ldr	r3, [pc, #64]	; (8007110 <xTaskResumeAll+0x12c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070d6:	2301      	movs	r3, #1
 80070d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070da:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <xTaskResumeAll+0x134>)
 80070dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070ea:	f001 f8b5 	bl	8008258 <vPortExitCritical>

	return xAlreadyYielded;
 80070ee:	68bb      	ldr	r3, [r7, #8]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20000be4 	.word	0x20000be4
 80070fc:	20000bbc 	.word	0x20000bbc
 8007100:	20000b7c 	.word	0x20000b7c
 8007104:	20000bc4 	.word	0x20000bc4
 8007108:	200006ec 	.word	0x200006ec
 800710c:	200006e8 	.word	0x200006e8
 8007110:	20000bd0 	.word	0x20000bd0
 8007114:	20000bcc 	.word	0x20000bcc
 8007118:	e000ed04 	.word	0xe000ed04

0800711c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007122:	4b05      	ldr	r3, [pc, #20]	; (8007138 <xTaskGetTickCount+0x1c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007128:	687b      	ldr	r3, [r7, #4]
}
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20000bc0 	.word	0x20000bc0

0800713c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007146:	4b4e      	ldr	r3, [pc, #312]	; (8007280 <xTaskIncrementTick+0x144>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f040 8088 	bne.w	8007260 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007150:	4b4c      	ldr	r3, [pc, #304]	; (8007284 <xTaskIncrementTick+0x148>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3301      	adds	r3, #1
 8007156:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007158:	4a4a      	ldr	r2, [pc, #296]	; (8007284 <xTaskIncrementTick+0x148>)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d11f      	bne.n	80071a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007164:	4b48      	ldr	r3, [pc, #288]	; (8007288 <xTaskIncrementTick+0x14c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <xTaskIncrementTick+0x46>
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	e7fe      	b.n	8007180 <xTaskIncrementTick+0x44>
 8007182:	4b41      	ldr	r3, [pc, #260]	; (8007288 <xTaskIncrementTick+0x14c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	4b40      	ldr	r3, [pc, #256]	; (800728c <xTaskIncrementTick+0x150>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a3e      	ldr	r2, [pc, #248]	; (8007288 <xTaskIncrementTick+0x14c>)
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	4a3e      	ldr	r2, [pc, #248]	; (800728c <xTaskIncrementTick+0x150>)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	4b3e      	ldr	r3, [pc, #248]	; (8007290 <xTaskIncrementTick+0x154>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3301      	adds	r3, #1
 800719c:	4a3c      	ldr	r2, [pc, #240]	; (8007290 <xTaskIncrementTick+0x154>)
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	f000 fac4 	bl	800772c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071a4:	4b3b      	ldr	r3, [pc, #236]	; (8007294 <xTaskIncrementTick+0x158>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d349      	bcc.n	8007242 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ae:	4b36      	ldr	r3, [pc, #216]	; (8007288 <xTaskIncrementTick+0x14c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d104      	bne.n	80071c2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071b8:	4b36      	ldr	r3, [pc, #216]	; (8007294 <xTaskIncrementTick+0x158>)
 80071ba:	f04f 32ff 	mov.w	r2, #4294967295
 80071be:	601a      	str	r2, [r3, #0]
					break;
 80071c0:	e03f      	b.n	8007242 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c2:	4b31      	ldr	r3, [pc, #196]	; (8007288 <xTaskIncrementTick+0x14c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d203      	bcs.n	80071e2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071da:	4a2e      	ldr	r2, [pc, #184]	; (8007294 <xTaskIncrementTick+0x158>)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071e0:	e02f      	b.n	8007242 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe ffba 	bl	8006160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3318      	adds	r3, #24
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe ffb1 	bl	8006160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007202:	4b25      	ldr	r3, [pc, #148]	; (8007298 <xTaskIncrementTick+0x15c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d903      	bls.n	8007212 <xTaskIncrementTick+0xd6>
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720e:	4a22      	ldr	r2, [pc, #136]	; (8007298 <xTaskIncrementTick+0x15c>)
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4a1f      	ldr	r2, [pc, #124]	; (800729c <xTaskIncrementTick+0x160>)
 8007220:	441a      	add	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7fe ff3c 	bl	80060a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007232:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <xTaskIncrementTick+0x164>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	429a      	cmp	r2, r3
 800723a:	d3b8      	bcc.n	80071ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800723c:	2301      	movs	r3, #1
 800723e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007240:	e7b5      	b.n	80071ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007242:	4b17      	ldr	r3, [pc, #92]	; (80072a0 <xTaskIncrementTick+0x164>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007248:	4914      	ldr	r1, [pc, #80]	; (800729c <xTaskIncrementTick+0x160>)
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	440b      	add	r3, r1
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d907      	bls.n	800726a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800725a:	2301      	movs	r3, #1
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e004      	b.n	800726a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007260:	4b10      	ldr	r3, [pc, #64]	; (80072a4 <xTaskIncrementTick+0x168>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	4a0f      	ldr	r2, [pc, #60]	; (80072a4 <xTaskIncrementTick+0x168>)
 8007268:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800726a:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <xTaskIncrementTick+0x16c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007272:	2301      	movs	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007276:	697b      	ldr	r3, [r7, #20]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20000be4 	.word	0x20000be4
 8007284:	20000bc0 	.word	0x20000bc0
 8007288:	20000b74 	.word	0x20000b74
 800728c:	20000b78 	.word	0x20000b78
 8007290:	20000bd4 	.word	0x20000bd4
 8007294:	20000bdc 	.word	0x20000bdc
 8007298:	20000bc4 	.word	0x20000bc4
 800729c:	200006ec 	.word	0x200006ec
 80072a0:	200006e8 	.word	0x200006e8
 80072a4:	20000bcc 	.word	0x20000bcc
 80072a8:	20000bd0 	.word	0x20000bd0

080072ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072b2:	4b27      	ldr	r3, [pc, #156]	; (8007350 <vTaskSwitchContext+0xa4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072ba:	4b26      	ldr	r3, [pc, #152]	; (8007354 <vTaskSwitchContext+0xa8>)
 80072bc:	2201      	movs	r2, #1
 80072be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072c0:	e040      	b.n	8007344 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80072c2:	4b24      	ldr	r3, [pc, #144]	; (8007354 <vTaskSwitchContext+0xa8>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c8:	4b23      	ldr	r3, [pc, #140]	; (8007358 <vTaskSwitchContext+0xac>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	e00f      	b.n	80072f0 <vTaskSwitchContext+0x44>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <vTaskSwitchContext+0x3e>
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	607b      	str	r3, [r7, #4]
 80072e8:	e7fe      	b.n	80072e8 <vTaskSwitchContext+0x3c>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	491a      	ldr	r1, [pc, #104]	; (800735c <vTaskSwitchContext+0xb0>)
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0e5      	beq.n	80072d0 <vTaskSwitchContext+0x24>
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4a13      	ldr	r2, [pc, #76]	; (800735c <vTaskSwitchContext+0xb0>)
 8007310:	4413      	add	r3, r2
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3308      	adds	r3, #8
 8007326:	429a      	cmp	r2, r3
 8007328:	d104      	bne.n	8007334 <vTaskSwitchContext+0x88>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	605a      	str	r2, [r3, #4]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	4a09      	ldr	r2, [pc, #36]	; (8007360 <vTaskSwitchContext+0xb4>)
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	4a06      	ldr	r2, [pc, #24]	; (8007358 <vTaskSwitchContext+0xac>)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6013      	str	r3, [r2, #0]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20000be4 	.word	0x20000be4
 8007354:	20000bd0 	.word	0x20000bd0
 8007358:	20000bc4 	.word	0x20000bc4
 800735c:	200006ec 	.word	0x200006ec
 8007360:	200006e8 	.word	0x200006e8

08007364 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d109      	bne.n	8007388 <vTaskPlaceOnEventList+0x24>
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e7fe      	b.n	8007386 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <vTaskPlaceOnEventList+0x44>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3318      	adds	r3, #24
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7fe feac 	bl	80060ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007396:	2101      	movs	r1, #1
 8007398:	6838      	ldr	r0, [r7, #0]
 800739a:	f000 fa71 	bl	8007880 <prvAddCurrentTaskToDelayedList>
}
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	200006e8 	.word	0x200006e8

080073ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d109      	bne.n	80073d2 <vTaskPlaceOnEventListRestricted+0x26>
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	e7fe      	b.n	80073d0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073d2:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <vTaskPlaceOnEventListRestricted+0x50>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3318      	adds	r3, #24
 80073d8:	4619      	mov	r1, r3
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7fe fe63 	bl	80060a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	68b8      	ldr	r0, [r7, #8]
 80073f0:	f000 fa46 	bl	8007880 <prvAddCurrentTaskToDelayedList>
	}
 80073f4:	bf00      	nop
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	200006e8 	.word	0x200006e8

08007400 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d109      	bne.n	800742a <xTaskRemoveFromEventList+0x2a>
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e7fe      	b.n	8007428 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	3318      	adds	r3, #24
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fe96 	bl	8006160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007434:	4b1d      	ldr	r3, [pc, #116]	; (80074ac <xTaskRemoveFromEventList+0xac>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d11d      	bne.n	8007478 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	3304      	adds	r3, #4
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe fe8d 	bl	8006160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744a:	4b19      	ldr	r3, [pc, #100]	; (80074b0 <xTaskRemoveFromEventList+0xb0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	429a      	cmp	r2, r3
 8007450:	d903      	bls.n	800745a <xTaskRemoveFromEventList+0x5a>
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	4a16      	ldr	r2, [pc, #88]	; (80074b0 <xTaskRemoveFromEventList+0xb0>)
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4a13      	ldr	r2, [pc, #76]	; (80074b4 <xTaskRemoveFromEventList+0xb4>)
 8007468:	441a      	add	r2, r3
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	3304      	adds	r3, #4
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f7fe fe18 	bl	80060a6 <vListInsertEnd>
 8007476:	e005      	b.n	8007484 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	3318      	adds	r3, #24
 800747c:	4619      	mov	r1, r3
 800747e:	480e      	ldr	r0, [pc, #56]	; (80074b8 <xTaskRemoveFromEventList+0xb8>)
 8007480:	f7fe fe11 	bl	80060a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <xTaskRemoveFromEventList+0xbc>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	429a      	cmp	r2, r3
 8007490:	d905      	bls.n	800749e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007492:	2301      	movs	r3, #1
 8007494:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007496:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <xTaskRemoveFromEventList+0xc0>)
 8007498:	2201      	movs	r2, #1
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	e001      	b.n	80074a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074a2:	697b      	ldr	r3, [r7, #20]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20000be4 	.word	0x20000be4
 80074b0:	20000bc4 	.word	0x20000bc4
 80074b4:	200006ec 	.word	0x200006ec
 80074b8:	20000b7c 	.word	0x20000b7c
 80074bc:	200006e8 	.word	0x200006e8
 80074c0:	20000bd0 	.word	0x20000bd0

080074c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <vTaskInternalSetTimeOutState+0x24>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074d4:	4b05      	ldr	r3, [pc, #20]	; (80074ec <vTaskInternalSetTimeOutState+0x28>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	605a      	str	r2, [r3, #4]
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	20000bd4 	.word	0x20000bd4
 80074ec:	20000bc0 	.word	0x20000bc0

080074f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d109      	bne.n	8007514 <xTaskCheckForTimeOut+0x24>
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	e7fe      	b.n	8007512 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d109      	bne.n	800752e <xTaskCheckForTimeOut+0x3e>
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	e7fe      	b.n	800752c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800752e:	f000 fe65 	bl	80081fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007532:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <xTaskCheckForTimeOut+0xb8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754a:	d102      	bne.n	8007552 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	e023      	b.n	800759a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4b15      	ldr	r3, [pc, #84]	; (80075ac <xTaskCheckForTimeOut+0xbc>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	429a      	cmp	r2, r3
 800755c:	d007      	beq.n	800756e <xTaskCheckForTimeOut+0x7e>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	429a      	cmp	r2, r3
 8007566:	d302      	bcc.n	800756e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007568:	2301      	movs	r3, #1
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	e015      	b.n	800759a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	429a      	cmp	r2, r3
 8007576:	d20b      	bcs.n	8007590 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff ff9d 	bl	80074c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	e004      	b.n	800759a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007596:	2301      	movs	r3, #1
 8007598:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800759a:	f000 fe5d 	bl	8008258 <vPortExitCritical>

	return xReturn;
 800759e:	69fb      	ldr	r3, [r7, #28]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000bc0 	.word	0x20000bc0
 80075ac:	20000bd4 	.word	0x20000bd4

080075b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075b4:	4b03      	ldr	r3, [pc, #12]	; (80075c4 <vTaskMissedYield+0x14>)
 80075b6:	2201      	movs	r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
}
 80075ba:	bf00      	nop
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	20000bd0 	.word	0x20000bd0

080075c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075d0:	f000 f852 	bl	8007678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075d4:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <prvIdleTask+0x28>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d9f9      	bls.n	80075d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <prvIdleTask+0x2c>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075ec:	e7f0      	b.n	80075d0 <prvIdleTask+0x8>
 80075ee:	bf00      	nop
 80075f0:	200006ec 	.word	0x200006ec
 80075f4:	e000ed04 	.word	0xe000ed04

080075f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]
 8007602:	e00c      	b.n	800761e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4a12      	ldr	r2, [pc, #72]	; (8007658 <prvInitialiseTaskLists+0x60>)
 8007610:	4413      	add	r3, r2
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fd1a 	bl	800604c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3301      	adds	r3, #1
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b37      	cmp	r3, #55	; 0x37
 8007622:	d9ef      	bls.n	8007604 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007624:	480d      	ldr	r0, [pc, #52]	; (800765c <prvInitialiseTaskLists+0x64>)
 8007626:	f7fe fd11 	bl	800604c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800762a:	480d      	ldr	r0, [pc, #52]	; (8007660 <prvInitialiseTaskLists+0x68>)
 800762c:	f7fe fd0e 	bl	800604c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007630:	480c      	ldr	r0, [pc, #48]	; (8007664 <prvInitialiseTaskLists+0x6c>)
 8007632:	f7fe fd0b 	bl	800604c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007636:	480c      	ldr	r0, [pc, #48]	; (8007668 <prvInitialiseTaskLists+0x70>)
 8007638:	f7fe fd08 	bl	800604c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800763c:	480b      	ldr	r0, [pc, #44]	; (800766c <prvInitialiseTaskLists+0x74>)
 800763e:	f7fe fd05 	bl	800604c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007642:	4b0b      	ldr	r3, [pc, #44]	; (8007670 <prvInitialiseTaskLists+0x78>)
 8007644:	4a05      	ldr	r2, [pc, #20]	; (800765c <prvInitialiseTaskLists+0x64>)
 8007646:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <prvInitialiseTaskLists+0x7c>)
 800764a:	4a05      	ldr	r2, [pc, #20]	; (8007660 <prvInitialiseTaskLists+0x68>)
 800764c:	601a      	str	r2, [r3, #0]
}
 800764e:	bf00      	nop
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200006ec 	.word	0x200006ec
 800765c:	20000b4c 	.word	0x20000b4c
 8007660:	20000b60 	.word	0x20000b60
 8007664:	20000b7c 	.word	0x20000b7c
 8007668:	20000b90 	.word	0x20000b90
 800766c:	20000ba8 	.word	0x20000ba8
 8007670:	20000b74 	.word	0x20000b74
 8007674:	20000b78 	.word	0x20000b78

08007678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800767e:	e019      	b.n	80076b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007680:	f000 fdbc 	bl	80081fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007684:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <prvCheckTasksWaitingTermination+0x4c>)
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3304      	adds	r3, #4
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe fd65 	bl	8006160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007696:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <prvCheckTasksWaitingTermination+0x50>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3b01      	subs	r3, #1
 800769c:	4a0a      	ldr	r2, [pc, #40]	; (80076c8 <prvCheckTasksWaitingTermination+0x50>)
 800769e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <prvCheckTasksWaitingTermination+0x54>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	4a09      	ldr	r2, [pc, #36]	; (80076cc <prvCheckTasksWaitingTermination+0x54>)
 80076a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076aa:	f000 fdd5 	bl	8008258 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f80e 	bl	80076d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076b4:	4b05      	ldr	r3, [pc, #20]	; (80076cc <prvCheckTasksWaitingTermination+0x54>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e1      	bne.n	8007680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000b90 	.word	0x20000b90
 80076c8:	20000bbc 	.word	0x20000bbc
 80076cc:	20000ba4 	.word	0x20000ba4

080076d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d108      	bne.n	80076f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 ff64 	bl	80085b4 <vPortFree>
				vPortFree( pxTCB );
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 ff61 	bl	80085b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076f2:	e017      	b.n	8007724 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d103      	bne.n	8007706 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 ff58 	bl	80085b4 <vPortFree>
	}
 8007704:	e00e      	b.n	8007724 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800770c:	2b02      	cmp	r3, #2
 800770e:	d009      	beq.n	8007724 <prvDeleteTCB+0x54>
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	e7fe      	b.n	8007722 <prvDeleteTCB+0x52>
	}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007732:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <prvResetNextTaskUnblockTime+0x38>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d104      	bne.n	8007746 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <prvResetNextTaskUnblockTime+0x3c>)
 800773e:	f04f 32ff 	mov.w	r2, #4294967295
 8007742:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007744:	e008      	b.n	8007758 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <prvResetNextTaskUnblockTime+0x38>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	4a04      	ldr	r2, [pc, #16]	; (8007768 <prvResetNextTaskUnblockTime+0x3c>)
 8007756:	6013      	str	r3, [r2, #0]
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	20000b74 	.word	0x20000b74
 8007768:	20000bdc 	.word	0x20000bdc

0800776c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007772:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <xTaskGetSchedulerState+0x34>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d102      	bne.n	8007780 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800777a:	2301      	movs	r3, #1
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	e008      	b.n	8007792 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007780:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <xTaskGetSchedulerState+0x38>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007788:	2302      	movs	r3, #2
 800778a:	607b      	str	r3, [r7, #4]
 800778c:	e001      	b.n	8007792 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800778e:	2300      	movs	r3, #0
 8007790:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007792:	687b      	ldr	r3, [r7, #4]
	}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	20000bc8 	.word	0x20000bc8
 80077a4:	20000be4 	.word	0x20000be4

080077a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d054      	beq.n	8007868 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077be:	4b2d      	ldr	r3, [pc, #180]	; (8007874 <xTaskPriorityDisinherit+0xcc>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d009      	beq.n	80077dc <xTaskPriorityDisinherit+0x34>
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	e7fe      	b.n	80077da <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <xTaskPriorityDisinherit+0x50>
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60bb      	str	r3, [r7, #8]
 80077f6:	e7fe      	b.n	80077f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fc:	1e5a      	subs	r2, r3, #1
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780a:	429a      	cmp	r2, r3
 800780c:	d02c      	beq.n	8007868 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007812:	2b00      	cmp	r3, #0
 8007814:	d128      	bne.n	8007868 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	3304      	adds	r3, #4
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fca0 	bl	8006160 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007838:	4b0f      	ldr	r3, [pc, #60]	; (8007878 <xTaskPriorityDisinherit+0xd0>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d903      	bls.n	8007848 <xTaskPriorityDisinherit+0xa0>
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	4a0c      	ldr	r2, [pc, #48]	; (8007878 <xTaskPriorityDisinherit+0xd0>)
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4a09      	ldr	r2, [pc, #36]	; (800787c <xTaskPriorityDisinherit+0xd4>)
 8007856:	441a      	add	r2, r3
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3304      	adds	r3, #4
 800785c:	4619      	mov	r1, r3
 800785e:	4610      	mov	r0, r2
 8007860:	f7fe fc21 	bl	80060a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007864:	2301      	movs	r3, #1
 8007866:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007868:	697b      	ldr	r3, [r7, #20]
	}
 800786a:	4618      	mov	r0, r3
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	200006e8 	.word	0x200006e8
 8007878:	20000bc4 	.word	0x20000bc4
 800787c:	200006ec 	.word	0x200006ec

08007880 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800788a:	4b21      	ldr	r3, [pc, #132]	; (8007910 <prvAddCurrentTaskToDelayedList+0x90>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007890:	4b20      	ldr	r3, [pc, #128]	; (8007914 <prvAddCurrentTaskToDelayedList+0x94>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3304      	adds	r3, #4
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fc62 	bl	8006160 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a2:	d10a      	bne.n	80078ba <prvAddCurrentTaskToDelayedList+0x3a>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078aa:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <prvAddCurrentTaskToDelayedList+0x94>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4619      	mov	r1, r3
 80078b2:	4819      	ldr	r0, [pc, #100]	; (8007918 <prvAddCurrentTaskToDelayedList+0x98>)
 80078b4:	f7fe fbf7 	bl	80060a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078b8:	e026      	b.n	8007908 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078c2:	4b14      	ldr	r3, [pc, #80]	; (8007914 <prvAddCurrentTaskToDelayedList+0x94>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d209      	bcs.n	80078e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078d2:	4b12      	ldr	r3, [pc, #72]	; (800791c <prvAddCurrentTaskToDelayedList+0x9c>)
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <prvAddCurrentTaskToDelayedList+0x94>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3304      	adds	r3, #4
 80078dc:	4619      	mov	r1, r3
 80078de:	4610      	mov	r0, r2
 80078e0:	f7fe fc05 	bl	80060ee <vListInsert>
}
 80078e4:	e010      	b.n	8007908 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078e6:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <prvAddCurrentTaskToDelayedList+0x94>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f7fe fbfb 	bl	80060ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078f8:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d202      	bcs.n	8007908 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007902:	4a08      	ldr	r2, [pc, #32]	; (8007924 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6013      	str	r3, [r2, #0]
}
 8007908:	bf00      	nop
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000bc0 	.word	0x20000bc0
 8007914:	200006e8 	.word	0x200006e8
 8007918:	20000ba8 	.word	0x20000ba8
 800791c:	20000b78 	.word	0x20000b78
 8007920:	20000b74 	.word	0x20000b74
 8007924:	20000bdc 	.word	0x20000bdc

08007928 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	; 0x28
 800792c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800792e:	2300      	movs	r3, #0
 8007930:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007932:	f000 faff 	bl	8007f34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007936:	4b1c      	ldr	r3, [pc, #112]	; (80079a8 <xTimerCreateTimerTask+0x80>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d021      	beq.n	8007982 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007946:	1d3a      	adds	r2, r7, #4
 8007948:	f107 0108 	add.w	r1, r7, #8
 800794c:	f107 030c 	add.w	r3, r7, #12
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fb61 	bl	8006018 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	9202      	str	r2, [sp, #8]
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	2302      	movs	r3, #2
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	460a      	mov	r2, r1
 8007968:	4910      	ldr	r1, [pc, #64]	; (80079ac <xTimerCreateTimerTask+0x84>)
 800796a:	4811      	ldr	r0, [pc, #68]	; (80079b0 <xTimerCreateTimerTask+0x88>)
 800796c:	f7ff f8f6 	bl	8006b5c <xTaskCreateStatic>
 8007970:	4602      	mov	r2, r0
 8007972:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <xTimerCreateTimerTask+0x8c>)
 8007974:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007976:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <xTimerCreateTimerTask+0x8c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800797e:	2301      	movs	r3, #1
 8007980:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <xTimerCreateTimerTask+0x74>
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	e7fe      	b.n	800799a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800799c:	697b      	ldr	r3, [r7, #20]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000c18 	.word	0x20000c18
 80079ac:	080088b8 	.word	0x080088b8
 80079b0:	08007ae9 	.word	0x08007ae9
 80079b4:	20000c1c 	.word	0x20000c1c

080079b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d109      	bne.n	80079e4 <xTimerGenericCommand+0x2c>
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	623b      	str	r3, [r7, #32]
 80079e2:	e7fe      	b.n	80079e2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079e4:	4b19      	ldr	r3, [pc, #100]	; (8007a4c <xTimerGenericCommand+0x94>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d02a      	beq.n	8007a42 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b05      	cmp	r3, #5
 80079fc:	dc18      	bgt.n	8007a30 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079fe:	f7ff feb5 	bl	800776c <xTaskGetSchedulerState>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d109      	bne.n	8007a1c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a08:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <xTimerGenericCommand+0x94>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	f107 0110 	add.w	r1, r7, #16
 8007a10:	2300      	movs	r3, #0
 8007a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a14:	f7fe fccc 	bl	80063b0 <xQueueGenericSend>
 8007a18:	6278      	str	r0, [r7, #36]	; 0x24
 8007a1a:	e012      	b.n	8007a42 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <xTimerGenericCommand+0x94>)
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	f107 0110 	add.w	r1, r7, #16
 8007a24:	2300      	movs	r3, #0
 8007a26:	2200      	movs	r2, #0
 8007a28:	f7fe fcc2 	bl	80063b0 <xQueueGenericSend>
 8007a2c:	6278      	str	r0, [r7, #36]	; 0x24
 8007a2e:	e008      	b.n	8007a42 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a30:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <xTimerGenericCommand+0x94>)
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	f107 0110 	add.w	r1, r7, #16
 8007a38:	2300      	movs	r3, #0
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	f7fe fdb2 	bl	80065a4 <xQueueGenericSendFromISR>
 8007a40:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3728      	adds	r7, #40	; 0x28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000c18 	.word	0x20000c18

08007a50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5a:	4b22      	ldr	r3, [pc, #136]	; (8007ae4 <prvProcessExpiredTimer+0x94>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	3304      	adds	r3, #4
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe fb79 	bl	8006160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d021      	beq.n	8007ac0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	699a      	ldr	r2, [r3, #24]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	18d1      	adds	r1, r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	6978      	ldr	r0, [r7, #20]
 8007a8a:	f000 f8d1 	bl	8007c30 <prvInsertTimerInActiveList>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01e      	beq.n	8007ad2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a94:	2300      	movs	r3, #0
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	6978      	ldr	r0, [r7, #20]
 8007aa0:	f7ff ff8a 	bl	80079b8 <xTimerGenericCommand>
 8007aa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d112      	bne.n	8007ad2 <prvProcessExpiredTimer+0x82>
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e7fe      	b.n	8007abe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ac6:	f023 0301 	bic.w	r3, r3, #1
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	6978      	ldr	r0, [r7, #20]
 8007ad8:	4798      	blx	r3
}
 8007ada:	bf00      	nop
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000c10 	.word	0x20000c10

08007ae8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007af0:	f107 0308 	add.w	r3, r7, #8
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 f857 	bl	8007ba8 <prvGetNextExpireTime>
 8007afa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	4619      	mov	r1, r3
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f803 	bl	8007b0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b06:	f000 f8d5 	bl	8007cb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b0a:	e7f1      	b.n	8007af0 <prvTimerTask+0x8>

08007b0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b16:	f7ff fa57 	bl	8006fc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b1a:	f107 0308 	add.w	r3, r7, #8
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 f866 	bl	8007bf0 <prvSampleTimeNow>
 8007b24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d130      	bne.n	8007b8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <prvProcessTimerOrBlockTask+0x3c>
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d806      	bhi.n	8007b48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b3a:	f7ff fa53 	bl	8006fe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b3e:	68f9      	ldr	r1, [r7, #12]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff ff85 	bl	8007a50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b46:	e024      	b.n	8007b92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d008      	beq.n	8007b60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b4e:	4b13      	ldr	r3, [pc, #76]	; (8007b9c <prvProcessTimerOrBlockTask+0x90>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <prvProcessTimerOrBlockTask+0x50>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e000      	b.n	8007b5e <prvProcessTimerOrBlockTask+0x52>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b60:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <prvProcessTimerOrBlockTask+0x94>)
 8007b62:	6818      	ldr	r0, [r3, #0]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	f7fe ffc1 	bl	8006af4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b72:	f7ff fa37 	bl	8006fe4 <xTaskResumeAll>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <prvProcessTimerOrBlockTask+0x98>)
 8007b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	f3bf 8f6f 	isb	sy
}
 8007b8c:	e001      	b.n	8007b92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b8e:	f7ff fa29 	bl	8006fe4 <xTaskResumeAll>
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000c14 	.word	0x20000c14
 8007ba0:	20000c18 	.word	0x20000c18
 8007ba4:	e000ed04 	.word	0xe000ed04

08007ba8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bb0:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <prvGetNextExpireTime+0x44>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <prvGetNextExpireTime+0x16>
 8007bba:	2201      	movs	r2, #1
 8007bbc:	e000      	b.n	8007bc0 <prvGetNextExpireTime+0x18>
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d105      	bne.n	8007bd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bcc:	4b07      	ldr	r3, [pc, #28]	; (8007bec <prvGetNextExpireTime+0x44>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	e001      	b.n	8007bdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	20000c10 	.word	0x20000c10

08007bf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bf8:	f7ff fa90 	bl	800711c <xTaskGetTickCount>
 8007bfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <prvSampleTimeNow+0x3c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d205      	bcs.n	8007c14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c08:	f000 f930 	bl	8007e6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e002      	b.n	8007c1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c1a:	4a04      	ldr	r2, [pc, #16]	; (8007c2c <prvSampleTimeNow+0x3c>)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c20:	68fb      	ldr	r3, [r7, #12]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000c20 	.word	0x20000c20

08007c30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d812      	bhi.n	8007c7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	1ad2      	subs	r2, r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d302      	bcc.n	8007c6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	e01b      	b.n	8007ca2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c6a:	4b10      	ldr	r3, [pc, #64]	; (8007cac <prvInsertTimerInActiveList+0x7c>)
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4619      	mov	r1, r3
 8007c74:	4610      	mov	r0, r2
 8007c76:	f7fe fa3a 	bl	80060ee <vListInsert>
 8007c7a:	e012      	b.n	8007ca2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d206      	bcs.n	8007c92 <prvInsertTimerInActiveList+0x62>
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d302      	bcc.n	8007c92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e007      	b.n	8007ca2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c92:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <prvInsertTimerInActiveList+0x80>)
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f7fe fa26 	bl	80060ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ca2:	697b      	ldr	r3, [r7, #20]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	20000c14 	.word	0x20000c14
 8007cb0:	20000c10 	.word	0x20000c10

08007cb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08e      	sub	sp, #56	; 0x38
 8007cb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cba:	e0c6      	b.n	8007e4a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	da17      	bge.n	8007cf2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cc2:	1d3b      	adds	r3, r7, #4
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d109      	bne.n	8007ce2 <prvProcessReceivedCommands+0x2e>
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	61fb      	str	r3, [r7, #28]
 8007ce0:	e7fe      	b.n	8007ce0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ce8:	6850      	ldr	r0, [r2, #4]
 8007cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cec:	6892      	ldr	r2, [r2, #8]
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f2c0 80a7 	blt.w	8007e48 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d004      	beq.n	8007d10 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fa28 	bl	8006160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d10:	463b      	mov	r3, r7
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff ff6c 	bl	8007bf0 <prvSampleTimeNow>
 8007d18:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b09      	cmp	r3, #9
 8007d1e:	f200 8094 	bhi.w	8007e4a <prvProcessReceivedCommands+0x196>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <prvProcessReceivedCommands+0x74>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d51 	.word	0x08007d51
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	08007d51 	.word	0x08007d51
 8007d34:	08007dc3 	.word	0x08007dc3
 8007d38:	08007dd7 	.word	0x08007dd7
 8007d3c:	08007e1f 	.word	0x08007e1f
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007d51 	.word	0x08007d51
 8007d48:	08007dc3 	.word	0x08007dc3
 8007d4c:	08007dd7 	.word	0x08007dd7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	18d1      	adds	r1, r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d70:	f7ff ff5e 	bl	8007c30 <prvInsertTimerInActiveList>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d067      	beq.n	8007e4a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d05c      	beq.n	8007e4a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	441a      	add	r2, r3
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	2100      	movs	r1, #0
 8007da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da2:	f7ff fe09 	bl	80079b8 <xTimerGenericCommand>
 8007da6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d14d      	bne.n	8007e4a <prvProcessReceivedCommands+0x196>
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	61bb      	str	r3, [r7, #24]
 8007dc0:	e7fe      	b.n	8007dc0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dc8:	f023 0301 	bic.w	r3, r3, #1
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007dd4:	e039      	b.n	8007e4a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ddc:	f043 0301 	orr.w	r3, r3, #1
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d109      	bne.n	8007e0a <prvProcessReceivedCommands+0x156>
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	617b      	str	r3, [r7, #20]
 8007e08:	e7fe      	b.n	8007e08 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	18d1      	adds	r1, r2, r3
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e18:	f7ff ff0a 	bl	8007c30 <prvInsertTimerInActiveList>
					break;
 8007e1c:	e015      	b.n	8007e4a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d103      	bne.n	8007e34 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e2e:	f000 fbc1 	bl	80085b4 <vPortFree>
 8007e32:	e00a      	b.n	8007e4a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e3a:	f023 0301 	bic.w	r3, r3, #1
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e46:	e000      	b.n	8007e4a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e4a:	4b07      	ldr	r3, [pc, #28]	; (8007e68 <prvProcessReceivedCommands+0x1b4>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	1d39      	adds	r1, r7, #4
 8007e50:	2200      	movs	r2, #0
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fe fc3a 	bl	80066cc <xQueueReceive>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f47f af2e 	bne.w	8007cbc <prvProcessReceivedCommands+0x8>
	}
}
 8007e60:	bf00      	nop
 8007e62:	3730      	adds	r7, #48	; 0x30
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20000c18 	.word	0x20000c18

08007e6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e72:	e047      	b.n	8007f04 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e74:	4b2d      	ldr	r3, [pc, #180]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7e:	4b2b      	ldr	r3, [pc, #172]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe f967 	bl	8006160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d02d      	beq.n	8007f04 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4413      	add	r3, r2
 8007eb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d90e      	bls.n	8007ed8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ec6:	4b19      	ldr	r3, [pc, #100]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	f7fe f90c 	bl	80060ee <vListInsert>
 8007ed6:	e015      	b.n	8007f04 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2300      	movs	r3, #0
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7ff fd68 	bl	80079b8 <xTimerGenericCommand>
 8007ee8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d109      	bne.n	8007f04 <prvSwitchTimerLists+0x98>
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	603b      	str	r3, [r7, #0]
 8007f02:	e7fe      	b.n	8007f02 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f04:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1b2      	bne.n	8007e74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f14:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <prvSwitchTimerLists+0xc4>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a04      	ldr	r2, [pc, #16]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007f1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f1c:	4a04      	ldr	r2, [pc, #16]	; (8007f30 <prvSwitchTimerLists+0xc4>)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	6013      	str	r3, [r2, #0]
}
 8007f22:	bf00      	nop
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000c10 	.word	0x20000c10
 8007f30:	20000c14 	.word	0x20000c14

08007f34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f3a:	f000 f95f 	bl	80081fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f3e:	4b15      	ldr	r3, [pc, #84]	; (8007f94 <prvCheckForValidListAndQueue+0x60>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d120      	bne.n	8007f88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f46:	4814      	ldr	r0, [pc, #80]	; (8007f98 <prvCheckForValidListAndQueue+0x64>)
 8007f48:	f7fe f880 	bl	800604c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f4c:	4813      	ldr	r0, [pc, #76]	; (8007f9c <prvCheckForValidListAndQueue+0x68>)
 8007f4e:	f7fe f87d 	bl	800604c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f52:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <prvCheckForValidListAndQueue+0x6c>)
 8007f54:	4a10      	ldr	r2, [pc, #64]	; (8007f98 <prvCheckForValidListAndQueue+0x64>)
 8007f56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f58:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <prvCheckForValidListAndQueue+0x70>)
 8007f5a:	4a10      	ldr	r2, [pc, #64]	; (8007f9c <prvCheckForValidListAndQueue+0x68>)
 8007f5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <prvCheckForValidListAndQueue+0x74>)
 8007f64:	4a11      	ldr	r2, [pc, #68]	; (8007fac <prvCheckForValidListAndQueue+0x78>)
 8007f66:	2110      	movs	r1, #16
 8007f68:	200a      	movs	r0, #10
 8007f6a:	f7fe f98b 	bl	8006284 <xQueueGenericCreateStatic>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	4b08      	ldr	r3, [pc, #32]	; (8007f94 <prvCheckForValidListAndQueue+0x60>)
 8007f72:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f74:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <prvCheckForValidListAndQueue+0x60>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <prvCheckForValidListAndQueue+0x60>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	490b      	ldr	r1, [pc, #44]	; (8007fb0 <prvCheckForValidListAndQueue+0x7c>)
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fd8e 	bl	8006aa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f88:	f000 f966 	bl	8008258 <vPortExitCritical>
}
 8007f8c:	bf00      	nop
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000c18 	.word	0x20000c18
 8007f98:	20000be8 	.word	0x20000be8
 8007f9c:	20000bfc 	.word	0x20000bfc
 8007fa0:	20000c10 	.word	0x20000c10
 8007fa4:	20000c14 	.word	0x20000c14
 8007fa8:	20000cc4 	.word	0x20000cc4
 8007fac:	20000c24 	.word	0x20000c24
 8007fb0:	080088c0 	.word	0x080088c0

08007fb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3b04      	subs	r3, #4
 8007fc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3b04      	subs	r3, #4
 8007fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f023 0201 	bic.w	r2, r3, #1
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3b04      	subs	r3, #4
 8007fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fe4:	4a0c      	ldr	r2, [pc, #48]	; (8008018 <pxPortInitialiseStack+0x64>)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3b14      	subs	r3, #20
 8007fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3b04      	subs	r3, #4
 8007ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f06f 0202 	mvn.w	r2, #2
 8008002:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3b20      	subs	r3, #32
 8008008:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800800a:	68fb      	ldr	r3, [r7, #12]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	0800801d 	.word	0x0800801d

0800801c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008026:	4b11      	ldr	r3, [pc, #68]	; (800806c <prvTaskExitError+0x50>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d009      	beq.n	8008044 <prvTaskExitError+0x28>
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	e7fe      	b.n	8008042 <prvTaskExitError+0x26>
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008056:	bf00      	nop
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0fc      	beq.n	8008058 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	2000000c 	.word	0x2000000c

08008070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <pxCurrentTCBConst2>)
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	6808      	ldr	r0, [r1, #0]
 8008076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807a:	f380 8809 	msr	PSP, r0
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f04f 0000 	mov.w	r0, #0
 8008086:	f380 8811 	msr	BASEPRI, r0
 800808a:	4770      	bx	lr
 800808c:	f3af 8000 	nop.w

08008090 <pxCurrentTCBConst2>:
 8008090:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop

08008098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008098:	4808      	ldr	r0, [pc, #32]	; (80080bc <prvPortStartFirstTask+0x24>)
 800809a:	6800      	ldr	r0, [r0, #0]
 800809c:	6800      	ldr	r0, [r0, #0]
 800809e:	f380 8808 	msr	MSP, r0
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f380 8814 	msr	CONTROL, r0
 80080aa:	b662      	cpsie	i
 80080ac:	b661      	cpsie	f
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	df00      	svc	0
 80080b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ba:	bf00      	nop
 80080bc:	e000ed08 	.word	0xe000ed08

080080c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080c6:	4b44      	ldr	r3, [pc, #272]	; (80081d8 <xPortStartScheduler+0x118>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a44      	ldr	r2, [pc, #272]	; (80081dc <xPortStartScheduler+0x11c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d109      	bne.n	80080e4 <xPortStartScheduler+0x24>
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	613b      	str	r3, [r7, #16]
 80080e2:	e7fe      	b.n	80080e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080e4:	4b3c      	ldr	r3, [pc, #240]	; (80081d8 <xPortStartScheduler+0x118>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a3d      	ldr	r2, [pc, #244]	; (80081e0 <xPortStartScheduler+0x120>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d109      	bne.n	8008102 <xPortStartScheduler+0x42>
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	e7fe      	b.n	8008100 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008102:	4b38      	ldr	r3, [pc, #224]	; (80081e4 <xPortStartScheduler+0x124>)
 8008104:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	22ff      	movs	r2, #255	; 0xff
 8008112:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008124:	b2da      	uxtb	r2, r3
 8008126:	4b30      	ldr	r3, [pc, #192]	; (80081e8 <xPortStartScheduler+0x128>)
 8008128:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800812a:	4b30      	ldr	r3, [pc, #192]	; (80081ec <xPortStartScheduler+0x12c>)
 800812c:	2207      	movs	r2, #7
 800812e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008130:	e009      	b.n	8008146 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008132:	4b2e      	ldr	r3, [pc, #184]	; (80081ec <xPortStartScheduler+0x12c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3b01      	subs	r3, #1
 8008138:	4a2c      	ldr	r2, [pc, #176]	; (80081ec <xPortStartScheduler+0x12c>)
 800813a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	b2db      	uxtb	r3, r3
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	b2db      	uxtb	r3, r3
 8008144:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	d0ef      	beq.n	8008132 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008152:	4b26      	ldr	r3, [pc, #152]	; (80081ec <xPortStartScheduler+0x12c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f1c3 0307 	rsb	r3, r3, #7
 800815a:	2b04      	cmp	r3, #4
 800815c:	d009      	beq.n	8008172 <xPortStartScheduler+0xb2>
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	60bb      	str	r3, [r7, #8]
 8008170:	e7fe      	b.n	8008170 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008172:	4b1e      	ldr	r3, [pc, #120]	; (80081ec <xPortStartScheduler+0x12c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	021b      	lsls	r3, r3, #8
 8008178:	4a1c      	ldr	r2, [pc, #112]	; (80081ec <xPortStartScheduler+0x12c>)
 800817a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800817c:	4b1b      	ldr	r3, [pc, #108]	; (80081ec <xPortStartScheduler+0x12c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008184:	4a19      	ldr	r2, [pc, #100]	; (80081ec <xPortStartScheduler+0x12c>)
 8008186:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	b2da      	uxtb	r2, r3
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008190:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <xPortStartScheduler+0x130>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <xPortStartScheduler+0x130>)
 8008196:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800819a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800819c:	4b14      	ldr	r3, [pc, #80]	; (80081f0 <xPortStartScheduler+0x130>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <xPortStartScheduler+0x130>)
 80081a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081a8:	f000 f8d6 	bl	8008358 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081ac:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <xPortStartScheduler+0x134>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081b2:	f000 f8f5 	bl	80083a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081b6:	4b10      	ldr	r3, [pc, #64]	; (80081f8 <xPortStartScheduler+0x138>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a0f      	ldr	r2, [pc, #60]	; (80081f8 <xPortStartScheduler+0x138>)
 80081bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081c2:	f7ff ff69 	bl	8008098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081c6:	f7ff f871 	bl	80072ac <vTaskSwitchContext>
	prvTaskExitError();
 80081ca:	f7ff ff27 	bl	800801c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	e000ed00 	.word	0xe000ed00
 80081dc:	410fc271 	.word	0x410fc271
 80081e0:	410fc270 	.word	0x410fc270
 80081e4:	e000e400 	.word	0xe000e400
 80081e8:	20000d14 	.word	0x20000d14
 80081ec:	20000d18 	.word	0x20000d18
 80081f0:	e000ed20 	.word	0xe000ed20
 80081f4:	2000000c 	.word	0x2000000c
 80081f8:	e000ef34 	.word	0xe000ef34

080081fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008214:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <vPortEnterCritical+0x54>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	4a0d      	ldr	r2, [pc, #52]	; (8008250 <vPortEnterCritical+0x54>)
 800821c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <vPortEnterCritical+0x54>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d10e      	bne.n	8008244 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008226:	4b0b      	ldr	r3, [pc, #44]	; (8008254 <vPortEnterCritical+0x58>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	d009      	beq.n	8008244 <vPortEnterCritical+0x48>
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	603b      	str	r3, [r7, #0]
 8008242:	e7fe      	b.n	8008242 <vPortEnterCritical+0x46>
	}
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	2000000c 	.word	0x2000000c
 8008254:	e000ed04 	.word	0xe000ed04

08008258 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800825e:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <vPortExitCritical+0x4c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d109      	bne.n	800827a <vPortExitCritical+0x22>
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	607b      	str	r3, [r7, #4]
 8008278:	e7fe      	b.n	8008278 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800827a:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <vPortExitCritical+0x4c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3b01      	subs	r3, #1
 8008280:	4a08      	ldr	r2, [pc, #32]	; (80082a4 <vPortExitCritical+0x4c>)
 8008282:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008284:	4b07      	ldr	r3, [pc, #28]	; (80082a4 <vPortExitCritical+0x4c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <vPortExitCritical+0x3e>
 800828c:	2300      	movs	r3, #0
 800828e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	2000000c 	.word	0x2000000c
	...

080082b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082b0:	f3ef 8009 	mrs	r0, PSP
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	4b15      	ldr	r3, [pc, #84]	; (8008310 <pxCurrentTCBConst>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	f01e 0f10 	tst.w	lr, #16
 80082c0:	bf08      	it	eq
 80082c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ca:	6010      	str	r0, [r2, #0]
 80082cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082d4:	f380 8811 	msr	BASEPRI, r0
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f7fe ffe4 	bl	80072ac <vTaskSwitchContext>
 80082e4:	f04f 0000 	mov.w	r0, #0
 80082e8:	f380 8811 	msr	BASEPRI, r0
 80082ec:	bc09      	pop	{r0, r3}
 80082ee:	6819      	ldr	r1, [r3, #0]
 80082f0:	6808      	ldr	r0, [r1, #0]
 80082f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f6:	f01e 0f10 	tst.w	lr, #16
 80082fa:	bf08      	it	eq
 80082fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008300:	f380 8809 	msr	PSP, r0
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	f3af 8000 	nop.w

08008310 <pxCurrentTCBConst>:
 8008310:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop

08008318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008330:	f7fe ff04 	bl	800713c <xTaskIncrementTick>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800833a:	4b06      	ldr	r3, [pc, #24]	; (8008354 <SysTick_Handler+0x3c>)
 800833c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	2300      	movs	r3, #0
 8008344:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800835c:	4b0b      	ldr	r3, [pc, #44]	; (800838c <vPortSetupTimerInterrupt+0x34>)
 800835e:	2200      	movs	r2, #0
 8008360:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008362:	4b0b      	ldr	r3, [pc, #44]	; (8008390 <vPortSetupTimerInterrupt+0x38>)
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <vPortSetupTimerInterrupt+0x3c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a0a      	ldr	r2, [pc, #40]	; (8008398 <vPortSetupTimerInterrupt+0x40>)
 800836e:	fba2 2303 	umull	r2, r3, r2, r3
 8008372:	099b      	lsrs	r3, r3, #6
 8008374:	4a09      	ldr	r2, [pc, #36]	; (800839c <vPortSetupTimerInterrupt+0x44>)
 8008376:	3b01      	subs	r3, #1
 8008378:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800837a:	4b04      	ldr	r3, [pc, #16]	; (800838c <vPortSetupTimerInterrupt+0x34>)
 800837c:	2207      	movs	r2, #7
 800837e:	601a      	str	r2, [r3, #0]
}
 8008380:	bf00      	nop
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	e000e010 	.word	0xe000e010
 8008390:	e000e018 	.word	0xe000e018
 8008394:	20000000 	.word	0x20000000
 8008398:	10624dd3 	.word	0x10624dd3
 800839c:	e000e014 	.word	0xe000e014

080083a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083b0 <vPortEnableVFP+0x10>
 80083a4:	6801      	ldr	r1, [r0, #0]
 80083a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083aa:	6001      	str	r1, [r0, #0]
 80083ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083ae:	bf00      	nop
 80083b0:	e000ed88 	.word	0xe000ed88

080083b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083ba:	f3ef 8305 	mrs	r3, IPSR
 80083be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b0f      	cmp	r3, #15
 80083c4:	d913      	bls.n	80083ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083c6:	4a16      	ldr	r2, [pc, #88]	; (8008420 <vPortValidateInterruptPriority+0x6c>)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4413      	add	r3, r2
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083d0:	4b14      	ldr	r3, [pc, #80]	; (8008424 <vPortValidateInterruptPriority+0x70>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	7afa      	ldrb	r2, [r7, #11]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d209      	bcs.n	80083ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	e7fe      	b.n	80083ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083ee:	4b0e      	ldr	r3, [pc, #56]	; (8008428 <vPortValidateInterruptPriority+0x74>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083f6:	4b0d      	ldr	r3, [pc, #52]	; (800842c <vPortValidateInterruptPriority+0x78>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d909      	bls.n	8008412 <vPortValidateInterruptPriority+0x5e>
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	e7fe      	b.n	8008410 <vPortValidateInterruptPriority+0x5c>
	}
 8008412:	bf00      	nop
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	e000e3f0 	.word	0xe000e3f0
 8008424:	20000d14 	.word	0x20000d14
 8008428:	e000ed0c 	.word	0xe000ed0c
 800842c:	20000d18 	.word	0x20000d18

08008430 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08a      	sub	sp, #40	; 0x28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008438:	2300      	movs	r3, #0
 800843a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800843c:	f7fe fdc4 	bl	8006fc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008440:	4b57      	ldr	r3, [pc, #348]	; (80085a0 <pvPortMalloc+0x170>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008448:	f000 f90c 	bl	8008664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800844c:	4b55      	ldr	r3, [pc, #340]	; (80085a4 <pvPortMalloc+0x174>)
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4013      	ands	r3, r2
 8008454:	2b00      	cmp	r3, #0
 8008456:	f040 808c 	bne.w	8008572 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01c      	beq.n	800849a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008460:	2208      	movs	r2, #8
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	2b00      	cmp	r3, #0
 8008470:	d013      	beq.n	800849a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f023 0307 	bic.w	r3, r3, #7
 8008478:	3308      	adds	r3, #8
 800847a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	2b00      	cmp	r3, #0
 8008484:	d009      	beq.n	800849a <pvPortMalloc+0x6a>
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	e7fe      	b.n	8008498 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d068      	beq.n	8008572 <pvPortMalloc+0x142>
 80084a0:	4b41      	ldr	r3, [pc, #260]	; (80085a8 <pvPortMalloc+0x178>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d863      	bhi.n	8008572 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084aa:	4b40      	ldr	r3, [pc, #256]	; (80085ac <pvPortMalloc+0x17c>)
 80084ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084ae:	4b3f      	ldr	r3, [pc, #252]	; (80085ac <pvPortMalloc+0x17c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084b4:	e004      	b.n	80084c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d903      	bls.n	80084d2 <pvPortMalloc+0xa2>
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1f1      	bne.n	80084b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084d2:	4b33      	ldr	r3, [pc, #204]	; (80085a0 <pvPortMalloc+0x170>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d8:	429a      	cmp	r2, r3
 80084da:	d04a      	beq.n	8008572 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2208      	movs	r2, #8
 80084e2:	4413      	add	r3, r2
 80084e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	1ad2      	subs	r2, r2, r3
 80084f6:	2308      	movs	r3, #8
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d91e      	bls.n	800853c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4413      	add	r3, r2
 8008504:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	2b00      	cmp	r3, #0
 800850e:	d009      	beq.n	8008524 <pvPortMalloc+0xf4>
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	613b      	str	r3, [r7, #16]
 8008522:	e7fe      	b.n	8008522 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008536:	69b8      	ldr	r0, [r7, #24]
 8008538:	f000 f8f6 	bl	8008728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800853c:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <pvPortMalloc+0x178>)
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	4a18      	ldr	r2, [pc, #96]	; (80085a8 <pvPortMalloc+0x178>)
 8008548:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800854a:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <pvPortMalloc+0x178>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	4b18      	ldr	r3, [pc, #96]	; (80085b0 <pvPortMalloc+0x180>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	429a      	cmp	r2, r3
 8008554:	d203      	bcs.n	800855e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <pvPortMalloc+0x178>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a15      	ldr	r2, [pc, #84]	; (80085b0 <pvPortMalloc+0x180>)
 800855c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	4b10      	ldr	r3, [pc, #64]	; (80085a4 <pvPortMalloc+0x174>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	431a      	orrs	r2, r3
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008572:	f7fe fd37 	bl	8006fe4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	2b00      	cmp	r3, #0
 800857e:	d009      	beq.n	8008594 <pvPortMalloc+0x164>
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	e7fe      	b.n	8008592 <pvPortMalloc+0x162>
	return pvReturn;
 8008594:	69fb      	ldr	r3, [r7, #28]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3728      	adds	r7, #40	; 0x28
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	200018dc 	.word	0x200018dc
 80085a4:	200018e8 	.word	0x200018e8
 80085a8:	200018e0 	.word	0x200018e0
 80085ac:	200018d4 	.word	0x200018d4
 80085b0:	200018e4 	.word	0x200018e4

080085b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d046      	beq.n	8008654 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085c6:	2308      	movs	r3, #8
 80085c8:	425b      	negs	r3, r3
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4413      	add	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	4b20      	ldr	r3, [pc, #128]	; (800865c <vPortFree+0xa8>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4013      	ands	r3, r2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <vPortFree+0x42>
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e7fe      	b.n	80085f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <vPortFree+0x5e>
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	60bb      	str	r3, [r7, #8]
 8008610:	e7fe      	b.n	8008610 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	4b11      	ldr	r3, [pc, #68]	; (800865c <vPortFree+0xa8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4013      	ands	r3, r2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d019      	beq.n	8008654 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d115      	bne.n	8008654 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	4b0b      	ldr	r3, [pc, #44]	; (800865c <vPortFree+0xa8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	43db      	mvns	r3, r3
 8008632:	401a      	ands	r2, r3
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008638:	f7fe fcc6 	bl	8006fc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <vPortFree+0xac>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4413      	add	r3, r2
 8008646:	4a06      	ldr	r2, [pc, #24]	; (8008660 <vPortFree+0xac>)
 8008648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800864a:	6938      	ldr	r0, [r7, #16]
 800864c:	f000 f86c 	bl	8008728 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008650:	f7fe fcc8 	bl	8006fe4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008654:	bf00      	nop
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	200018e8 	.word	0x200018e8
 8008660:	200018e0 	.word	0x200018e0

08008664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800866a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800866e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008670:	4b27      	ldr	r3, [pc, #156]	; (8008710 <prvHeapInit+0xac>)
 8008672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f003 0307 	and.w	r3, r3, #7
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00c      	beq.n	8008698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3307      	adds	r3, #7
 8008682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0307 	bic.w	r3, r3, #7
 800868a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	4a1f      	ldr	r2, [pc, #124]	; (8008710 <prvHeapInit+0xac>)
 8008694:	4413      	add	r3, r2
 8008696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800869c:	4a1d      	ldr	r2, [pc, #116]	; (8008714 <prvHeapInit+0xb0>)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086a2:	4b1c      	ldr	r3, [pc, #112]	; (8008714 <prvHeapInit+0xb0>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	4413      	add	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086b0:	2208      	movs	r2, #8
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0307 	bic.w	r3, r3, #7
 80086be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4a15      	ldr	r2, [pc, #84]	; (8008718 <prvHeapInit+0xb4>)
 80086c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086c6:	4b14      	ldr	r3, [pc, #80]	; (8008718 <prvHeapInit+0xb4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2200      	movs	r2, #0
 80086cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086ce:	4b12      	ldr	r3, [pc, #72]	; (8008718 <prvHeapInit+0xb4>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	1ad2      	subs	r2, r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086e4:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <prvHeapInit+0xb4>)
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	4a0a      	ldr	r2, [pc, #40]	; (800871c <prvHeapInit+0xb8>)
 80086f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	4a09      	ldr	r2, [pc, #36]	; (8008720 <prvHeapInit+0xbc>)
 80086fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086fc:	4b09      	ldr	r3, [pc, #36]	; (8008724 <prvHeapInit+0xc0>)
 80086fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008702:	601a      	str	r2, [r3, #0]
}
 8008704:	bf00      	nop
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	20000d1c 	.word	0x20000d1c
 8008714:	200018d4 	.word	0x200018d4
 8008718:	200018dc 	.word	0x200018dc
 800871c:	200018e4 	.word	0x200018e4
 8008720:	200018e0 	.word	0x200018e0
 8008724:	200018e8 	.word	0x200018e8

08008728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008730:	4b28      	ldr	r3, [pc, #160]	; (80087d4 <prvInsertBlockIntoFreeList+0xac>)
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e002      	b.n	800873c <prvInsertBlockIntoFreeList+0x14>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	429a      	cmp	r2, r3
 8008744:	d8f7      	bhi.n	8008736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	4413      	add	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d108      	bne.n	800876a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	441a      	add	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	441a      	add	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d118      	bne.n	80087b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d00d      	beq.n	80087a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	441a      	add	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e008      	b.n	80087b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087a6:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <prvInsertBlockIntoFreeList+0xb0>)
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	e003      	b.n	80087b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d002      	beq.n	80087c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087c6:	bf00      	nop
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	200018d4 	.word	0x200018d4
 80087d8:	200018dc 	.word	0x200018dc

080087dc <__libc_init_array>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4e0d      	ldr	r6, [pc, #52]	; (8008814 <__libc_init_array+0x38>)
 80087e0:	4c0d      	ldr	r4, [pc, #52]	; (8008818 <__libc_init_array+0x3c>)
 80087e2:	1ba4      	subs	r4, r4, r6
 80087e4:	10a4      	asrs	r4, r4, #2
 80087e6:	2500      	movs	r5, #0
 80087e8:	42a5      	cmp	r5, r4
 80087ea:	d109      	bne.n	8008800 <__libc_init_array+0x24>
 80087ec:	4e0b      	ldr	r6, [pc, #44]	; (800881c <__libc_init_array+0x40>)
 80087ee:	4c0c      	ldr	r4, [pc, #48]	; (8008820 <__libc_init_array+0x44>)
 80087f0:	f000 f82c 	bl	800884c <_init>
 80087f4:	1ba4      	subs	r4, r4, r6
 80087f6:	10a4      	asrs	r4, r4, #2
 80087f8:	2500      	movs	r5, #0
 80087fa:	42a5      	cmp	r5, r4
 80087fc:	d105      	bne.n	800880a <__libc_init_array+0x2e>
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008804:	4798      	blx	r3
 8008806:	3501      	adds	r5, #1
 8008808:	e7ee      	b.n	80087e8 <__libc_init_array+0xc>
 800880a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800880e:	4798      	blx	r3
 8008810:	3501      	adds	r5, #1
 8008812:	e7f2      	b.n	80087fa <__libc_init_array+0x1e>
 8008814:	080089c0 	.word	0x080089c0
 8008818:	080089c0 	.word	0x080089c0
 800881c:	080089c0 	.word	0x080089c0
 8008820:	080089c4 	.word	0x080089c4

08008824 <memcpy>:
 8008824:	b510      	push	{r4, lr}
 8008826:	1e43      	subs	r3, r0, #1
 8008828:	440a      	add	r2, r1
 800882a:	4291      	cmp	r1, r2
 800882c:	d100      	bne.n	8008830 <memcpy+0xc>
 800882e:	bd10      	pop	{r4, pc}
 8008830:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008834:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008838:	e7f7      	b.n	800882a <memcpy+0x6>

0800883a <memset>:
 800883a:	4402      	add	r2, r0
 800883c:	4603      	mov	r3, r0
 800883e:	4293      	cmp	r3, r2
 8008840:	d100      	bne.n	8008844 <memset+0xa>
 8008842:	4770      	bx	lr
 8008844:	f803 1b01 	strb.w	r1, [r3], #1
 8008848:	e7f9      	b.n	800883e <memset+0x4>
	...

0800884c <_init>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	bf00      	nop
 8008850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008852:	bc08      	pop	{r3}
 8008854:	469e      	mov	lr, r3
 8008856:	4770      	bx	lr

08008858 <_fini>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	bf00      	nop
 800885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885e:	bc08      	pop	{r3}
 8008860:	469e      	mov	lr, r3
 8008862:	4770      	bx	lr
