
hc_sr04_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e34  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08009ff4  08009ff4  00019ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4b4  0800a4b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4b4  0800a4b4  0001a4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4bc  0800a4bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4bc  0800a4bc  0001a4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4c0  0800a4c0  0001a4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a4c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002138  20000010  0800a4d4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002148  0800a4d4  00022148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002595d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f69  00000000  00000000  0004599d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ce0  00000000  00000000  00049908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b18  00000000  00000000  0004b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000050c7  00000000  00000000  0004d100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000179c0  00000000  00000000  000521c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001180b9  00000000  00000000  00069b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00181c40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ccc  00000000  00000000  00181cbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009fdc 	.word	0x08009fdc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08009fdc 	.word	0x08009fdc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_frsub>:
 8000210:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__addsf3>
 8000216:	bf00      	nop

08000218 <__aeabi_fsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800021c <__addsf3>:
 800021c:	0042      	lsls	r2, r0, #1
 800021e:	bf1f      	itttt	ne
 8000220:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000224:	ea92 0f03 	teqne	r2, r3
 8000228:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800022c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000230:	d06a      	beq.n	8000308 <__addsf3+0xec>
 8000232:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000236:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800023a:	bfc1      	itttt	gt
 800023c:	18d2      	addgt	r2, r2, r3
 800023e:	4041      	eorgt	r1, r0
 8000240:	4048      	eorgt	r0, r1
 8000242:	4041      	eorgt	r1, r0
 8000244:	bfb8      	it	lt
 8000246:	425b      	neglt	r3, r3
 8000248:	2b19      	cmp	r3, #25
 800024a:	bf88      	it	hi
 800024c:	4770      	bxhi	lr
 800024e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000252:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800025a:	bf18      	it	ne
 800025c:	4240      	negne	r0, r0
 800025e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000262:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000266:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800026a:	bf18      	it	ne
 800026c:	4249      	negne	r1, r1
 800026e:	ea92 0f03 	teq	r2, r3
 8000272:	d03f      	beq.n	80002f4 <__addsf3+0xd8>
 8000274:	f1a2 0201 	sub.w	r2, r2, #1
 8000278:	fa41 fc03 	asr.w	ip, r1, r3
 800027c:	eb10 000c 	adds.w	r0, r0, ip
 8000280:	f1c3 0320 	rsb	r3, r3, #32
 8000284:	fa01 f103 	lsl.w	r1, r1, r3
 8000288:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028c:	d502      	bpl.n	8000294 <__addsf3+0x78>
 800028e:	4249      	negs	r1, r1
 8000290:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000294:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000298:	d313      	bcc.n	80002c2 <__addsf3+0xa6>
 800029a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800029e:	d306      	bcc.n	80002ae <__addsf3+0x92>
 80002a0:	0840      	lsrs	r0, r0, #1
 80002a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002a6:	f102 0201 	add.w	r2, r2, #1
 80002aa:	2afe      	cmp	r2, #254	; 0xfe
 80002ac:	d251      	bcs.n	8000352 <__addsf3+0x136>
 80002ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002b6:	bf08      	it	eq
 80002b8:	f020 0001 	biceq.w	r0, r0, #1
 80002bc:	ea40 0003 	orr.w	r0, r0, r3
 80002c0:	4770      	bx	lr
 80002c2:	0049      	lsls	r1, r1, #1
 80002c4:	eb40 0000 	adc.w	r0, r0, r0
 80002c8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002cc:	f1a2 0201 	sub.w	r2, r2, #1
 80002d0:	d1ed      	bne.n	80002ae <__addsf3+0x92>
 80002d2:	fab0 fc80 	clz	ip, r0
 80002d6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002da:	ebb2 020c 	subs.w	r2, r2, ip
 80002de:	fa00 f00c 	lsl.w	r0, r0, ip
 80002e2:	bfaa      	itet	ge
 80002e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002e8:	4252      	neglt	r2, r2
 80002ea:	4318      	orrge	r0, r3
 80002ec:	bfbc      	itt	lt
 80002ee:	40d0      	lsrlt	r0, r2
 80002f0:	4318      	orrlt	r0, r3
 80002f2:	4770      	bx	lr
 80002f4:	f092 0f00 	teq	r2, #0
 80002f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002fc:	bf06      	itte	eq
 80002fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000302:	3201      	addeq	r2, #1
 8000304:	3b01      	subne	r3, #1
 8000306:	e7b5      	b.n	8000274 <__addsf3+0x58>
 8000308:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800030c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000310:	bf18      	it	ne
 8000312:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000316:	d021      	beq.n	800035c <__addsf3+0x140>
 8000318:	ea92 0f03 	teq	r2, r3
 800031c:	d004      	beq.n	8000328 <__addsf3+0x10c>
 800031e:	f092 0f00 	teq	r2, #0
 8000322:	bf08      	it	eq
 8000324:	4608      	moveq	r0, r1
 8000326:	4770      	bx	lr
 8000328:	ea90 0f01 	teq	r0, r1
 800032c:	bf1c      	itt	ne
 800032e:	2000      	movne	r0, #0
 8000330:	4770      	bxne	lr
 8000332:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000336:	d104      	bne.n	8000342 <__addsf3+0x126>
 8000338:	0040      	lsls	r0, r0, #1
 800033a:	bf28      	it	cs
 800033c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000346:	bf3c      	itt	cc
 8000348:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800034c:	4770      	bxcc	lr
 800034e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000352:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000356:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800035a:	4770      	bx	lr
 800035c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000360:	bf16      	itet	ne
 8000362:	4608      	movne	r0, r1
 8000364:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000368:	4601      	movne	r1, r0
 800036a:	0242      	lsls	r2, r0, #9
 800036c:	bf06      	itte	eq
 800036e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000372:	ea90 0f01 	teqeq	r0, r1
 8000376:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800037a:	4770      	bx	lr

0800037c <__aeabi_ui2f>:
 800037c:	f04f 0300 	mov.w	r3, #0
 8000380:	e004      	b.n	800038c <__aeabi_i2f+0x8>
 8000382:	bf00      	nop

08000384 <__aeabi_i2f>:
 8000384:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000388:	bf48      	it	mi
 800038a:	4240      	negmi	r0, r0
 800038c:	ea5f 0c00 	movs.w	ip, r0
 8000390:	bf08      	it	eq
 8000392:	4770      	bxeq	lr
 8000394:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000398:	4601      	mov	r1, r0
 800039a:	f04f 0000 	mov.w	r0, #0
 800039e:	e01c      	b.n	80003da <__aeabi_l2f+0x2a>

080003a0 <__aeabi_ul2f>:
 80003a0:	ea50 0201 	orrs.w	r2, r0, r1
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f04f 0300 	mov.w	r3, #0
 80003ac:	e00a      	b.n	80003c4 <__aeabi_l2f+0x14>
 80003ae:	bf00      	nop

080003b0 <__aeabi_l2f>:
 80003b0:	ea50 0201 	orrs.w	r2, r0, r1
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003bc:	d502      	bpl.n	80003c4 <__aeabi_l2f+0x14>
 80003be:	4240      	negs	r0, r0
 80003c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003c4:	ea5f 0c01 	movs.w	ip, r1
 80003c8:	bf02      	ittt	eq
 80003ca:	4684      	moveq	ip, r0
 80003cc:	4601      	moveq	r1, r0
 80003ce:	2000      	moveq	r0, #0
 80003d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003d4:	bf08      	it	eq
 80003d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003de:	fabc f28c 	clz	r2, ip
 80003e2:	3a08      	subs	r2, #8
 80003e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003e8:	db10      	blt.n	800040c <__aeabi_l2f+0x5c>
 80003ea:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ee:	4463      	add	r3, ip
 80003f0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003f4:	f1c2 0220 	rsb	r2, r2, #32
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	fa20 f202 	lsr.w	r2, r0, r2
 8000400:	eb43 0002 	adc.w	r0, r3, r2
 8000404:	bf08      	it	eq
 8000406:	f020 0001 	biceq.w	r0, r0, #1
 800040a:	4770      	bx	lr
 800040c:	f102 0220 	add.w	r2, r2, #32
 8000410:	fa01 fc02 	lsl.w	ip, r1, r2
 8000414:	f1c2 0220 	rsb	r2, r2, #32
 8000418:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800041c:	fa21 f202 	lsr.w	r2, r1, r2
 8000420:	eb43 0002 	adc.w	r0, r3, r2
 8000424:	bf08      	it	eq
 8000426:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042a:	4770      	bx	lr

0800042c <__aeabi_uldivmod>:
 800042c:	b953      	cbnz	r3, 8000444 <__aeabi_uldivmod+0x18>
 800042e:	b94a      	cbnz	r2, 8000444 <__aeabi_uldivmod+0x18>
 8000430:	2900      	cmp	r1, #0
 8000432:	bf08      	it	eq
 8000434:	2800      	cmpeq	r0, #0
 8000436:	bf1c      	itt	ne
 8000438:	f04f 31ff 	movne.w	r1, #4294967295
 800043c:	f04f 30ff 	movne.w	r0, #4294967295
 8000440:	f000 b996 	b.w	8000770 <__aeabi_idiv0>
 8000444:	f1ad 0c08 	sub.w	ip, sp, #8
 8000448:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800044c:	f000 f82a 	bl	80004a4 <__udivmoddi4>
 8000450:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000458:	b004      	add	sp, #16
 800045a:	4770      	bx	lr

0800045c <__aeabi_f2ulz>:
 800045c:	b5d0      	push	{r4, r6, r7, lr}
 800045e:	f000 faed 	bl	8000a3c <__aeabi_f2d>
 8000462:	2200      	movs	r2, #0
 8000464:	4b0d      	ldr	r3, [pc, #52]	; (800049c <__aeabi_f2ulz+0x40>)
 8000466:	4606      	mov	r6, r0
 8000468:	460f      	mov	r7, r1
 800046a:	f000 fb3f 	bl	8000aec <__aeabi_dmul>
 800046e:	f000 fd4f 	bl	8000f10 <__aeabi_d2uiz>
 8000472:	4604      	mov	r4, r0
 8000474:	f000 fac0 	bl	80009f8 <__aeabi_ui2d>
 8000478:	2200      	movs	r2, #0
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <__aeabi_f2ulz+0x44>)
 800047c:	f000 fb36 	bl	8000aec <__aeabi_dmul>
 8000480:	4602      	mov	r2, r0
 8000482:	460b      	mov	r3, r1
 8000484:	4630      	mov	r0, r6
 8000486:	4639      	mov	r1, r7
 8000488:	f000 f978 	bl	800077c <__aeabi_dsub>
 800048c:	f000 fd40 	bl	8000f10 <__aeabi_d2uiz>
 8000490:	2200      	movs	r2, #0
 8000492:	4623      	mov	r3, r4
 8000494:	4310      	orrs	r0, r2
 8000496:	4619      	mov	r1, r3
 8000498:	bdd0      	pop	{r4, r6, r7, pc}
 800049a:	bf00      	nop
 800049c:	3df00000 	.word	0x3df00000
 80004a0:	41f00000 	.word	0x41f00000

080004a4 <__udivmoddi4>:
 80004a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004a8:	9e08      	ldr	r6, [sp, #32]
 80004aa:	4604      	mov	r4, r0
 80004ac:	4688      	mov	r8, r1
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d14b      	bne.n	800054a <__udivmoddi4+0xa6>
 80004b2:	428a      	cmp	r2, r1
 80004b4:	4615      	mov	r5, r2
 80004b6:	d967      	bls.n	8000588 <__udivmoddi4+0xe4>
 80004b8:	fab2 f282 	clz	r2, r2
 80004bc:	b14a      	cbz	r2, 80004d2 <__udivmoddi4+0x2e>
 80004be:	f1c2 0720 	rsb	r7, r2, #32
 80004c2:	fa01 f302 	lsl.w	r3, r1, r2
 80004c6:	fa20 f707 	lsr.w	r7, r0, r7
 80004ca:	4095      	lsls	r5, r2
 80004cc:	ea47 0803 	orr.w	r8, r7, r3
 80004d0:	4094      	lsls	r4, r2
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	0c23      	lsrs	r3, r4, #16
 80004d8:	fbb8 f7fe 	udiv	r7, r8, lr
 80004dc:	fa1f fc85 	uxth.w	ip, r5
 80004e0:	fb0e 8817 	mls	r8, lr, r7, r8
 80004e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e8:	fb07 f10c 	mul.w	r1, r7, ip
 80004ec:	4299      	cmp	r1, r3
 80004ee:	d909      	bls.n	8000504 <__udivmoddi4+0x60>
 80004f0:	18eb      	adds	r3, r5, r3
 80004f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80004f6:	f080 811b 	bcs.w	8000730 <__udivmoddi4+0x28c>
 80004fa:	4299      	cmp	r1, r3
 80004fc:	f240 8118 	bls.w	8000730 <__udivmoddi4+0x28c>
 8000500:	3f02      	subs	r7, #2
 8000502:	442b      	add	r3, r5
 8000504:	1a5b      	subs	r3, r3, r1
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb3 f0fe 	udiv	r0, r3, lr
 800050c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000510:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000514:	fb00 fc0c 	mul.w	ip, r0, ip
 8000518:	45a4      	cmp	ip, r4
 800051a:	d909      	bls.n	8000530 <__udivmoddi4+0x8c>
 800051c:	192c      	adds	r4, r5, r4
 800051e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000522:	f080 8107 	bcs.w	8000734 <__udivmoddi4+0x290>
 8000526:	45a4      	cmp	ip, r4
 8000528:	f240 8104 	bls.w	8000734 <__udivmoddi4+0x290>
 800052c:	3802      	subs	r0, #2
 800052e:	442c      	add	r4, r5
 8000530:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000534:	eba4 040c 	sub.w	r4, r4, ip
 8000538:	2700      	movs	r7, #0
 800053a:	b11e      	cbz	r6, 8000544 <__udivmoddi4+0xa0>
 800053c:	40d4      	lsrs	r4, r2
 800053e:	2300      	movs	r3, #0
 8000540:	e9c6 4300 	strd	r4, r3, [r6]
 8000544:	4639      	mov	r1, r7
 8000546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054a:	428b      	cmp	r3, r1
 800054c:	d909      	bls.n	8000562 <__udivmoddi4+0xbe>
 800054e:	2e00      	cmp	r6, #0
 8000550:	f000 80eb 	beq.w	800072a <__udivmoddi4+0x286>
 8000554:	2700      	movs	r7, #0
 8000556:	e9c6 0100 	strd	r0, r1, [r6]
 800055a:	4638      	mov	r0, r7
 800055c:	4639      	mov	r1, r7
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	fab3 f783 	clz	r7, r3
 8000566:	2f00      	cmp	r7, #0
 8000568:	d147      	bne.n	80005fa <__udivmoddi4+0x156>
 800056a:	428b      	cmp	r3, r1
 800056c:	d302      	bcc.n	8000574 <__udivmoddi4+0xd0>
 800056e:	4282      	cmp	r2, r0
 8000570:	f200 80fa 	bhi.w	8000768 <__udivmoddi4+0x2c4>
 8000574:	1a84      	subs	r4, r0, r2
 8000576:	eb61 0303 	sbc.w	r3, r1, r3
 800057a:	2001      	movs	r0, #1
 800057c:	4698      	mov	r8, r3
 800057e:	2e00      	cmp	r6, #0
 8000580:	d0e0      	beq.n	8000544 <__udivmoddi4+0xa0>
 8000582:	e9c6 4800 	strd	r4, r8, [r6]
 8000586:	e7dd      	b.n	8000544 <__udivmoddi4+0xa0>
 8000588:	b902      	cbnz	r2, 800058c <__udivmoddi4+0xe8>
 800058a:	deff      	udf	#255	; 0xff
 800058c:	fab2 f282 	clz	r2, r2
 8000590:	2a00      	cmp	r2, #0
 8000592:	f040 808f 	bne.w	80006b4 <__udivmoddi4+0x210>
 8000596:	1b49      	subs	r1, r1, r5
 8000598:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800059c:	fa1f f885 	uxth.w	r8, r5
 80005a0:	2701      	movs	r7, #1
 80005a2:	fbb1 fcfe 	udiv	ip, r1, lr
 80005a6:	0c23      	lsrs	r3, r4, #16
 80005a8:	fb0e 111c 	mls	r1, lr, ip, r1
 80005ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b0:	fb08 f10c 	mul.w	r1, r8, ip
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d907      	bls.n	80005c8 <__udivmoddi4+0x124>
 80005b8:	18eb      	adds	r3, r5, r3
 80005ba:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x122>
 80005c0:	4299      	cmp	r1, r3
 80005c2:	f200 80cd 	bhi.w	8000760 <__udivmoddi4+0x2bc>
 80005c6:	4684      	mov	ip, r0
 80005c8:	1a59      	subs	r1, r3, r1
 80005ca:	b2a3      	uxth	r3, r4
 80005cc:	fbb1 f0fe 	udiv	r0, r1, lr
 80005d0:	fb0e 1410 	mls	r4, lr, r0, r1
 80005d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005d8:	fb08 f800 	mul.w	r8, r8, r0
 80005dc:	45a0      	cmp	r8, r4
 80005de:	d907      	bls.n	80005f0 <__udivmoddi4+0x14c>
 80005e0:	192c      	adds	r4, r5, r4
 80005e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80005e6:	d202      	bcs.n	80005ee <__udivmoddi4+0x14a>
 80005e8:	45a0      	cmp	r8, r4
 80005ea:	f200 80b6 	bhi.w	800075a <__udivmoddi4+0x2b6>
 80005ee:	4618      	mov	r0, r3
 80005f0:	eba4 0408 	sub.w	r4, r4, r8
 80005f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005f8:	e79f      	b.n	800053a <__udivmoddi4+0x96>
 80005fa:	f1c7 0c20 	rsb	ip, r7, #32
 80005fe:	40bb      	lsls	r3, r7
 8000600:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000604:	ea4e 0e03 	orr.w	lr, lr, r3
 8000608:	fa01 f407 	lsl.w	r4, r1, r7
 800060c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000610:	fa21 f30c 	lsr.w	r3, r1, ip
 8000614:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000618:	4325      	orrs	r5, r4
 800061a:	fbb3 f9f8 	udiv	r9, r3, r8
 800061e:	0c2c      	lsrs	r4, r5, #16
 8000620:	fb08 3319 	mls	r3, r8, r9, r3
 8000624:	fa1f fa8e 	uxth.w	sl, lr
 8000628:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800062c:	fb09 f40a 	mul.w	r4, r9, sl
 8000630:	429c      	cmp	r4, r3
 8000632:	fa02 f207 	lsl.w	r2, r2, r7
 8000636:	fa00 f107 	lsl.w	r1, r0, r7
 800063a:	d90b      	bls.n	8000654 <__udivmoddi4+0x1b0>
 800063c:	eb1e 0303 	adds.w	r3, lr, r3
 8000640:	f109 30ff 	add.w	r0, r9, #4294967295
 8000644:	f080 8087 	bcs.w	8000756 <__udivmoddi4+0x2b2>
 8000648:	429c      	cmp	r4, r3
 800064a:	f240 8084 	bls.w	8000756 <__udivmoddi4+0x2b2>
 800064e:	f1a9 0902 	sub.w	r9, r9, #2
 8000652:	4473      	add	r3, lr
 8000654:	1b1b      	subs	r3, r3, r4
 8000656:	b2ad      	uxth	r5, r5
 8000658:	fbb3 f0f8 	udiv	r0, r3, r8
 800065c:	fb08 3310 	mls	r3, r8, r0, r3
 8000660:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000664:	fb00 fa0a 	mul.w	sl, r0, sl
 8000668:	45a2      	cmp	sl, r4
 800066a:	d908      	bls.n	800067e <__udivmoddi4+0x1da>
 800066c:	eb1e 0404 	adds.w	r4, lr, r4
 8000670:	f100 33ff 	add.w	r3, r0, #4294967295
 8000674:	d26b      	bcs.n	800074e <__udivmoddi4+0x2aa>
 8000676:	45a2      	cmp	sl, r4
 8000678:	d969      	bls.n	800074e <__udivmoddi4+0x2aa>
 800067a:	3802      	subs	r0, #2
 800067c:	4474      	add	r4, lr
 800067e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000682:	fba0 8902 	umull	r8, r9, r0, r2
 8000686:	eba4 040a 	sub.w	r4, r4, sl
 800068a:	454c      	cmp	r4, r9
 800068c:	46c2      	mov	sl, r8
 800068e:	464b      	mov	r3, r9
 8000690:	d354      	bcc.n	800073c <__udivmoddi4+0x298>
 8000692:	d051      	beq.n	8000738 <__udivmoddi4+0x294>
 8000694:	2e00      	cmp	r6, #0
 8000696:	d069      	beq.n	800076c <__udivmoddi4+0x2c8>
 8000698:	ebb1 050a 	subs.w	r5, r1, sl
 800069c:	eb64 0403 	sbc.w	r4, r4, r3
 80006a0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80006a4:	40fd      	lsrs	r5, r7
 80006a6:	40fc      	lsrs	r4, r7
 80006a8:	ea4c 0505 	orr.w	r5, ip, r5
 80006ac:	e9c6 5400 	strd	r5, r4, [r6]
 80006b0:	2700      	movs	r7, #0
 80006b2:	e747      	b.n	8000544 <__udivmoddi4+0xa0>
 80006b4:	f1c2 0320 	rsb	r3, r2, #32
 80006b8:	fa20 f703 	lsr.w	r7, r0, r3
 80006bc:	4095      	lsls	r5, r2
 80006be:	fa01 f002 	lsl.w	r0, r1, r2
 80006c2:	fa21 f303 	lsr.w	r3, r1, r3
 80006c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ca:	4338      	orrs	r0, r7
 80006cc:	0c01      	lsrs	r1, r0, #16
 80006ce:	fbb3 f7fe 	udiv	r7, r3, lr
 80006d2:	fa1f f885 	uxth.w	r8, r5
 80006d6:	fb0e 3317 	mls	r3, lr, r7, r3
 80006da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006de:	fb07 f308 	mul.w	r3, r7, r8
 80006e2:	428b      	cmp	r3, r1
 80006e4:	fa04 f402 	lsl.w	r4, r4, r2
 80006e8:	d907      	bls.n	80006fa <__udivmoddi4+0x256>
 80006ea:	1869      	adds	r1, r5, r1
 80006ec:	f107 3cff 	add.w	ip, r7, #4294967295
 80006f0:	d22f      	bcs.n	8000752 <__udivmoddi4+0x2ae>
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d92d      	bls.n	8000752 <__udivmoddi4+0x2ae>
 80006f6:	3f02      	subs	r7, #2
 80006f8:	4429      	add	r1, r5
 80006fa:	1acb      	subs	r3, r1, r3
 80006fc:	b281      	uxth	r1, r0
 80006fe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000702:	fb0e 3310 	mls	r3, lr, r0, r3
 8000706:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800070a:	fb00 f308 	mul.w	r3, r0, r8
 800070e:	428b      	cmp	r3, r1
 8000710:	d907      	bls.n	8000722 <__udivmoddi4+0x27e>
 8000712:	1869      	adds	r1, r5, r1
 8000714:	f100 3cff 	add.w	ip, r0, #4294967295
 8000718:	d217      	bcs.n	800074a <__udivmoddi4+0x2a6>
 800071a:	428b      	cmp	r3, r1
 800071c:	d915      	bls.n	800074a <__udivmoddi4+0x2a6>
 800071e:	3802      	subs	r0, #2
 8000720:	4429      	add	r1, r5
 8000722:	1ac9      	subs	r1, r1, r3
 8000724:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000728:	e73b      	b.n	80005a2 <__udivmoddi4+0xfe>
 800072a:	4637      	mov	r7, r6
 800072c:	4630      	mov	r0, r6
 800072e:	e709      	b.n	8000544 <__udivmoddi4+0xa0>
 8000730:	4607      	mov	r7, r0
 8000732:	e6e7      	b.n	8000504 <__udivmoddi4+0x60>
 8000734:	4618      	mov	r0, r3
 8000736:	e6fb      	b.n	8000530 <__udivmoddi4+0x8c>
 8000738:	4541      	cmp	r1, r8
 800073a:	d2ab      	bcs.n	8000694 <__udivmoddi4+0x1f0>
 800073c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000740:	eb69 020e 	sbc.w	r2, r9, lr
 8000744:	3801      	subs	r0, #1
 8000746:	4613      	mov	r3, r2
 8000748:	e7a4      	b.n	8000694 <__udivmoddi4+0x1f0>
 800074a:	4660      	mov	r0, ip
 800074c:	e7e9      	b.n	8000722 <__udivmoddi4+0x27e>
 800074e:	4618      	mov	r0, r3
 8000750:	e795      	b.n	800067e <__udivmoddi4+0x1da>
 8000752:	4667      	mov	r7, ip
 8000754:	e7d1      	b.n	80006fa <__udivmoddi4+0x256>
 8000756:	4681      	mov	r9, r0
 8000758:	e77c      	b.n	8000654 <__udivmoddi4+0x1b0>
 800075a:	3802      	subs	r0, #2
 800075c:	442c      	add	r4, r5
 800075e:	e747      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000760:	f1ac 0c02 	sub.w	ip, ip, #2
 8000764:	442b      	add	r3, r5
 8000766:	e72f      	b.n	80005c8 <__udivmoddi4+0x124>
 8000768:	4638      	mov	r0, r7
 800076a:	e708      	b.n	800057e <__udivmoddi4+0xda>
 800076c:	4637      	mov	r7, r6
 800076e:	e6e9      	b.n	8000544 <__udivmoddi4+0xa0>

08000770 <__aeabi_idiv0>:
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop

08000774 <__aeabi_drsub>:
 8000774:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000778:	e002      	b.n	8000780 <__adddf3>
 800077a:	bf00      	nop

0800077c <__aeabi_dsub>:
 800077c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000780 <__adddf3>:
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000786:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800078a:	ea94 0f05 	teq	r4, r5
 800078e:	bf08      	it	eq
 8000790:	ea90 0f02 	teqeq	r0, r2
 8000794:	bf1f      	itttt	ne
 8000796:	ea54 0c00 	orrsne.w	ip, r4, r0
 800079a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800079e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80007a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007a6:	f000 80e2 	beq.w	800096e <__adddf3+0x1ee>
 80007aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80007ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80007b2:	bfb8      	it	lt
 80007b4:	426d      	neglt	r5, r5
 80007b6:	dd0c      	ble.n	80007d2 <__adddf3+0x52>
 80007b8:	442c      	add	r4, r5
 80007ba:	ea80 0202 	eor.w	r2, r0, r2
 80007be:	ea81 0303 	eor.w	r3, r1, r3
 80007c2:	ea82 0000 	eor.w	r0, r2, r0
 80007c6:	ea83 0101 	eor.w	r1, r3, r1
 80007ca:	ea80 0202 	eor.w	r2, r0, r2
 80007ce:	ea81 0303 	eor.w	r3, r1, r3
 80007d2:	2d36      	cmp	r5, #54	; 0x36
 80007d4:	bf88      	it	hi
 80007d6:	bd30      	pophi	{r4, r5, pc}
 80007d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80007e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80007e8:	d002      	beq.n	80007f0 <__adddf3+0x70>
 80007ea:	4240      	negs	r0, r0
 80007ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80007f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80007fc:	d002      	beq.n	8000804 <__adddf3+0x84>
 80007fe:	4252      	negs	r2, r2
 8000800:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000804:	ea94 0f05 	teq	r4, r5
 8000808:	f000 80a7 	beq.w	800095a <__adddf3+0x1da>
 800080c:	f1a4 0401 	sub.w	r4, r4, #1
 8000810:	f1d5 0e20 	rsbs	lr, r5, #32
 8000814:	db0d      	blt.n	8000832 <__adddf3+0xb2>
 8000816:	fa02 fc0e 	lsl.w	ip, r2, lr
 800081a:	fa22 f205 	lsr.w	r2, r2, r5
 800081e:	1880      	adds	r0, r0, r2
 8000820:	f141 0100 	adc.w	r1, r1, #0
 8000824:	fa03 f20e 	lsl.w	r2, r3, lr
 8000828:	1880      	adds	r0, r0, r2
 800082a:	fa43 f305 	asr.w	r3, r3, r5
 800082e:	4159      	adcs	r1, r3
 8000830:	e00e      	b.n	8000850 <__adddf3+0xd0>
 8000832:	f1a5 0520 	sub.w	r5, r5, #32
 8000836:	f10e 0e20 	add.w	lr, lr, #32
 800083a:	2a01      	cmp	r2, #1
 800083c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000840:	bf28      	it	cs
 8000842:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000846:	fa43 f305 	asr.w	r3, r3, r5
 800084a:	18c0      	adds	r0, r0, r3
 800084c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000850:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000854:	d507      	bpl.n	8000866 <__adddf3+0xe6>
 8000856:	f04f 0e00 	mov.w	lr, #0
 800085a:	f1dc 0c00 	rsbs	ip, ip, #0
 800085e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000862:	eb6e 0101 	sbc.w	r1, lr, r1
 8000866:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800086a:	d31b      	bcc.n	80008a4 <__adddf3+0x124>
 800086c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000870:	d30c      	bcc.n	800088c <__adddf3+0x10c>
 8000872:	0849      	lsrs	r1, r1, #1
 8000874:	ea5f 0030 	movs.w	r0, r0, rrx
 8000878:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800087c:	f104 0401 	add.w	r4, r4, #1
 8000880:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000884:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000888:	f080 809a 	bcs.w	80009c0 <__adddf3+0x240>
 800088c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000890:	bf08      	it	eq
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	ea41 0105 	orr.w	r1, r1, r5
 80008a2:	bd30      	pop	{r4, r5, pc}
 80008a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80008a8:	4140      	adcs	r0, r0
 80008aa:	eb41 0101 	adc.w	r1, r1, r1
 80008ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b2:	f1a4 0401 	sub.w	r4, r4, #1
 80008b6:	d1e9      	bne.n	800088c <__adddf3+0x10c>
 80008b8:	f091 0f00 	teq	r1, #0
 80008bc:	bf04      	itt	eq
 80008be:	4601      	moveq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	fab1 f381 	clz	r3, r1
 80008c6:	bf08      	it	eq
 80008c8:	3320      	addeq	r3, #32
 80008ca:	f1a3 030b 	sub.w	r3, r3, #11
 80008ce:	f1b3 0220 	subs.w	r2, r3, #32
 80008d2:	da0c      	bge.n	80008ee <__adddf3+0x16e>
 80008d4:	320c      	adds	r2, #12
 80008d6:	dd08      	ble.n	80008ea <__adddf3+0x16a>
 80008d8:	f102 0c14 	add.w	ip, r2, #20
 80008dc:	f1c2 020c 	rsb	r2, r2, #12
 80008e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80008e4:	fa21 f102 	lsr.w	r1, r1, r2
 80008e8:	e00c      	b.n	8000904 <__adddf3+0x184>
 80008ea:	f102 0214 	add.w	r2, r2, #20
 80008ee:	bfd8      	it	le
 80008f0:	f1c2 0c20 	rsble	ip, r2, #32
 80008f4:	fa01 f102 	lsl.w	r1, r1, r2
 80008f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80008fc:	bfdc      	itt	le
 80008fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000902:	4090      	lslle	r0, r2
 8000904:	1ae4      	subs	r4, r4, r3
 8000906:	bfa2      	ittt	ge
 8000908:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800090c:	4329      	orrge	r1, r5
 800090e:	bd30      	popge	{r4, r5, pc}
 8000910:	ea6f 0404 	mvn.w	r4, r4
 8000914:	3c1f      	subs	r4, #31
 8000916:	da1c      	bge.n	8000952 <__adddf3+0x1d2>
 8000918:	340c      	adds	r4, #12
 800091a:	dc0e      	bgt.n	800093a <__adddf3+0x1ba>
 800091c:	f104 0414 	add.w	r4, r4, #20
 8000920:	f1c4 0220 	rsb	r2, r4, #32
 8000924:	fa20 f004 	lsr.w	r0, r0, r4
 8000928:	fa01 f302 	lsl.w	r3, r1, r2
 800092c:	ea40 0003 	orr.w	r0, r0, r3
 8000930:	fa21 f304 	lsr.w	r3, r1, r4
 8000934:	ea45 0103 	orr.w	r1, r5, r3
 8000938:	bd30      	pop	{r4, r5, pc}
 800093a:	f1c4 040c 	rsb	r4, r4, #12
 800093e:	f1c4 0220 	rsb	r2, r4, #32
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	fa01 f304 	lsl.w	r3, r1, r4
 800094a:	ea40 0003 	orr.w	r0, r0, r3
 800094e:	4629      	mov	r1, r5
 8000950:	bd30      	pop	{r4, r5, pc}
 8000952:	fa21 f004 	lsr.w	r0, r1, r4
 8000956:	4629      	mov	r1, r5
 8000958:	bd30      	pop	{r4, r5, pc}
 800095a:	f094 0f00 	teq	r4, #0
 800095e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000962:	bf06      	itte	eq
 8000964:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000968:	3401      	addeq	r4, #1
 800096a:	3d01      	subne	r5, #1
 800096c:	e74e      	b.n	800080c <__adddf3+0x8c>
 800096e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000972:	bf18      	it	ne
 8000974:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000978:	d029      	beq.n	80009ce <__adddf3+0x24e>
 800097a:	ea94 0f05 	teq	r4, r5
 800097e:	bf08      	it	eq
 8000980:	ea90 0f02 	teqeq	r0, r2
 8000984:	d005      	beq.n	8000992 <__adddf3+0x212>
 8000986:	ea54 0c00 	orrs.w	ip, r4, r0
 800098a:	bf04      	itt	eq
 800098c:	4619      	moveq	r1, r3
 800098e:	4610      	moveq	r0, r2
 8000990:	bd30      	pop	{r4, r5, pc}
 8000992:	ea91 0f03 	teq	r1, r3
 8000996:	bf1e      	ittt	ne
 8000998:	2100      	movne	r1, #0
 800099a:	2000      	movne	r0, #0
 800099c:	bd30      	popne	{r4, r5, pc}
 800099e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80009a2:	d105      	bne.n	80009b0 <__adddf3+0x230>
 80009a4:	0040      	lsls	r0, r0, #1
 80009a6:	4149      	adcs	r1, r1
 80009a8:	bf28      	it	cs
 80009aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80009ae:	bd30      	pop	{r4, r5, pc}
 80009b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80009b4:	bf3c      	itt	cc
 80009b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80009ba:	bd30      	popcc	{r4, r5, pc}
 80009bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80009c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	bd30      	pop	{r4, r5, pc}
 80009ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80009d2:	bf1a      	itte	ne
 80009d4:	4619      	movne	r1, r3
 80009d6:	4610      	movne	r0, r2
 80009d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80009dc:	bf1c      	itt	ne
 80009de:	460b      	movne	r3, r1
 80009e0:	4602      	movne	r2, r0
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	bf06      	itte	eq
 80009e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80009ec:	ea91 0f03 	teqeq	r1, r3
 80009f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80009f4:	bd30      	pop	{r4, r5, pc}
 80009f6:	bf00      	nop

080009f8 <__aeabi_ui2d>:
 80009f8:	f090 0f00 	teq	r0, #0
 80009fc:	bf04      	itt	eq
 80009fe:	2100      	moveq	r1, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	b530      	push	{r4, r5, lr}
 8000a04:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a08:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a0c:	f04f 0500 	mov.w	r5, #0
 8000a10:	f04f 0100 	mov.w	r1, #0
 8000a14:	e750      	b.n	80008b8 <__adddf3+0x138>
 8000a16:	bf00      	nop

08000a18 <__aeabi_i2d>:
 8000a18:	f090 0f00 	teq	r0, #0
 8000a1c:	bf04      	itt	eq
 8000a1e:	2100      	moveq	r1, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	b530      	push	{r4, r5, lr}
 8000a24:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a28:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000a30:	bf48      	it	mi
 8000a32:	4240      	negmi	r0, r0
 8000a34:	f04f 0100 	mov.w	r1, #0
 8000a38:	e73e      	b.n	80008b8 <__adddf3+0x138>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_f2d>:
 8000a3c:	0042      	lsls	r2, r0, #1
 8000a3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000a42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a46:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000a4a:	bf1f      	itttt	ne
 8000a4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000a50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000a54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000a58:	4770      	bxne	lr
 8000a5a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000a5e:	bf08      	it	eq
 8000a60:	4770      	bxeq	lr
 8000a62:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000a66:	bf04      	itt	eq
 8000a68:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000a6c:	4770      	bxeq	lr
 8000a6e:	b530      	push	{r4, r5, lr}
 8000a70:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000a74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a7c:	e71c      	b.n	80008b8 <__adddf3+0x138>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_ul2d>:
 8000a80:	ea50 0201 	orrs.w	r2, r0, r1
 8000a84:	bf08      	it	eq
 8000a86:	4770      	bxeq	lr
 8000a88:	b530      	push	{r4, r5, lr}
 8000a8a:	f04f 0500 	mov.w	r5, #0
 8000a8e:	e00a      	b.n	8000aa6 <__aeabi_l2d+0x16>

08000a90 <__aeabi_l2d>:
 8000a90:	ea50 0201 	orrs.w	r2, r0, r1
 8000a94:	bf08      	it	eq
 8000a96:	4770      	bxeq	lr
 8000a98:	b530      	push	{r4, r5, lr}
 8000a9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000a9e:	d502      	bpl.n	8000aa6 <__aeabi_l2d+0x16>
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aa6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000aaa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000aae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000ab2:	f43f aed8 	beq.w	8000866 <__adddf3+0xe6>
 8000ab6:	f04f 0203 	mov.w	r2, #3
 8000aba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000abe:	bf18      	it	ne
 8000ac0:	3203      	addne	r2, #3
 8000ac2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000ac6:	bf18      	it	ne
 8000ac8:	3203      	addne	r2, #3
 8000aca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000ace:	f1c2 0320 	rsb	r3, r2, #32
 8000ad2:	fa00 fc03 	lsl.w	ip, r0, r3
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	fa01 fe03 	lsl.w	lr, r1, r3
 8000ade:	ea40 000e 	orr.w	r0, r0, lr
 8000ae2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ae6:	4414      	add	r4, r2
 8000ae8:	e6bd      	b.n	8000866 <__adddf3+0xe6>
 8000aea:	bf00      	nop

08000aec <__aeabi_dmul>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000af2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000af6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000afa:	bf1d      	ittte	ne
 8000afc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b00:	ea94 0f0c 	teqne	r4, ip
 8000b04:	ea95 0f0c 	teqne	r5, ip
 8000b08:	f000 f8de 	bleq	8000cc8 <__aeabi_dmul+0x1dc>
 8000b0c:	442c      	add	r4, r5
 8000b0e:	ea81 0603 	eor.w	r6, r1, r3
 8000b12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000b16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000b1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000b1e:	bf18      	it	ne
 8000b20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000b24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b2c:	d038      	beq.n	8000ba0 <__aeabi_dmul+0xb4>
 8000b2e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000b32:	f04f 0500 	mov.w	r5, #0
 8000b36:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000b3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000b3e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000b42:	f04f 0600 	mov.w	r6, #0
 8000b46:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000b4a:	f09c 0f00 	teq	ip, #0
 8000b4e:	bf18      	it	ne
 8000b50:	f04e 0e01 	orrne.w	lr, lr, #1
 8000b54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000b58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000b5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000b60:	d204      	bcs.n	8000b6c <__aeabi_dmul+0x80>
 8000b62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000b66:	416d      	adcs	r5, r5
 8000b68:	eb46 0606 	adc.w	r6, r6, r6
 8000b6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000b70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000b74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000b78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000b7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000b80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b84:	bf88      	it	hi
 8000b86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b8a:	d81e      	bhi.n	8000bca <__aeabi_dmul+0xde>
 8000b8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000b96:	f150 0000 	adcs.w	r0, r0, #0
 8000b9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000ba4:	ea46 0101 	orr.w	r1, r6, r1
 8000ba8:	ea40 0002 	orr.w	r0, r0, r2
 8000bac:	ea81 0103 	eor.w	r1, r1, r3
 8000bb0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000bb4:	bfc2      	ittt	gt
 8000bb6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bbe:	bd70      	popgt	{r4, r5, r6, pc}
 8000bc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc4:	f04f 0e00 	mov.w	lr, #0
 8000bc8:	3c01      	subs	r4, #1
 8000bca:	f300 80ab 	bgt.w	8000d24 <__aeabi_dmul+0x238>
 8000bce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000bd2:	bfde      	ittt	le
 8000bd4:	2000      	movle	r0, #0
 8000bd6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000bda:	bd70      	pople	{r4, r5, r6, pc}
 8000bdc:	f1c4 0400 	rsb	r4, r4, #0
 8000be0:	3c20      	subs	r4, #32
 8000be2:	da35      	bge.n	8000c50 <__aeabi_dmul+0x164>
 8000be4:	340c      	adds	r4, #12
 8000be6:	dc1b      	bgt.n	8000c20 <__aeabi_dmul+0x134>
 8000be8:	f104 0414 	add.w	r4, r4, #20
 8000bec:	f1c4 0520 	rsb	r5, r4, #32
 8000bf0:	fa00 f305 	lsl.w	r3, r0, r5
 8000bf4:	fa20 f004 	lsr.w	r0, r0, r4
 8000bf8:	fa01 f205 	lsl.w	r2, r1, r5
 8000bfc:	ea40 0002 	orr.w	r0, r0, r2
 8000c00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000c04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000c08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c0c:	fa21 f604 	lsr.w	r6, r1, r4
 8000c10:	eb42 0106 	adc.w	r1, r2, r6
 8000c14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c18:	bf08      	it	eq
 8000c1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
 8000c20:	f1c4 040c 	rsb	r4, r4, #12
 8000c24:	f1c4 0520 	rsb	r5, r4, #32
 8000c28:	fa00 f304 	lsl.w	r3, r0, r4
 8000c2c:	fa20 f005 	lsr.w	r0, r0, r5
 8000c30:	fa01 f204 	lsl.w	r2, r1, r4
 8000c34:	ea40 0002 	orr.w	r0, r0, r2
 8000c38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c40:	f141 0100 	adc.w	r1, r1, #0
 8000c44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c48:	bf08      	it	eq
 8000c4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	f1c4 0520 	rsb	r5, r4, #32
 8000c54:	fa00 f205 	lsl.w	r2, r0, r5
 8000c58:	ea4e 0e02 	orr.w	lr, lr, r2
 8000c5c:	fa20 f304 	lsr.w	r3, r0, r4
 8000c60:	fa01 f205 	lsl.w	r2, r1, r5
 8000c64:	ea43 0302 	orr.w	r3, r3, r2
 8000c68:	fa21 f004 	lsr.w	r0, r1, r4
 8000c6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c70:	fa21 f204 	lsr.w	r2, r1, r4
 8000c74:	ea20 0002 	bic.w	r0, r0, r2
 8000c78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000c7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c80:	bf08      	it	eq
 8000c82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	f094 0f00 	teq	r4, #0
 8000c8c:	d10f      	bne.n	8000cae <__aeabi_dmul+0x1c2>
 8000c8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000c92:	0040      	lsls	r0, r0, #1
 8000c94:	eb41 0101 	adc.w	r1, r1, r1
 8000c98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c9c:	bf08      	it	eq
 8000c9e:	3c01      	subeq	r4, #1
 8000ca0:	d0f7      	beq.n	8000c92 <__aeabi_dmul+0x1a6>
 8000ca2:	ea41 0106 	orr.w	r1, r1, r6
 8000ca6:	f095 0f00 	teq	r5, #0
 8000caa:	bf18      	it	ne
 8000cac:	4770      	bxne	lr
 8000cae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	eb43 0303 	adc.w	r3, r3, r3
 8000cb8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000cbc:	bf08      	it	eq
 8000cbe:	3d01      	subeq	r5, #1
 8000cc0:	d0f7      	beq.n	8000cb2 <__aeabi_dmul+0x1c6>
 8000cc2:	ea43 0306 	orr.w	r3, r3, r6
 8000cc6:	4770      	bx	lr
 8000cc8:	ea94 0f0c 	teq	r4, ip
 8000ccc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000cd0:	bf18      	it	ne
 8000cd2:	ea95 0f0c 	teqne	r5, ip
 8000cd6:	d00c      	beq.n	8000cf2 <__aeabi_dmul+0x206>
 8000cd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cdc:	bf18      	it	ne
 8000cde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ce2:	d1d1      	bne.n	8000c88 <__aeabi_dmul+0x19c>
 8000ce4:	ea81 0103 	eor.w	r1, r1, r3
 8000ce8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cec:	f04f 0000 	mov.w	r0, #0
 8000cf0:	bd70      	pop	{r4, r5, r6, pc}
 8000cf2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cf6:	bf06      	itte	eq
 8000cf8:	4610      	moveq	r0, r2
 8000cfa:	4619      	moveq	r1, r3
 8000cfc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d00:	d019      	beq.n	8000d36 <__aeabi_dmul+0x24a>
 8000d02:	ea94 0f0c 	teq	r4, ip
 8000d06:	d102      	bne.n	8000d0e <__aeabi_dmul+0x222>
 8000d08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000d0c:	d113      	bne.n	8000d36 <__aeabi_dmul+0x24a>
 8000d0e:	ea95 0f0c 	teq	r5, ip
 8000d12:	d105      	bne.n	8000d20 <__aeabi_dmul+0x234>
 8000d14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000d18:	bf1c      	itt	ne
 8000d1a:	4610      	movne	r0, r2
 8000d1c:	4619      	movne	r1, r3
 8000d1e:	d10a      	bne.n	8000d36 <__aeabi_dmul+0x24a>
 8000d20:	ea81 0103 	eor.w	r1, r1, r3
 8000d24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000d2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000d30:	f04f 0000 	mov.w	r0, #0
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
 8000d36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000d3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}

08000d40 <__aeabi_ddiv>:
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000d4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000d4e:	bf1d      	ittte	ne
 8000d50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000d54:	ea94 0f0c 	teqne	r4, ip
 8000d58:	ea95 0f0c 	teqne	r5, ip
 8000d5c:	f000 f8a7 	bleq	8000eae <__aeabi_ddiv+0x16e>
 8000d60:	eba4 0405 	sub.w	r4, r4, r5
 8000d64:	ea81 0e03 	eor.w	lr, r1, r3
 8000d68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000d70:	f000 8088 	beq.w	8000e84 <__aeabi_ddiv+0x144>
 8000d74:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000d78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000d7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000d80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000d84:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000d88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000d8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000d90:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000d94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000d98:	429d      	cmp	r5, r3
 8000d9a:	bf08      	it	eq
 8000d9c:	4296      	cmpeq	r6, r2
 8000d9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000da2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000da6:	d202      	bcs.n	8000dae <__aeabi_ddiv+0x6e>
 8000da8:	085b      	lsrs	r3, r3, #1
 8000daa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dae:	1ab6      	subs	r6, r6, r2
 8000db0:	eb65 0503 	sbc.w	r5, r5, r3
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000dbe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000dc2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000dc6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000dca:	bf22      	ittt	cs
 8000dcc:	1ab6      	subcs	r6, r6, r2
 8000dce:	4675      	movcs	r5, lr
 8000dd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dda:	ebb6 0e02 	subs.w	lr, r6, r2
 8000dde:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000de2:	bf22      	ittt	cs
 8000de4:	1ab6      	subcs	r6, r6, r2
 8000de6:	4675      	movcs	r5, lr
 8000de8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dec:	085b      	lsrs	r3, r3, #1
 8000dee:	ea4f 0232 	mov.w	r2, r2, rrx
 8000df2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000df6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000dfa:	bf22      	ittt	cs
 8000dfc:	1ab6      	subcs	r6, r6, r2
 8000dfe:	4675      	movcs	r5, lr
 8000e00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e04:	085b      	lsrs	r3, r3, #1
 8000e06:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e12:	bf22      	ittt	cs
 8000e14:	1ab6      	subcs	r6, r6, r2
 8000e16:	4675      	movcs	r5, lr
 8000e18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e1c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000e20:	d018      	beq.n	8000e54 <__aeabi_ddiv+0x114>
 8000e22:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000e26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000e2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000e2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000e32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000e36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000e3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000e3e:	d1c0      	bne.n	8000dc2 <__aeabi_ddiv+0x82>
 8000e40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e44:	d10b      	bne.n	8000e5e <__aeabi_ddiv+0x11e>
 8000e46:	ea41 0100 	orr.w	r1, r1, r0
 8000e4a:	f04f 0000 	mov.w	r0, #0
 8000e4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000e52:	e7b6      	b.n	8000dc2 <__aeabi_ddiv+0x82>
 8000e54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e58:	bf04      	itt	eq
 8000e5a:	4301      	orreq	r1, r0
 8000e5c:	2000      	moveq	r0, #0
 8000e5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000e62:	bf88      	it	hi
 8000e64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000e68:	f63f aeaf 	bhi.w	8000bca <__aeabi_dmul+0xde>
 8000e6c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000e70:	bf04      	itt	eq
 8000e72:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000e76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000e7a:	f150 0000 	adcs.w	r0, r0, #0
 8000e7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000e88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000e8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000e90:	bfc2      	ittt	gt
 8000e92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000e96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000e9a:	bd70      	popgt	{r4, r5, r6, pc}
 8000e9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ea0:	f04f 0e00 	mov.w	lr, #0
 8000ea4:	3c01      	subs	r4, #1
 8000ea6:	e690      	b.n	8000bca <__aeabi_dmul+0xde>
 8000ea8:	ea45 0e06 	orr.w	lr, r5, r6
 8000eac:	e68d      	b.n	8000bca <__aeabi_dmul+0xde>
 8000eae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000eb2:	ea94 0f0c 	teq	r4, ip
 8000eb6:	bf08      	it	eq
 8000eb8:	ea95 0f0c 	teqeq	r5, ip
 8000ebc:	f43f af3b 	beq.w	8000d36 <__aeabi_dmul+0x24a>
 8000ec0:	ea94 0f0c 	teq	r4, ip
 8000ec4:	d10a      	bne.n	8000edc <__aeabi_ddiv+0x19c>
 8000ec6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000eca:	f47f af34 	bne.w	8000d36 <__aeabi_dmul+0x24a>
 8000ece:	ea95 0f0c 	teq	r5, ip
 8000ed2:	f47f af25 	bne.w	8000d20 <__aeabi_dmul+0x234>
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	e72c      	b.n	8000d36 <__aeabi_dmul+0x24a>
 8000edc:	ea95 0f0c 	teq	r5, ip
 8000ee0:	d106      	bne.n	8000ef0 <__aeabi_ddiv+0x1b0>
 8000ee2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ee6:	f43f aefd 	beq.w	8000ce4 <__aeabi_dmul+0x1f8>
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	e722      	b.n	8000d36 <__aeabi_dmul+0x24a>
 8000ef0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ef4:	bf18      	it	ne
 8000ef6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000efa:	f47f aec5 	bne.w	8000c88 <__aeabi_dmul+0x19c>
 8000efe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000f02:	f47f af0d 	bne.w	8000d20 <__aeabi_dmul+0x234>
 8000f06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000f0a:	f47f aeeb 	bne.w	8000ce4 <__aeabi_dmul+0x1f8>
 8000f0e:	e712      	b.n	8000d36 <__aeabi_dmul+0x24a>

08000f10 <__aeabi_d2uiz>:
 8000f10:	004a      	lsls	r2, r1, #1
 8000f12:	d211      	bcs.n	8000f38 <__aeabi_d2uiz+0x28>
 8000f14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f18:	d211      	bcs.n	8000f3e <__aeabi_d2uiz+0x2e>
 8000f1a:	d50d      	bpl.n	8000f38 <__aeabi_d2uiz+0x28>
 8000f1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f24:	d40e      	bmi.n	8000f44 <__aeabi_d2uiz+0x34>
 8000f26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f32:	fa23 f002 	lsr.w	r0, r3, r2
 8000f36:	4770      	bx	lr
 8000f38:	f04f 0000 	mov.w	r0, #0
 8000f3c:	4770      	bx	lr
 8000f3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f42:	d102      	bne.n	8000f4a <__aeabi_d2uiz+0x3a>
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	4770      	bx	lr
 8000f4a:	f04f 0000 	mov.w	r0, #0
 8000f4e:	4770      	bx	lr

08000f50 <uDelayTim1>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "hcSensor.h"

void uDelayTim1(uint64_t uSec)
{
 8000f50:	b490      	push	{r4, r7}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	e9c7 0100 	strd	r0, r1, [r7]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <uDelayTim1+0x38>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < uSec);
 8000f62:	bf00      	nop
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <uDelayTim1+0x38>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f74:	42a2      	cmp	r2, r4
 8000f76:	bf08      	it	eq
 8000f78:	4299      	cmpeq	r1, r3
 8000f7a:	d3f3      	bcc.n	8000f64 <uDelayTim1+0x14>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc90      	pop	{r4, r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20001918 	.word	0x20001918

08000f8c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f8c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	const float soundSpeed = 0.0343;
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000f98:	60fb      	str	r3, [r7, #12]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7f1b      	ldrb	r3, [r3, #28]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	f040 80a1 	bne.w	80010e6 <HAL_TIM_IC_CaptureCallback+0x15a>
	{
		if(waitOnFallingEdge==0)
 8000fa4:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d11d      	bne.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0x5c>
		{
			valueRisingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fac:	2100      	movs	r1, #0
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f004 ff70 	bl	8005e94 <HAL_TIM_ReadCapturedValue>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f04f 0400 	mov.w	r4, #0
 8000fba:	4a4f      	ldr	r2, [pc, #316]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000fbc:	e9c2 3400 	strd	r3, r4, [r2]
			waitOnFallingEdge = 1;
 8000fc0:	4b4c      	ldr	r3, [pc, #304]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 020a 	bic.w	r2, r2, #10
 8000fd4:	621a      	str	r2, [r3, #32]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6a1a      	ldr	r2, [r3, #32]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0202 	orr.w	r2, r2, #2
 8000fe4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);

		}
	}

}
 8000fe6:	e07e      	b.n	80010e6 <HAL_TIM_IC_CaptureCallback+0x15a>
		else if (waitOnFallingEdge == 1)
 8000fe8:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d17a      	bne.n	80010e6 <HAL_TIM_IC_CaptureCallback+0x15a>
			valueFallingEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f004 ff4e 	bl	8005e94 <HAL_TIM_ReadCapturedValue>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f04f 0400 	mov.w	r4, #0
 8000ffe:	4a3f      	ldr	r2, [pc, #252]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x170>)
 8001000:	e9c2 3400 	strd	r3, r4, [r2]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2200      	movs	r2, #0
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
			if(valueFallingEdge >= valueRisingEdge)
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x170>)
 800100e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001012:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001014:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001018:	42a2      	cmp	r2, r4
 800101a:	bf08      	it	eq
 800101c:	4299      	cmpeq	r1, r3
 800101e:	d30f      	bcc.n	8001040 <HAL_TIM_IC_CaptureCallback+0xb4>
				measureTime = valueFallingEdge - valueRisingEdge;
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x170>)
 8001022:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001026:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001028:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800102c:	460b      	mov	r3, r1
 800102e:	4614      	mov	r4, r2
 8001030:	ebb3 030b 	subs.w	r3, r3, fp
 8001034:	eb64 040c 	sbc.w	r4, r4, ip
 8001038:	4a31      	ldr	r2, [pc, #196]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x174>)
 800103a:	e9c2 3400 	strd	r3, r4, [r2]
 800103e:	e01f      	b.n	8001080 <HAL_TIM_IC_CaptureCallback+0xf4>
			else if (valueRisingEdge > valueFallingEdge)
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001042:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001046:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x170>)
 8001048:	e9d2 1200 	ldrd	r1, r2, [r2]
 800104c:	42a2      	cmp	r2, r4
 800104e:	bf08      	it	eq
 8001050:	4299      	cmpeq	r1, r3
 8001052:	d215      	bcs.n	8001080 <HAL_TIM_IC_CaptureCallback+0xf4>
				measureTime = (0xffff - valueRisingEdge) + valueFallingEdge;
 8001054:	4b29      	ldr	r3, [pc, #164]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x170>)
 8001056:	e9d3 1200 	ldrd	r1, r2, [r3]
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800105c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001060:	1ac9      	subs	r1, r1, r3
 8001062:	eb62 0204 	sbc.w	r2, r2, r4
 8001066:	468b      	mov	fp, r1
 8001068:	4694      	mov	ip, r2
 800106a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	eb1b 0301 	adds.w	r3, fp, r1
 8001076:	eb4c 0402 	adc.w	r4, ip, r2
 800107a:	4a21      	ldr	r2, [pc, #132]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x174>)
 800107c:	e9c2 3400 	strd	r3, r4, [r2]
			distance = measureTime * soundSpeed/2;
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001082:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001086:	4618      	mov	r0, r3
 8001088:	4621      	mov	r1, r4
 800108a:	f7ff f989 	bl	80003a0 <__aeabi_ul2f>
 800108e:	ee07 0a10 	vmov	s14, r0
 8001092:	edd7 7a03 	vldr	s15, [r7, #12]
 8001096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800109e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010a2:	ee16 0a90 	vmov	r0, s13
 80010a6:	f7ff f9d9 	bl	800045c <__aeabi_f2ulz>
 80010aa:	4603      	mov	r3, r0
 80010ac:	460c      	mov	r4, r1
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <HAL_TIM_IC_CaptureCallback+0x178>)
 80010b0:	e9c2 3400 	strd	r3, r4, [r2]
			waitOnFallingEdge = 0;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_TIM_IC_CaptureCallback+0x168>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6a1a      	ldr	r2, [r3, #32]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 020a 	bic.w	r2, r2, #10
 80010c8:	621a      	str	r2, [r3, #32]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6a12      	ldr	r2, [r2, #32]
 80010d4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0202 	bic.w	r2, r2, #2
 80010e4:	60da      	str	r2, [r3, #12]
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80010f0:	3d0c7e28 	.word	0x3d0c7e28
 80010f4:	200018f8 	.word	0x200018f8
 80010f8:	20001968 	.word	0x20001968
 80010fc:	20001910 	.word	0x20001910
 8001100:	20001978 	.word	0x20001978
 8001104:	20001900 	.word	0x20001900
 8001108:	20001918 	.word	0x20001918

0800110c <triggerMeasureCenter>:

uint64_t triggerMeasureCenter(void)
{
 800110c:	b598      	push	{r3, r4, r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_CENTER, PIN_CENTER, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2108      	movs	r1, #8
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <triggerMeasureCenter+0x4c>)
 8001116:	f002 f8c1 	bl	800329c <HAL_GPIO_WritePin>
	uDelayTim1(10);
 800111a:	f04f 000a 	mov.w	r0, #10
 800111e:	f04f 0100 	mov.w	r1, #0
 8001122:	f7ff ff15 	bl	8000f50 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_CENTER, PIN_CENTER, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2108      	movs	r1, #8
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <triggerMeasureCenter+0x4c>)
 800112c:	f002 f8b6 	bl	800329c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <triggerMeasureCenter+0x50>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <triggerMeasureCenter+0x50>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0202 	orr.w	r2, r2, #2
 800113e:	60da      	str	r2, [r3, #12]

	distanceCenter = distance;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <triggerMeasureCenter+0x54>)
 8001142:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <triggerMeasureCenter+0x58>)
 8001148:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceCenter;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <triggerMeasureCenter+0x58>)
 800114e:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 8001152:	4618      	mov	r0, r3
 8001154:	4621      	mov	r1, r4
 8001156:	bd98      	pop	{r3, r4, r7, pc}
 8001158:	48001400 	.word	0x48001400
 800115c:	20001918 	.word	0x20001918
 8001160:	20001900 	.word	0x20001900
 8001164:	200018f0 	.word	0x200018f0

08001168 <triggerMeasureLeft>:

uint64_t triggerMeasureLeft(void)
{
 8001168:	b598      	push	{r3, r4, r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_LEFT, PIN_LEFT, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2120      	movs	r1, #32
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <triggerMeasureLeft+0x4c>)
 8001172:	f002 f893 	bl	800329c <HAL_GPIO_WritePin>
	uDelayTim1(10);
 8001176:	f04f 000a 	mov.w	r0, #10
 800117a:	f04f 0100 	mov.w	r1, #0
 800117e:	f7ff fee7 	bl	8000f50 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_LEFT, PIN_LEFT, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2120      	movs	r1, #32
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <triggerMeasureLeft+0x4c>)
 8001188:	f002 f888 	bl	800329c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <triggerMeasureLeft+0x50>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <triggerMeasureLeft+0x50>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0202 	orr.w	r2, r2, #2
 800119a:	60da      	str	r2, [r3, #12]

	distanceLeft = distance;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <triggerMeasureLeft+0x54>)
 800119e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <triggerMeasureLeft+0x58>)
 80011a4:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceLeft;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <triggerMeasureLeft+0x58>)
 80011aa:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	4621      	mov	r1, r4
 80011b2:	bd98      	pop	{r3, r4, r7, pc}
 80011b4:	48001400 	.word	0x48001400
 80011b8:	20001918 	.word	0x20001918
 80011bc:	20001900 	.word	0x20001900
 80011c0:	20001908 	.word	0x20001908

080011c4 <triggerMeasureRight>:

uint64_t triggerMeasureRight(void)
{
 80011c4:	b598      	push	{r3, r4, r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RIGHT, PIN_RIGHT, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	4810      	ldr	r0, [pc, #64]	; (8001210 <triggerMeasureRight+0x4c>)
 80011ce:	f002 f865 	bl	800329c <HAL_GPIO_WritePin>
	uDelayTim1(10);
 80011d2:	f04f 000a 	mov.w	r0, #10
 80011d6:	f04f 0100 	mov.w	r1, #0
 80011da:	f7ff feb9 	bl	8000f50 <uDelayTim1>
	HAL_GPIO_WritePin(PORT_RIGHT, PIN_RIGHT, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	480b      	ldr	r0, [pc, #44]	; (8001210 <triggerMeasureRight+0x4c>)
 80011e4:	f002 f85a 	bl	800329c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <triggerMeasureRight+0x50>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <triggerMeasureRight+0x50>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0202 	orr.w	r2, r2, #2
 80011f6:	60da      	str	r2, [r3, #12]

	distanceRight = distance;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <triggerMeasureRight+0x54>)
 80011fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <triggerMeasureRight+0x58>)
 8001200:	e9c2 3400 	strd	r3, r4, [r2]

	return distanceRight;
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <triggerMeasureRight+0x58>)
 8001206:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 800120a:	4618      	mov	r0, r3
 800120c:	4621      	mov	r1, r4
 800120e:	bd98      	pop	{r3, r4, r7, pc}
 8001210:	48001400 	.word	0x48001400
 8001214:	20001918 	.word	0x20001918
 8001218:	20001900 	.word	0x20001900
 800121c:	20001970 	.word	0x20001970

08001220 <lcdInit>:

uint8_t dotOrNot;


void lcdInit(struct lcdConf * lcd)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	uint64_t i;
	HAL_GPIO_WritePin(lcd->rst_port, lcd->rst_pin, GPIO_PIN_RESET);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6858      	ldr	r0, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7a1b      	ldrb	r3, [r3, #8]
 8001230:	b29b      	uxth	r3, r3
 8001232:	2200      	movs	r2, #0
 8001234:	4619      	mov	r1, r3
 8001236:	f002 f831 	bl	800329c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->rst_port, lcd->rst_pin, GPIO_PIN_SET);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6858      	ldr	r0, [r3, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7a1b      	ldrb	r3, [r3, #8]
 8001242:	b29b      	uxth	r3, r3
 8001244:	2201      	movs	r2, #1
 8001246:	4619      	mov	r1, r3
 8001248:	f002 f828 	bl	800329c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->bl_port, lcd->bl_pin, GPIO_PIN_SET);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6958      	ldr	r0, [r3, #20]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7e1b      	ldrb	r3, [r3, #24]
 8001254:	b29b      	uxth	r3, r3
 8001256:	2201      	movs	r2, #1
 8001258:	4619      	mov	r1, r3
 800125a:	f002 f81f 	bl	800329c <HAL_GPIO_WritePin>

	lcdCmdMode(lcd, 0x21);
 800125e:	2121      	movs	r1, #33	; 0x21
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f835 	bl	80012d0 <lcdCmdMode>
	lcdCmdMode(lcd, 0x04);
 8001266:	2104      	movs	r1, #4
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f831 	bl	80012d0 <lcdCmdMode>
	lcdCmdMode(lcd, 0x10 | 0x04);
 800126e:	2114      	movs	r1, #20
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f82d 	bl	80012d0 <lcdCmdMode>
	lcdCmdMode(lcd, 0x80 | 0x38);
 8001276:	21b8      	movs	r1, #184	; 0xb8
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f829 	bl	80012d0 <lcdCmdMode>
	lcdCmdMode(lcd, 0x20);
 800127e:	2120      	movs	r1, #32
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f825 	bl	80012d0 <lcdCmdMode>
	lcdCmdMode(lcd, 0x08 | 0x04);
 8001286:	210c      	movs	r1, #12
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f821 	bl	80012d0 <lcdCmdMode>

	for(i=0; i<348; i++)
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	f04f 0400 	mov.w	r4, #0
 8001296:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800129a:	e00a      	b.n	80012b2 <lcdInit+0x92>
	{
		lcdCmdMode(lcd, 0x00);
 800129c:	2100      	movs	r1, #0
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f816 	bl	80012d0 <lcdCmdMode>
	for(i=0; i<348; i++)
 80012a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012a8:	1c59      	adds	r1, r3, #1
 80012aa:	f144 0200 	adc.w	r2, r4, #0
 80012ae:	e9c7 1202 	strd	r1, r2, [r7, #8]
 80012b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012b6:	f240 115b 	movw	r1, #347	; 0x15b
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	42a2      	cmp	r2, r4
 80012c0:	bf08      	it	eq
 80012c2:	4299      	cmpeq	r1, r3
 80012c4:	d2ea      	bcs.n	800129c <lcdInit+0x7c>
	}
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd90      	pop	{r4, r7, pc}
	...

080012d0 <lcdCmdMode>:

void lcdCmdMode(struct lcdConf * lcd, uint8_t cmd)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->dc_port, lcd->dc_pin, GPIO_PIN_RESET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68d8      	ldr	r0, [r3, #12]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	f001 ffd6 	bl	800329c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_RESET);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69d8      	ldr	r0, [r3, #28]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7c1b      	ldrb	r3, [r3, #16]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	2200      	movs	r2, #0
 80012fc:	4619      	mov	r1, r3
 80012fe:	f001 ffcd 	bl	800329c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(lcd->spi, &cmd, 1, 100);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	1cf9      	adds	r1, r7, #3
 8001308:	2364      	movs	r3, #100	; 0x64
 800130a:	2201      	movs	r2, #1
 800130c:	f003 fed7 	bl	80050be <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_SET);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69d8      	ldr	r0, [r3, #28]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7c1b      	ldrb	r3, [r3, #16]
 8001318:	b29b      	uxth	r3, r3
 800131a:	2201      	movs	r2, #1
 800131c:	4619      	mov	r1, r3
 800131e:	f001 ffbd 	bl	800329c <HAL_GPIO_WritePin>

	if(cmd != 0x00 )
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <lcdCmdMode+0x64>
	{
		dotOrNot++;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <lcdCmdMode+0x6c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <lcdCmdMode+0x6c>)
 8001332:	701a      	strb	r2, [r3, #0]
	}
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20001982 	.word	0x20001982

08001340 <lcdDataMode>:

void lcdDataMode(struct lcdConf * lcd, uint8_t data)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->dc_port, lcd->dc_pin, GPIO_PIN_SET);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68d8      	ldr	r0, [r3, #12]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001356:	b29b      	uxth	r3, r3
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	f001 ff9e 	bl	800329c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_RESET);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69d8      	ldr	r0, [r3, #28]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7c1b      	ldrb	r3, [r3, #16]
 8001368:	b29b      	uxth	r3, r3
 800136a:	2200      	movs	r2, #0
 800136c:	4619      	mov	r1, r3
 800136e:	f001 ff95 	bl	800329c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(lcd->spi, &data, 1, 100);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	1cf9      	adds	r1, r7, #3
 8001378:	2364      	movs	r3, #100	; 0x64
 800137a:	2201      	movs	r2, #1
 800137c:	f003 fe9f 	bl	80050be <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(lcd->ce_port, lcd->ce_pin, GPIO_PIN_SET);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69d8      	ldr	r0, [r3, #28]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7c1b      	ldrb	r3, [r3, #16]
 8001388:	b29b      	uxth	r3, r3
 800138a:	2201      	movs	r2, #1
 800138c:	4619      	mov	r1, r3
 800138e:	f001 ff85 	bl	800329c <HAL_GPIO_WritePin>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <lcdSetPlace>:

void lcdSetPlace(struct lcdConf * lcd, enum displayDirection direction, uint8_t col, uint8_t row)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	4608      	mov	r0, r1
 80013a4:	4611      	mov	r1, r2
 80013a6:	461a      	mov	r2, r3
 80013a8:	4603      	mov	r3, r0
 80013aa:	70fb      	strb	r3, [r7, #3]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70bb      	strb	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
	if(direction == vertical)
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d104      	bne.n	80013c4 <lcdSetPlace+0x2a>
	{
		lcdCmdMode(lcd, 0x20 | 0x02);
 80013ba:	2122      	movs	r1, #34	; 0x22
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff87 	bl	80012d0 <lcdCmdMode>
 80013c2:	e003      	b.n	80013cc <lcdSetPlace+0x32>
	}
	else
	{
		lcdCmdMode(lcd, 0x20 | 0x00);
 80013c4:	2120      	movs	r1, #32
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff82 	bl	80012d0 <lcdCmdMode>
	}
	lcdCmdMode(lcd, 0x80 | col);
 80013cc:	78bb      	ldrb	r3, [r7, #2]
 80013ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff7a 	bl	80012d0 <lcdCmdMode>
	lcdCmdMode(lcd, 0x40 | row);
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff72 	bl	80012d0 <lcdCmdMode>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <lcdWelcome>:

void lcdWelcome(struct lcdConf  lcd)
{
 80013f4:	b084      	sub	sp, #16
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	f107 0c20 	add.w	ip, r7, #32
 8001400:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	lcdClearBuffer(&lcd);
 8001404:	f107 0020 	add.w	r0, r7, #32
 8001408:	f000 f8d3 	bl	80015b2 <lcdClearBuffer>
	lcdSetPlace(&lcd, horizontal, 0, 0);
 800140c:	2300      	movs	r3, #0
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	f107 0020 	add.w	r0, r7, #32
 8001416:	f7ff ffc0 	bl	800139a <lcdSetPlace>

	char layer1[] = "WITAMY";
 800141a:	4a30      	ldr	r2, [pc, #192]	; (80014dc <lcdWelcome+0xe8>)
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001424:	6018      	str	r0, [r3, #0]
 8001426:	3304      	adds	r3, #4
 8001428:	8019      	strh	r1, [r3, #0]
 800142a:	3302      	adds	r3, #2
 800142c:	0c0a      	lsrs	r2, r1, #16
 800142e:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[1][3]), layer1, strlen(layer1));
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe fee3 	bl	8000200 <strlen>
 800143a:	4602      	mov	r2, r0
 800143c:	f107 0110 	add.w	r1, r7, #16
 8001440:	f107 0352 	add.w	r3, r7, #82	; 0x52
 8001444:	4618      	mov	r0, r3
 8001446:	f008 fdb5 	bl	8009fb4 <memcpy>
	lcdReadBuffer(&lcd);
 800144a:	f107 0020 	add.w	r0, r7, #32
 800144e:	f000 f881 	bl	8001554 <lcdReadBuffer>

	char layer2[] = "W";
 8001452:	2357      	movs	r3, #87	; 0x57
 8001454:	81bb      	strh	r3, [r7, #12]

	memcpy(&(lcd.buffer[2][6]), layer2, strlen(layer2));
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe fed0 	bl	8000200 <strlen>
 8001460:	4602      	mov	r2, r0
 8001462:	f107 010c 	add.w	r1, r7, #12
 8001466:	f107 0363 	add.w	r3, r7, #99	; 0x63
 800146a:	4618      	mov	r0, r3
 800146c:	f008 fda2 	bl	8009fb4 <memcpy>
	lcdReadBuffer(&lcd);
 8001470:	f107 0020 	add.w	r0, r7, #32
 8001474:	f000 f86e 	bl	8001554 <lcdReadBuffer>

	char layer3[] = "IZER A";
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <lcdWelcome+0xec>)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001480:	6018      	str	r0, [r3, #0]
 8001482:	3304      	adds	r3, #4
 8001484:	8019      	strh	r1, [r3, #0]
 8001486:	3302      	adds	r3, #2
 8001488:	0c0a      	lsrs	r2, r1, #16
 800148a:	701a      	strb	r2, [r3, #0]

	memcpy(&(lcd.buffer[3][3]), layer3, strlen(layer3));
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe feb6 	bl	8000200 <strlen>
 8001494:	4602      	mov	r2, r0
 8001496:	1d39      	adds	r1, r7, #4
 8001498:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 800149c:	4618      	mov	r0, r3
 800149e:	f008 fd89 	bl	8009fb4 <memcpy>
	lcdReadBuffer(&lcd);
 80014a2:	f107 0020 	add.w	r0, r7, #32
 80014a6:	f000 f855 	bl	8001554 <lcdReadBuffer>

	char layer4[] = "({)";
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <lcdWelcome+0xf0>)
 80014ac:	603b      	str	r3, [r7, #0]

	memcpy(&(lcd.buffer[4][6]), layer4, strlen(layer4));
 80014ae:	463b      	mov	r3, r7
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fea5 	bl	8000200 <strlen>
 80014b6:	4602      	mov	r2, r0
 80014b8:	4639      	mov	r1, r7
 80014ba:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 80014be:	4618      	mov	r0, r3
 80014c0:	f008 fd78 	bl	8009fb4 <memcpy>
	lcdReadBuffer(&lcd);
 80014c4:	f107 0020 	add.w	r0, r7, #32
 80014c8:	f000 f844 	bl	8001554 <lcdReadBuffer>
}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014d6:	b004      	add	sp, #16
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	08009ff4 	.word	0x08009ff4
 80014e0:	08009ffc 	.word	0x08009ffc
 80014e4:	00297b28 	.word	0x00297b28

080014e8 <lcdMarkPrint>:


void lcdMarkPrint(struct lcdConf * lcd, char mark)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < 5; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e011      	b.n	800151e <lcdMarkPrint+0x36>
    {
    	lcdDataMode(lcd, display_font[mark - 0x20][i]);
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	f1a3 0220 	sub.w	r2, r3, #32
 8001500:	7bf9      	ldrb	r1, [r7, #15]
 8001502:	4812      	ldr	r0, [pc, #72]	; (800154c <lcdMarkPrint+0x64>)
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	4403      	add	r3, r0
 800150c:	440b      	add	r3, r1
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ff14 	bl	8001340 <lcdDataMode>
    for (uint8_t i = 0; i < 5; i++)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3301      	adds	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	2b04      	cmp	r3, #4
 8001522:	d9ea      	bls.n	80014fa <lcdMarkPrint+0x12>
    }
    if(dotOrNot != 0)
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <lcdMarkPrint+0x68>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <lcdMarkPrint+0x4e>
    {
    	lcdDataMode(lcd, 0x80);
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ff06 	bl	8001340 <lcdDataMode>
 8001534:	e003      	b.n	800153e <lcdMarkPrint+0x56>
    }
    else
    {
    	lcdDataMode(lcd, 0x00);
 8001536:	2100      	movs	r1, #0
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff01 	bl	8001340 <lcdDataMode>
    }
    dotOrNot = 0;
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <lcdMarkPrint+0x68>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	0800a1e8 	.word	0x0800a1e8
 8001550:	20001982 	.word	0x20001982

08001554 <lcdReadBuffer>:

void lcdReadBuffer(struct lcdConf * lcd)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	lcdSetPlace(lcd, horizontal, 0, 0);
 800155c:	2300      	movs	r3, #0
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff19 	bl	800139a <lcdSetPlace>

    for(uint8_t i=0; i<5; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e01a      	b.n	80015a4 <lcdReadBuffer+0x50>
        for(uint8_t j=0; j<14; j++)
 800156e:	2300      	movs	r3, #0
 8001570:	73bb      	strb	r3, [r7, #14]
 8001572:	e011      	b.n	8001598 <lcdReadBuffer+0x44>
        	lcdMarkPrint(lcd, lcd->buffer[i][j]);
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	7bb9      	ldrb	r1, [r7, #14]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4403      	add	r3, r0
 8001584:	440b      	add	r3, r1
 8001586:	3321      	adds	r3, #33	; 0x21
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffab 	bl	80014e8 <lcdMarkPrint>
        for(uint8_t j=0; j<14; j++)
 8001592:	7bbb      	ldrb	r3, [r7, #14]
 8001594:	3301      	adds	r3, #1
 8001596:	73bb      	strb	r3, [r7, #14]
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	2b0d      	cmp	r3, #13
 800159c:	d9ea      	bls.n	8001574 <lcdReadBuffer+0x20>
    for(uint8_t i=0; i<5; i++)
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3301      	adds	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d9e1      	bls.n	800156e <lcdReadBuffer+0x1a>
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <lcdClearBuffer>:

void lcdClearBuffer(struct lcdConf * lcd)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
    for(uint8_t i=0; i<6; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e017      	b.n	80015f0 <lcdClearBuffer+0x3e>
        for(uint8_t j=0; j<14; j++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	73bb      	strb	r3, [r7, #14]
 80015c4:	e00e      	b.n	80015e4 <lcdClearBuffer+0x32>
        	lcd->buffer[i][j] = ' ';
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	7bb9      	ldrb	r1, [r7, #14]
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4403      	add	r3, r0
 80015d6:	440b      	add	r3, r1
 80015d8:	3321      	adds	r3, #33	; 0x21
 80015da:	2220      	movs	r2, #32
 80015dc:	701a      	strb	r2, [r3, #0]
        for(uint8_t j=0; j<14; j++)
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	3301      	adds	r3, #1
 80015e2:	73bb      	strb	r3, [r7, #14]
 80015e4:	7bbb      	ldrb	r3, [r7, #14]
 80015e6:	2b0d      	cmp	r3, #13
 80015e8:	d9ed      	bls.n	80015c6 <lcdClearBuffer+0x14>
    for(uint8_t i=0; i<6; i++)
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	3301      	adds	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d9e4      	bls.n	80015c0 <lcdClearBuffer+0xe>
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <display_based>:


// obsluga

void display_based(struct lcdConf * lcd)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ffd0 	bl	80015b2 <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001612:	2300      	movs	r3, #0
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff febe 	bl	800139a <lcdSetPlace>

	char layer1[] = "|       }";
 800161e:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <display_based+0x84>)
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	ca07      	ldmia	r2, {r0, r1, r2}
 8001626:	c303      	stmia	r3!, {r0, r1}
 8001628:	801a      	strh	r2, [r3, #0]

	memcpy(&(lcd->buffer[1][2]), layer1, strlen(layer1));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f103 0431 	add.w	r4, r3, #49	; 0x31
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe fde3 	bl	8000200 <strlen>
 800163a:	4602      	mov	r2, r0
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4620      	mov	r0, r4
 8001644:	f008 fcb6 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff83 	bl	8001554 <lcdReadBuffer>

	char layer2[] = "|_ ___ _}";
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <display_based+0x88>)
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	ca07      	ldmia	r2, {r0, r1, r2}
 8001656:	c303      	stmia	r3!, {r0, r1}
 8001658:	801a      	strh	r2, [r3, #0]

	memcpy(&(lcd->buffer[2][2]), layer2, strlen(layer2));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f103 043f 	add.w	r4, r3, #63	; 0x3f
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fdcb 	bl	8000200 <strlen>
 800166a:	4602      	mov	r2, r0
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4619      	mov	r1, r3
 8001672:	4620      	mov	r0, r4
 8001674:	f008 fc9e 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff6b 	bl	8001554 <lcdReadBuffer>
}
 800167e:	bf00      	nop
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}
 8001686:	bf00      	nop
 8001688:	0800a004 	.word	0x0800a004
 800168c:	0800a010 	.word	0x0800a010

08001690 <display_lvl1_based>:

void display_lvl1_based(struct lcdConf * lcd)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b08d      	sub	sp, #52	; 0x34
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff8a 	bl	80015b2 <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 800169e:	2300      	movs	r3, #0
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fe78 	bl	800139a <lcdSetPlace>

	char layer1[] = "||       }}";
 80016aa:	4a26      	ldr	r2, [pc, #152]	; (8001744 <display_lvl1_based+0xb4>)
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80016b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[1][1]), layer1, strlen(layer1));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fd9d 	bl	8000200 <strlen>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4620      	mov	r0, r4
 80016d0:	f008 fc70 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff3d 	bl	8001554 <lcdReadBuffer>

	char layer2[] = "||_ ___ _}}";
 80016da:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <display_lvl1_based+0xb8>)
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80016e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[2][1]), layer2, strlen(layer2));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fd85 	bl	8000200 <strlen>
 80016f6:	4602      	mov	r2, r0
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4620      	mov	r0, r4
 8001700:	f008 fc58 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff25 	bl	8001554 <lcdReadBuffer>

	char layer3[] = "|__ ___ __}";
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <display_lvl1_based+0xbc>)
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	ca07      	ldmia	r2, {r0, r1, r2}
 8001712:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[3][1]), layer3, strlen(layer3));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fd6d 	bl	8000200 <strlen>
 8001726:	4602      	mov	r2, r0
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	4620      	mov	r0, r4
 8001730:	f008 fc40 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff0d 	bl	8001554 <lcdReadBuffer>

}
 800173a:	bf00      	nop
 800173c:	3734      	adds	r7, #52	; 0x34
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	bf00      	nop
 8001744:	0800a01c 	.word	0x0800a01c
 8001748:	0800a028 	.word	0x0800a028
 800174c:	0800a034 	.word	0x0800a034

08001750 <display_lvl2_based>:

void display_lvl2_based(struct lcdConf * lcd)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b093      	sub	sp, #76	; 0x4c
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff2a 	bl	80015b2 <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 800175e:	2300      	movs	r3, #0
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fe18 	bl	800139a <lcdSetPlace>

	char layer1[] = "|||       }}}";
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <display_lvl2_based+0xe4>)
 800176c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001772:	c407      	stmia	r4!, {r0, r1, r2}
 8001774:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 800177c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fd3d 	bl	8000200 <strlen>
 8001786:	4602      	mov	r2, r0
 8001788:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800178c:	4619      	mov	r1, r3
 800178e:	4620      	mov	r0, r4
 8001790:	f008 fc10 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fedd 	bl	8001554 <lcdReadBuffer>

	char layer2[] = "|||_ ___ _}}}";
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <display_lvl2_based+0xe8>)
 800179c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80017a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a2:	c407      	stmia	r4!, {r0, r1, r2}
 80017a4:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 80017ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd25 	bl	8000200 <strlen>
 80017b6:	4602      	mov	r2, r0
 80017b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017bc:	4619      	mov	r1, r3
 80017be:	4620      	mov	r0, r4
 80017c0:	f008 fbf8 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fec5 	bl	8001554 <lcdReadBuffer>

	char layer3[] = "||__ ___ __}}";
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <display_lvl2_based+0xec>)
 80017cc:	f107 0418 	add.w	r4, r7, #24
 80017d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d2:	c407      	stmia	r4!, {r0, r1, r2}
 80017d4:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 80017dc:	f107 0318 	add.w	r3, r7, #24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fd0d 	bl	8000200 <strlen>
 80017e6:	4602      	mov	r2, r0
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4620      	mov	r0, r4
 80017f0:	f008 fbe0 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fead 	bl	8001554 <lcdReadBuffer>

	char layer4[] = "|___ ___ ___}";
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <display_lvl2_based+0xf0>)
 80017fc:	f107 0408 	add.w	r4, r7, #8
 8001800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001802:	c407      	stmia	r4!, {r0, r1, r2}
 8001804:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f103 0459 	add.w	r4, r3, #89	; 0x59
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fcf5 	bl	8000200 <strlen>
 8001816:	4602      	mov	r2, r0
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	4619      	mov	r1, r3
 800181e:	4620      	mov	r0, r4
 8001820:	f008 fbc8 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff fe95 	bl	8001554 <lcdReadBuffer>

}
 800182a:	bf00      	nop
 800182c:	374c      	adds	r7, #76	; 0x4c
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	0800a040 	.word	0x0800a040
 8001838:	0800a050 	.word	0x0800a050
 800183c:	0800a060 	.word	0x0800a060
 8001840:	0800a070 	.word	0x0800a070

08001844 <display_lvl1_srodek>:

void display_lvl1_srodek(struct lcdConf * lcd, uint32_t centerSensor)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b08f      	sub	sp, #60	; 0x3c
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
	lcdClearBuffer(lcd);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff feaf 	bl	80015b2 <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001854:	2300      	movs	r3, #0
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fd9d 	bl	800139a <lcdSetPlace>
	layer[0]=c;

	memcpy(&(lcd->buffer[0][5]), layer, strlen(layer));
	lcdReadBuffer(lcd);*/

	char layer1[] = "  |       }  ";
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <display_lvl1_srodek+0xb4>)
 8001862:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001868:	c407      	stmia	r4!, {r0, r1, r2}
 800186a:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fcc2 	bl	8000200 <strlen>
 800187c:	4602      	mov	r2, r0
 800187e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001882:	4619      	mov	r1, r3
 8001884:	4620      	mov	r0, r4
 8001886:	f008 fb95 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fe62 	bl	8001554 <lcdReadBuffer>

	char layer2[] = "  |_ ___ _}  ";
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <display_lvl1_srodek+0xb8>)
 8001892:	f107 0418 	add.w	r4, r7, #24
 8001896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001898:	c407      	stmia	r4!, {r0, r1, r2}
 800189a:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 80018a2:	f107 0318 	add.w	r3, r7, #24
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fcaa 	bl	8000200 <strlen>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f107 0318 	add.w	r3, r7, #24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4620      	mov	r0, r4
 80018b6:	f008 fb7d 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fe4a 	bl	8001554 <lcdReadBuffer>

	char layer3[] = "     ___     ";
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <display_lvl1_srodek+0xbc>)
 80018c2:	f107 0408 	add.w	r4, r7, #8
 80018c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c8:	c407      	stmia	r4!, {r0, r1, r2}
 80018ca:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fc92 	bl	8000200 <strlen>
 80018dc:	4602      	mov	r2, r0
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	4619      	mov	r1, r3
 80018e4:	4620      	mov	r0, r4
 80018e6:	f008 fb65 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fe32 	bl	8001554 <lcdReadBuffer>


}
 80018f0:	bf00      	nop
 80018f2:	373c      	adds	r7, #60	; 0x3c
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	0800a080 	.word	0x0800a080
 80018fc:	0800a090 	.word	0x0800a090
 8001900:	0800a0a0 	.word	0x0800a0a0

08001904 <display_lvl1_left>:

void display_lvl1_left(struct lcdConf * lcd)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b08f      	sub	sp, #60	; 0x3c
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff fe50 	bl	80015b2 <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001912:	2300      	movs	r3, #0
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fd3e 	bl	800139a <lcdSetPlace>

	char layer1[] = " ||       }  ";
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <display_lvl1_left+0xb8>)
 8001920:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001926:	c407      	stmia	r4!, {r0, r1, r2}
 8001928:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fc63 	bl	8000200 <strlen>
 800193a:	4602      	mov	r2, r0
 800193c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001940:	4619      	mov	r1, r3
 8001942:	4620      	mov	r0, r4
 8001944:	f008 fb36 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fe03 	bl	8001554 <lcdReadBuffer>

	char layer2[] = " ||_ ___ _}  ";
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <display_lvl1_left+0xbc>)
 8001950:	f107 0418 	add.w	r4, r7, #24
 8001954:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001956:	c407      	stmia	r4!, {r0, r1, r2}
 8001958:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fc4b 	bl	8000200 <strlen>
 800196a:	4602      	mov	r2, r0
 800196c:	f107 0318 	add.w	r3, r7, #24
 8001970:	4619      	mov	r1, r3
 8001972:	4620      	mov	r0, r4
 8001974:	f008 fb1e 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fdeb 	bl	8001554 <lcdReadBuffer>

	char layer3[] = " |__          ";
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <display_lvl1_left+0xc0>)
 8001980:	f107 0408 	add.w	r4, r7, #8
 8001984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001986:	c407      	stmia	r4!, {r0, r1, r2}
 8001988:	8023      	strh	r3, [r4, #0]
 800198a:	3402      	adds	r4, #2
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	7023      	strb	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fc30 	bl	8000200 <strlen>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	4619      	mov	r1, r3
 80019a8:	4620      	mov	r0, r4
 80019aa:	f008 fb03 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fdd0 	bl	8001554 <lcdReadBuffer>
}
 80019b4:	bf00      	nop
 80019b6:	373c      	adds	r7, #60	; 0x3c
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	0800a0b0 	.word	0x0800a0b0
 80019c0:	0800a0c0 	.word	0x0800a0c0
 80019c4:	0800a0d0 	.word	0x0800a0d0

080019c8 <display_lvl1_right>:

void display_lvl1_right(struct lcdConf * lcd)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b08d      	sub	sp, #52	; 0x34
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fdee 	bl	80015b2 <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 80019d6:	2300      	movs	r3, #0
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fcdc 	bl	800139a <lcdSetPlace>

	char layer1[] = " |       }}";
 80019e2:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <display_lvl1_right+0xb4>)
 80019e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[1][1]), layer1, strlen(layer1));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc01 	bl	8000200 <strlen>
 80019fe:	4602      	mov	r2, r0
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	4620      	mov	r0, r4
 8001a08:	f008 fad4 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fda1 	bl	8001554 <lcdReadBuffer>

	char layer2[] = " |_ ___ _}}";
 8001a12:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <display_lvl1_right+0xb8>)
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[2][1]), layer2, strlen(layer2));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 8001a24:	f107 0318 	add.w	r3, r7, #24
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fbe9 	bl	8000200 <strlen>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f107 0318 	add.w	r3, r7, #24
 8001a34:	4619      	mov	r1, r3
 8001a36:	4620      	mov	r0, r4
 8001a38:	f008 fabc 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fd89 	bl	8001554 <lcdReadBuffer>

	char layer3[] = "        __}";
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <display_lvl1_right+0xbc>)
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	memcpy(&(lcd->buffer[3][1]), layer3, strlen(layer3));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fbd1 	bl	8000200 <strlen>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	4619      	mov	r1, r3
 8001a66:	4620      	mov	r0, r4
 8001a68:	f008 faa4 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fd71 	bl	8001554 <lcdReadBuffer>
}
 8001a72:	bf00      	nop
 8001a74:	3734      	adds	r7, #52	; 0x34
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	0800a0e0 	.word	0x0800a0e0
 8001a80:	0800a0ec 	.word	0x0800a0ec
 8001a84:	0800a0f8 	.word	0x0800a0f8

08001a88 <display_lvl2_srodek>:

void display_lvl2_srodek(struct lcdConf * lcd)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b093      	sub	sp, #76	; 0x4c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fd8e 	bl	80015b2 <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001a96:	2300      	movs	r3, #0
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fc7c 	bl	800139a <lcdSetPlace>

	char layer1[] = "  |       }  ";
 8001aa2:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <display_lvl2_srodek+0xe4>)
 8001aa4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001aa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aaa:	c407      	stmia	r4!, {r0, r1, r2}
 8001aac:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001ab4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fba1 	bl	8000200 <strlen>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f008 fa74 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff fd41 	bl	8001554 <lcdReadBuffer>

	char layer2[] = "  |_ ___ _}  ";
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <display_lvl2_srodek+0xe8>)
 8001ad4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ada:	c407      	stmia	r4!, {r0, r1, r2}
 8001adc:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fb89 	bl	8000200 <strlen>
 8001aee:	4602      	mov	r2, r0
 8001af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4620      	mov	r0, r4
 8001af8:	f008 fa5c 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fd29 	bl	8001554 <lcdReadBuffer>

	char layer3[] = "     ___     ";
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <display_lvl2_srodek+0xec>)
 8001b04:	f107 0418 	add.w	r4, r7, #24
 8001b08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0a:	c407      	stmia	r4!, {r0, r1, r2}
 8001b0c:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001b14:	f107 0318 	add.w	r3, r7, #24
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fb71 	bl	8000200 <strlen>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4620      	mov	r0, r4
 8001b28:	f008 fa44 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fd11 	bl	8001554 <lcdReadBuffer>

	char layer4[] = "     ___     ";
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <display_lvl2_srodek+0xec>)
 8001b34:	f107 0408 	add.w	r4, r7, #8
 8001b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b3a:	c407      	stmia	r4!, {r0, r1, r2}
 8001b3c:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f103 0459 	add.w	r4, r3, #89	; 0x59
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fb59 	bl	8000200 <strlen>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	4619      	mov	r1, r3
 8001b56:	4620      	mov	r0, r4
 8001b58:	f008 fa2c 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff fcf9 	bl	8001554 <lcdReadBuffer>


}
 8001b62:	bf00      	nop
 8001b64:	374c      	adds	r7, #76	; 0x4c
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	0800a080 	.word	0x0800a080
 8001b70:	0800a090 	.word	0x0800a090
 8001b74:	0800a0a0 	.word	0x0800a0a0

08001b78 <display_lvl2_left>:

void display_lvl2_left(struct lcdConf * lcd)
{
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b093      	sub	sp, #76	; 0x4c
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fd16 	bl	80015b2 <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001b86:	2300      	movs	r3, #0
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fc04 	bl	800139a <lcdSetPlace>

	char layer1[] = "|||       }  ";
 8001b92:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <display_lvl2_left+0xe4>)
 8001b94:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b9a:	c407      	stmia	r4!, {r0, r1, r2}
 8001b9c:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001ba4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fb29 	bl	8000200 <strlen>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f008 f9fc 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fcc9 	bl	8001554 <lcdReadBuffer>

	char layer2[] = "|||_ ___ _}  ";
 8001bc2:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <display_lvl2_left+0xe8>)
 8001bc4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001bc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bca:	c407      	stmia	r4!, {r0, r1, r2}
 8001bcc:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fb11 	bl	8000200 <strlen>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be4:	4619      	mov	r1, r3
 8001be6:	4620      	mov	r0, r4
 8001be8:	f008 f9e4 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fcb1 	bl	8001554 <lcdReadBuffer>

	char layer3[] = "||__         ";
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <display_lvl2_left+0xec>)
 8001bf4:	f107 0418 	add.w	r4, r7, #24
 8001bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bfa:	c407      	stmia	r4!, {r0, r1, r2}
 8001bfc:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001c04:	f107 0318 	add.w	r3, r7, #24
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe faf9 	bl	8000200 <strlen>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	4619      	mov	r1, r3
 8001c16:	4620      	mov	r0, r4
 8001c18:	f008 f9cc 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fc99 	bl	8001554 <lcdReadBuffer>

	char layer4[] = "|___         ";
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <display_lvl2_left+0xf0>)
 8001c24:	f107 0408 	add.w	r4, r7, #8
 8001c28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c2a:	c407      	stmia	r4!, {r0, r1, r2}
 8001c2c:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f103 0459 	add.w	r4, r3, #89	; 0x59
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fae1 	bl	8000200 <strlen>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	4619      	mov	r1, r3
 8001c46:	4620      	mov	r0, r4
 8001c48:	f008 f9b4 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fc81 	bl	8001554 <lcdReadBuffer>


}
 8001c52:	bf00      	nop
 8001c54:	374c      	adds	r7, #76	; 0x4c
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	0800a104 	.word	0x0800a104
 8001c60:	0800a114 	.word	0x0800a114
 8001c64:	0800a124 	.word	0x0800a124
 8001c68:	0800a134 	.word	0x0800a134

08001c6c <display_lvl2_right>:

void display_lvl2_right(struct lcdConf * lcd)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b093      	sub	sp, #76	; 0x4c
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	lcdClearBuffer(lcd);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fc9c 	bl	80015b2 <lcdClearBuffer>
	lcdSetPlace(lcd, horizontal, 0, 0);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fb8a 	bl	800139a <lcdSetPlace>

	char layer1[] = "  |       }}}";
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <display_lvl2_right+0xe4>)
 8001c88:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001c8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c8e:	c407      	stmia	r4!, {r0, r1, r2}
 8001c90:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[1][0]), layer1, strlen(layer1));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f103 042f 	add.w	r4, r3, #47	; 0x2f
 8001c98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe faaf 	bl	8000200 <strlen>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4620      	mov	r0, r4
 8001cac:	f008 f982 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fc4f 	bl	8001554 <lcdReadBuffer>

	char layer2[] = "  |_ ___ _}}}";
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <display_lvl2_right+0xe8>)
 8001cb8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cbe:	c407      	stmia	r4!, {r0, r1, r2}
 8001cc0:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[2][0]), layer2, strlen(layer2));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f103 043d 	add.w	r4, r3, #61	; 0x3d
 8001cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fa97 	bl	8000200 <strlen>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f008 f96a 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff fc37 	bl	8001554 <lcdReadBuffer>

	char layer3[] = "         __}}";
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <display_lvl2_right+0xec>)
 8001ce8:	f107 0418 	add.w	r4, r7, #24
 8001cec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cee:	c407      	stmia	r4!, {r0, r1, r2}
 8001cf0:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[3][0]), layer3, strlen(layer3));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fa7f 	bl	8000200 <strlen>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f008 f952 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fc1f 	bl	8001554 <lcdReadBuffer>

	char layer4[] = "         ___}";
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <display_lvl2_right+0xf0>)
 8001d18:	f107 0408 	add.w	r4, r7, #8
 8001d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d1e:	c407      	stmia	r4!, {r0, r1, r2}
 8001d20:	8023      	strh	r3, [r4, #0]

	memcpy(&(lcd->buffer[4][0]), layer4, strlen(layer4));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f103 0459 	add.w	r4, r3, #89	; 0x59
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fa67 	bl	8000200 <strlen>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f008 f93a 	bl	8009fb4 <memcpy>
	lcdReadBuffer(lcd);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fc07 	bl	8001554 <lcdReadBuffer>
}
 8001d46:	bf00      	nop
 8001d48:	374c      	adds	r7, #76	; 0x4c
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	0800a144 	.word	0x0800a144
 8001d54:	0800a154 	.word	0x0800a154
 8001d58:	0800a164 	.word	0x0800a164
 8001d5c:	0800a174 	.word	0x0800a174

08001d60 <display_driver>:




void display_driver(uint64_t leftSensor, uint64_t centerSensor, uint64_t rightSensor, struct lcdConf lcd)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d6a:	e9c7 2300 	strd	r2, r3, [r7]

	//rightSensor = 100;
	//centerSensor = 100;
	//leftSensor = 100;

	if(leftSensor < 30 && centerSensor < 30 && rightSensor < 30)
 8001d6e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d72:	2c00      	cmp	r4, #0
 8001d74:	bf08      	it	eq
 8001d76:	2b1e      	cmpeq	r3, #30
 8001d78:	d229      	bcs.n	8001dce <display_driver+0x6e>
 8001d7a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d7e:	2c00      	cmp	r4, #0
 8001d80:	bf08      	it	eq
 8001d82:	2b1e      	cmpeq	r3, #30
 8001d84:	d223      	bcs.n	8001dce <display_driver+0x6e>
 8001d86:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001d8a:	2c00      	cmp	r4, #0
 8001d8c:	bf08      	it	eq
 8001d8e:	2b1e      	cmpeq	r3, #30
 8001d90:	d21d      	bcs.n	8001dce <display_driver+0x6e>
	{
		if(leftSensor < 10 && centerSensor < 10 && rightSensor < 10)
 8001d92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d96:	2c00      	cmp	r4, #0
 8001d98:	bf08      	it	eq
 8001d9a:	2b0a      	cmpeq	r3, #10
 8001d9c:	d211      	bcs.n	8001dc2 <display_driver+0x62>
 8001d9e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001da2:	2c00      	cmp	r4, #0
 8001da4:	bf08      	it	eq
 8001da6:	2b0a      	cmpeq	r3, #10
 8001da8:	d20b      	bcs.n	8001dc2 <display_driver+0x62>
 8001daa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001dae:	2c00      	cmp	r4, #0
 8001db0:	bf08      	it	eq
 8001db2:	2b0a      	cmpeq	r3, #10
 8001db4:	d205      	bcs.n	8001dc2 <display_driver+0x62>
		{
			display_lvl2_based(&lcd);
 8001db6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fcc8 	bl	8001750 <display_lvl2_based>
		if(leftSensor < 10 && centerSensor < 10 && rightSensor < 10)
 8001dc0:	e0c3      	b.n	8001f4a <display_driver+0x1ea>
		}
		else
		{
			display_lvl1_based(&lcd);
 8001dc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fc62 	bl	8001690 <display_lvl1_based>
		if(leftSensor < 10 && centerSensor < 10 && rightSensor < 10)
 8001dcc:	e0bd      	b.n	8001f4a <display_driver+0x1ea>
		}
	}
	else
	{
			mainSensor = centerSensor;
 8001dce:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001dd2:	e9c7 3406 	strd	r3, r4, [r7, #24]
			check = 1;
 8001dd6:	f04f 0301 	mov.w	r3, #1
 8001dda:	f04f 0400 	mov.w	r4, #0
 8001dde:	e9c7 3404 	strd	r3, r4, [r7, #16]
			if(leftSensor < mainSensor)
 8001de2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001de6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001dea:	42a2      	cmp	r2, r4
 8001dec:	bf08      	it	eq
 8001dee:	4299      	cmpeq	r1, r3
 8001df0:	d209      	bcs.n	8001e06 <display_driver+0xa6>
			{
				mainSensor = leftSensor;
 8001df2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001df6:	e9c7 3406 	strd	r3, r4, [r7, #24]
				check = 2;
 8001dfa:	f04f 0302 	mov.w	r3, #2
 8001dfe:	f04f 0400 	mov.w	r4, #0
 8001e02:	e9c7 3404 	strd	r3, r4, [r7, #16]
			}

			if(rightSensor < mainSensor)
 8001e06:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001e0a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e0e:	42a2      	cmp	r2, r4
 8001e10:	bf08      	it	eq
 8001e12:	4299      	cmpeq	r1, r3
 8001e14:	d209      	bcs.n	8001e2a <display_driver+0xca>
			{
				mainSensor = rightSensor;
 8001e16:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001e1a:	e9c7 3406 	strd	r3, r4, [r7, #24]
				check = 3;
 8001e1e:	f04f 0303 	mov.w	r3, #3
 8001e22:	f04f 0400 	mov.w	r4, #0
 8001e26:	e9c7 3404 	strd	r3, r4, [r7, #16]
			}

			if(check == 1)
 8001e2a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e2e:	2c00      	cmp	r4, #0
 8001e30:	bf08      	it	eq
 8001e32:	2b01      	cmpeq	r3, #1
 8001e34:	d12a      	bne.n	8001e8c <display_driver+0x12c>
			{
				if(mainSensor > 60 )
 8001e36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e3a:	2c00      	cmp	r4, #0
 8001e3c:	bf08      	it	eq
 8001e3e:	2b3d      	cmpeq	r3, #61	; 0x3d
 8001e40:	d305      	bcc.n	8001e4e <display_driver+0xee>
				{
					display_based(&lcd);
 8001e42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fbdc 	bl	8001604 <display_based>
 8001e4c:	e01e      	b.n	8001e8c <display_driver+0x12c>
				}
				else if(mainSensor < 61 && mainSensor > 20)
 8001e4e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e52:	2c00      	cmp	r4, #0
 8001e54:	bf08      	it	eq
 8001e56:	2b3d      	cmpeq	r3, #61	; 0x3d
 8001e58:	d20d      	bcs.n	8001e76 <display_driver+0x116>
 8001e5a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e5e:	2c00      	cmp	r4, #0
 8001e60:	bf08      	it	eq
 8001e62:	2b15      	cmpeq	r3, #21
 8001e64:	d307      	bcc.n	8001e76 <display_driver+0x116>
				{
					display_lvl1_srodek(&lcd, centerSensor);
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fce8 	bl	8001844 <display_lvl1_srodek>
 8001e74:	e00a      	b.n	8001e8c <display_driver+0x12c>
				}
				else if(mainSensor  < 21)
 8001e76:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e7a:	2c00      	cmp	r4, #0
 8001e7c:	bf08      	it	eq
 8001e7e:	2b15      	cmpeq	r3, #21
 8001e80:	d204      	bcs.n	8001e8c <display_driver+0x12c>
				{
					display_lvl2_srodek(&lcd);
 8001e82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fdfe 	bl	8001a88 <display_lvl2_srodek>
				}
			}
			if(check == 2)
 8001e8c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e90:	2c00      	cmp	r4, #0
 8001e92:	bf08      	it	eq
 8001e94:	2b02      	cmpeq	r3, #2
 8001e96:	d128      	bne.n	8001eea <display_driver+0x18a>
			{
				if(mainSensor > 60 )
 8001e98:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e9c:	2c00      	cmp	r4, #0
 8001e9e:	bf08      	it	eq
 8001ea0:	2b3d      	cmpeq	r3, #61	; 0x3d
 8001ea2:	d305      	bcc.n	8001eb0 <display_driver+0x150>
				{
					display_based(&lcd);
 8001ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fbab 	bl	8001604 <display_based>
 8001eae:	e01c      	b.n	8001eea <display_driver+0x18a>
				}
				else if(mainSensor < 61 && mainSensor > 20)
 8001eb0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001eb4:	2c00      	cmp	r4, #0
 8001eb6:	bf08      	it	eq
 8001eb8:	2b3d      	cmpeq	r3, #61	; 0x3d
 8001eba:	d20b      	bcs.n	8001ed4 <display_driver+0x174>
 8001ebc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ec0:	2c00      	cmp	r4, #0
 8001ec2:	bf08      	it	eq
 8001ec4:	2b15      	cmpeq	r3, #21
 8001ec6:	d305      	bcc.n	8001ed4 <display_driver+0x174>
				{
					display_lvl1_left(&lcd);
 8001ec8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fd19 	bl	8001904 <display_lvl1_left>
 8001ed2:	e00a      	b.n	8001eea <display_driver+0x18a>
				}
				else if(mainSensor  < 21)
 8001ed4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ed8:	2c00      	cmp	r4, #0
 8001eda:	bf08      	it	eq
 8001edc:	2b15      	cmpeq	r3, #21
 8001ede:	d204      	bcs.n	8001eea <display_driver+0x18a>
				{
					display_lvl2_left(&lcd);
 8001ee0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fe47 	bl	8001b78 <display_lvl2_left>
				}
			}
			if(check == 3)
 8001eea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001eee:	2c00      	cmp	r4, #0
 8001ef0:	bf08      	it	eq
 8001ef2:	2b03      	cmpeq	r3, #3
 8001ef4:	d129      	bne.n	8001f4a <display_driver+0x1ea>
			{
				if(mainSensor > 50 )
 8001ef6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001efa:	2c00      	cmp	r4, #0
 8001efc:	bf08      	it	eq
 8001efe:	2b33      	cmpeq	r3, #51	; 0x33
 8001f00:	d305      	bcc.n	8001f0e <display_driver+0x1ae>
				{
					display_based(&lcd);
 8001f02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fb7c 	bl	8001604 <display_based>
				}
			}

	}

}
 8001f0c:	e01d      	b.n	8001f4a <display_driver+0x1ea>
				else if(mainSensor < 51 && mainSensor > 15)
 8001f0e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f12:	2c00      	cmp	r4, #0
 8001f14:	bf08      	it	eq
 8001f16:	2b33      	cmpeq	r3, #51	; 0x33
 8001f18:	d20b      	bcs.n	8001f32 <display_driver+0x1d2>
 8001f1a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f1e:	2c00      	cmp	r4, #0
 8001f20:	bf08      	it	eq
 8001f22:	2b10      	cmpeq	r3, #16
 8001f24:	d305      	bcc.n	8001f32 <display_driver+0x1d2>
					display_lvl1_right(&lcd);
 8001f26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fd4c 	bl	80019c8 <display_lvl1_right>
 8001f30:	e00b      	b.n	8001f4a <display_driver+0x1ea>
				else if(mainSensor  < 16)
 8001f32:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f36:	2c00      	cmp	r4, #0
 8001f38:	bf08      	it	eq
 8001f3a:	2b10      	cmpeq	r3, #16
 8001f3c:	d205      	bcs.n	8001f4a <display_driver+0x1ea>
					display_lvl2_right(&lcd);
 8001f3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fe92 	bl	8001c6c <display_lvl2_right>
}
 8001f48:	e7ff      	b.n	8001f4a <display_driver+0x1ea>
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
	...

08001f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f58:	f000 fed1 	bl	8002cfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f5c:	f000 f874 	bl	8002048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f60:	f000 fa58 	bl	8002414 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001f64:	f000 f8f8 	bl	8002158 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8001f68:	f000 f946 	bl	80021f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001f6c:	f000 fa28 	bl	80023c0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8001f70:	f000 f9cc 	bl	800230c <MX_TIM1_Init>
  MX_SPI1_Init();
 8001f74:	f000 f98c 	bl	8002290 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4823      	ldr	r0, [pc, #140]	; (8002008 <main+0xb4>)
 8001f7c:	f003 fc94 	bl	80058a8 <HAL_TIM_IC_Start_IT>

  lcd.spi = &hspi1;
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <main+0xb8>)
 8001f82:	4a23      	ldr	r2, [pc, #140]	; (8002010 <main+0xbc>)
 8001f84:	601a      	str	r2, [r3, #0]
  lcd.rst_port = RST_GPIO_Port;
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <main+0xb8>)
 8001f88:	4a22      	ldr	r2, [pc, #136]	; (8002014 <main+0xc0>)
 8001f8a:	605a      	str	r2, [r3, #4]
  lcd.rst_pin = RESET_Pin;
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <main+0xb8>)
 8001f8e:	2220      	movs	r2, #32
 8001f90:	721a      	strb	r2, [r3, #8]
  lcd.dc_port = DC_GPIO_Port;
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <main+0xb8>)
 8001f94:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <main+0xc0>)
 8001f96:	60da      	str	r2, [r3, #12]
  lcd.dc_pin = DCC_Pin;
 8001f98:	4b1c      	ldr	r3, [pc, #112]	; (800200c <main+0xb8>)
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	f883 2020 	strb.w	r2, [r3, #32]
  lcd.bl_port = BL_GPIO_Port;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <main+0xb8>)
 8001fa2:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <main+0xc0>)
 8001fa4:	615a      	str	r2, [r3, #20]
  lcd.bl_pin = BLL_Pin;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <main+0xb8>)
 8001fa8:	2208      	movs	r2, #8
 8001faa:	761a      	strb	r2, [r3, #24]
  lcd.ce_port = CE_GPIO_Port;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <main+0xb8>)
 8001fae:	4a19      	ldr	r2, [pc, #100]	; (8002014 <main+0xc0>)
 8001fb0:	61da      	str	r2, [r3, #28]
  lcd.ce_pin = CEE_Pin;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <main+0xb8>)
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	741a      	strb	r2, [r3, #16]

  lcdInit(&lcd);
 8001fb8:	4814      	ldr	r0, [pc, #80]	; (800200c <main+0xb8>)
 8001fba:	f7ff f931 	bl	8001220 <lcdInit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fbe:	f005 fa97 	bl	80074f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HCSR04_first */
  HCSR04_firstHandle = osThreadNew(hcsr04_1, NULL, &HCSR04_first_attributes);
 8001fc2:	4a15      	ldr	r2, [pc, #84]	; (8002018 <main+0xc4>)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4815      	ldr	r0, [pc, #84]	; (800201c <main+0xc8>)
 8001fc8:	f005 fafc 	bl	80075c4 <osThreadNew>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <main+0xcc>)
 8001fd0:	601a      	str	r2, [r3, #0]

  /* creation of HCSR04_second */
  HCSR04_secondHandle = osThreadNew(hcsr04_2, NULL, &HCSR04_second_attributes);
 8001fd2:	4a14      	ldr	r2, [pc, #80]	; (8002024 <main+0xd0>)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4814      	ldr	r0, [pc, #80]	; (8002028 <main+0xd4>)
 8001fd8:	f005 faf4 	bl	80075c4 <osThreadNew>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <main+0xd8>)
 8001fe0:	601a      	str	r2, [r3, #0]

  /* creation of HCSR04_fthird */
  HCSR04_fthirdHandle = osThreadNew(hcsr04_3, NULL, &HCSR04_fthird_attributes);
 8001fe2:	4a13      	ldr	r2, [pc, #76]	; (8002030 <main+0xdc>)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4813      	ldr	r0, [pc, #76]	; (8002034 <main+0xe0>)
 8001fe8:	f005 faec 	bl	80075c4 <osThreadNew>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <main+0xe4>)
 8001ff0:	601a      	str	r2, [r3, #0]

  /* creation of LCD_buzzer */
  LCD_buzzerHandle = osThreadNew(lcd_buzz, NULL, &LCD_buzzer_attributes);
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <main+0xe8>)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4812      	ldr	r0, [pc, #72]	; (8002040 <main+0xec>)
 8001ff8:	f005 fae4 	bl	80075c4 <osThreadNew>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <main+0xf0>)
 8002000:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002002:	f005 faa9 	bl	8007558 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002006:	e7fe      	b.n	8002006 <main+0xb2>
 8002008:	20001918 	.word	0x20001918
 800200c:	20001990 	.word	0x20001990
 8002010:	20002040 	.word	0x20002040
 8002014:	48001000 	.word	0x48001000
 8002018:	0800a3c4 	.word	0x0800a3c4
 800201c:	080025e1 	.word	0x080025e1
 8002020:	20002034 	.word	0x20002034
 8002024:	0800a3e8 	.word	0x0800a3e8
 8002028:	08002649 	.word	0x08002649
 800202c:	200020a4 	.word	0x200020a4
 8002030:	0800a40c 	.word	0x0800a40c
 8002034:	080026b1 	.word	0x080026b1
 8002038:	20001f90 	.word	0x20001f90
 800203c:	0800a430 	.word	0x0800a430
 8002040:	08002721 	.word	0x08002721
 8002044:	200020a8 	.word	0x200020a8

08002048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b0bc      	sub	sp, #240	; 0xf0
 800204c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002052:	2244      	movs	r2, #68	; 0x44
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f007 ffb7 	bl	8009fca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2294      	movs	r2, #148	; 0x94
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f007 ffa9 	bl	8009fca <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002078:	2000      	movs	r0, #0
 800207a:	f001 faa9 	bl	80035d0 <HAL_PWREx_ControlVoltageScaling>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8002084:	f000 fbb6 	bl	80027f4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002088:	2301      	movs	r3, #1
 800208a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800208e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002096:	2302      	movs	r3, #2
 8002098:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800209c:	2303      	movs	r3, #3
 800209e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80020a8:	231e      	movs	r3, #30
 80020aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020c4:	4618      	mov	r0, r3
 80020c6:	f001 fb47 	bl	8003758 <HAL_RCC_OscConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80020d0:	f000 fb90 	bl	80027f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d4:	230f      	movs	r3, #15
 80020d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020da:	2303      	movs	r3, #3
 80020dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020f8:	2105      	movs	r1, #5
 80020fa:	4618      	mov	r0, r3
 80020fc:	f001 ff52 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002106:	f000 fb75 	bl	80027f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 800210a:	f242 0324 	movw	r3, #8228	; 0x2024
 800210e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002110:	2300      	movs	r3, #0
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002114:	2300      	movs	r3, #0
 8002116:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002118:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800211c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800211e:	2303      	movs	r3, #3
 8002120:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8002126:	230c      	movs	r3, #12
 8002128:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800212a:	2302      	movs	r3, #2
 800212c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800212e:	2302      	movs	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002132:	2302      	movs	r3, #2
 8002134:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002136:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800213a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	4618      	mov	r0, r3
 8002140:	f002 fa12 	bl	8004568 <HAL_RCCEx_PeriphCLKConfig>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <SystemClock_Config+0x106>
  {
    Error_Handler();
 800214a:	f000 fb53 	bl	80027f4 <Error_Handler>
  }
}
 800214e:	bf00      	nop
 8002150:	37f0      	adds	r7, #240	; 0xf0
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 800215e:	4a23      	ldr	r2, [pc, #140]	; (80021ec <MX_LPUART1_UART_Init+0x94>)
 8002160:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002162:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 8002164:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <MX_LPUART1_UART_Init+0x98>)
 8002166:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 800216a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800216e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 800218a:	2200      	movs	r2, #0
 800218c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 8002190:	2200      	movs	r2, #0
 8002192:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 8002196:	2200      	movs	r2, #0
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80021a0:	4811      	ldr	r0, [pc, #68]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 80021a2:	f004 f963 	bl	800646c <HAL_UART_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80021ac:	f000 fb22 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021b0:	2100      	movs	r1, #0
 80021b2:	480d      	ldr	r0, [pc, #52]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 80021b4:	f004 fe1f 	bl	8006df6 <HAL_UARTEx_SetTxFifoThreshold>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80021be:	f000 fb19 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c2:	2100      	movs	r1, #0
 80021c4:	4808      	ldr	r0, [pc, #32]	; (80021e8 <MX_LPUART1_UART_Init+0x90>)
 80021c6:	f004 fe54 	bl	8006e72 <HAL_UARTEx_SetRxFifoThreshold>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80021d0:	f000 fb10 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80021d4:	4807      	ldr	r0, [pc, #28]	; (80021f4 <MX_LPUART1_UART_Init+0x9c>)
 80021d6:	f004 fdd5 	bl	8006d84 <HAL_UARTEx_DisableFifoMode>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80021e0:	f000 fb08 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20001f04 	.word	0x20001f04
 80021ec:	40008000 	.word	0x40008000
 80021f0:	00033324 	.word	0x00033324
 80021f4:	20001f94 	.word	0x20001f94

080021f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <MX_USART3_UART_Init+0x90>)
 80021fe:	4a23      	ldr	r2, [pc, #140]	; (800228c <MX_USART3_UART_Init+0x94>)
 8002200:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <MX_USART3_UART_Init+0x90>)
 8002204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002208:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <MX_USART3_UART_Init+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <MX_USART3_UART_Init+0x90>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002216:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MX_USART3_UART_Init+0x90>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_USART3_UART_Init+0x90>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <MX_USART3_UART_Init+0x90>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_USART3_UART_Init+0x90>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_USART3_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_USART3_UART_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <MX_USART3_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002240:	4811      	ldr	r0, [pc, #68]	; (8002288 <MX_USART3_UART_Init+0x90>)
 8002242:	f004 f913 	bl	800646c <HAL_UART_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800224c:	f000 fad2 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002250:	2100      	movs	r1, #0
 8002252:	480d      	ldr	r0, [pc, #52]	; (8002288 <MX_USART3_UART_Init+0x90>)
 8002254:	f004 fdcf 	bl	8006df6 <HAL_UARTEx_SetTxFifoThreshold>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800225e:	f000 fac9 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002262:	2100      	movs	r1, #0
 8002264:	4808      	ldr	r0, [pc, #32]	; (8002288 <MX_USART3_UART_Init+0x90>)
 8002266:	f004 fe04 	bl	8006e72 <HAL_UARTEx_SetRxFifoThreshold>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002270:	f000 fac0 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <MX_USART3_UART_Init+0x90>)
 8002276:	f004 fd85 	bl	8006d84 <HAL_UARTEx_DisableFifoMode>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002280:	f000 fab8 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200019f8 	.word	0x200019f8
 800228c:	40004800 	.word	0x40004800

08002290 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <MX_SPI1_Init+0x74>)
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <MX_SPI1_Init+0x78>)
 8002298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <MX_SPI1_Init+0x74>)
 800229c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <MX_SPI1_Init+0x74>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <MX_SPI1_Init+0x74>)
 80022aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_SPI1_Init+0x74>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MX_SPI1_Init+0x74>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_SPI1_Init+0x74>)
 80022be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_SPI1_Init+0x74>)
 80022c6:	2220      	movs	r2, #32
 80022c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_SPI1_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <MX_SPI1_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <MX_SPI1_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_SPI1_Init+0x74>)
 80022de:	2207      	movs	r2, #7
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <MX_SPI1_Init+0x74>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <MX_SPI1_Init+0x74>)
 80022ea:	2208      	movs	r2, #8
 80022ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_SPI1_Init+0x74>)
 80022f0:	f002 fe42 	bl	8004f78 <HAL_SPI_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022fa:	f000 fa7b 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20002040 	.word	0x20002040
 8002308:	40013000 	.word	0x40013000

0800230c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <MX_TIM1_Init+0xac>)
 800232c:	4a23      	ldr	r2, [pc, #140]	; (80023bc <MX_TIM1_Init+0xb0>)
 800232e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <MX_TIM1_Init+0xac>)
 8002332:	2277      	movs	r2, #119	; 0x77
 8002334:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <MX_TIM1_Init+0xac>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <MX_TIM1_Init+0xac>)
 800233e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002342:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <MX_TIM1_Init+0xac>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <MX_TIM1_Init+0xac>)
 800234c:	2200      	movs	r2, #0
 800234e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <MX_TIM1_Init+0xac>)
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002356:	4818      	ldr	r0, [pc, #96]	; (80023b8 <MX_TIM1_Init+0xac>)
 8002358:	f003 fa4e 	bl	80057f8 <HAL_TIM_IC_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002362:	f000 fa47 	bl	80027f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	480f      	ldr	r0, [pc, #60]	; (80023b8 <MX_TIM1_Init+0xac>)
 800237a:	f003 ffd1 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002384:	f000 fa36 	bl	80027f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800238c:	2301      	movs	r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2200      	movs	r2, #0
 800239c:	4619      	mov	r1, r3
 800239e:	4806      	ldr	r0, [pc, #24]	; (80023b8 <MX_TIM1_Init+0xac>)
 80023a0:	f003 fce3 	bl	8005d6a <HAL_TIM_IC_ConfigChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80023aa:	f000 fa23 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20001918 	.word	0x20001918
 80023bc:	40012c00 	.word	0x40012c00

080023c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80023c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80023ce:	2206      	movs	r2, #6
 80023d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80023d4:	2202      	movs	r2, #2
 80023d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80023da:	2201      	movs	r2, #1
 80023dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80023fe:	f000 ff7f 	bl	8003300 <HAL_PCD_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8002408:	f000 f9f4 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20001a88 	.word	0x20001a88

08002414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08e      	sub	sp, #56	; 0x38
 8002418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800242a:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002430:	f043 0310 	orr.w	r3, r3, #16
 8002434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	623b      	str	r3, [r7, #32]
 8002440:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	4b60      	ldr	r3, [pc, #384]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	4a5f      	ldr	r2, [pc, #380]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800244e:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800245a:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	4a59      	ldr	r2, [pc, #356]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002460:	f043 0320 	orr.w	r3, r3, #32
 8002464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002466:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002472:	4b54      	ldr	r3, [pc, #336]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	4a53      	ldr	r2, [pc, #332]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800247e:	4b51      	ldr	r3, [pc, #324]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248a:	4b4e      	ldr	r3, [pc, #312]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	4a4d      	ldr	r2, [pc, #308]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002496:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a2:	4b48      	ldr	r3, [pc, #288]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	4a47      	ldr	r2, [pc, #284]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ae:	4b45      	ldr	r3, [pc, #276]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ba:	4b42      	ldr	r3, [pc, #264]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	4a41      	ldr	r2, [pc, #260]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024d2:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 80024d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <MX_GPIO_Init+0x1b0>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80024ea:	f001 f925 	bl	8003738 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_Pin|BL_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	213c      	movs	r1, #60	; 0x3c
 80024f2:	4835      	ldr	r0, [pc, #212]	; (80025c8 <MX_GPIO_Init+0x1b4>)
 80024f4:	f000 fed2 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Trig1_Pin|Trig2_Pin|Trig3_Pin, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
 80024fa:	21a8      	movs	r1, #168	; 0xa8
 80024fc:	4833      	ldr	r0, [pc, #204]	; (80025cc <MX_GPIO_Init+0x1b8>)
 80024fe:	f000 fecd 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002502:	2200      	movs	r2, #0
 8002504:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002508:	4831      	ldr	r0, [pc, #196]	; (80025d0 <MX_GPIO_Init+0x1bc>)
 800250a:	f000 fec7 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	2120      	movs	r1, #32
 8002512:	4830      	ldr	r0, [pc, #192]	; (80025d4 <MX_GPIO_Init+0x1c0>)
 8002514:	f000 fec2 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin BL_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CE_Pin|BL_Pin|DC_Pin|RST_Pin;
 8002518:	233c      	movs	r3, #60	; 0x3c
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251c:	2301      	movs	r3, #1
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252c:	4619      	mov	r1, r3
 800252e:	4826      	ldr	r0, [pc, #152]	; (80025c8 <MX_GPIO_Init+0x1b4>)
 8002530:	f000 fd22 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800253a:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <MX_GPIO_Init+0x1c4>)
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002546:	4619      	mov	r1, r3
 8002548:	4824      	ldr	r0, [pc, #144]	; (80025dc <MX_GPIO_Init+0x1c8>)
 800254a:	f000 fd15 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig1_Pin Trig2_Pin Trig3_Pin */
  GPIO_InitStruct.Pin = Trig1_Pin|Trig2_Pin|Trig3_Pin;
 800254e:	23a8      	movs	r3, #168	; 0xa8
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002552:	2301      	movs	r3, #1
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800255e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002562:	4619      	mov	r1, r3
 8002564:	4819      	ldr	r0, [pc, #100]	; (80025cc <MX_GPIO_Init+0x1b8>)
 8002566:	f000 fd07 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800256a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002570:	2301      	movs	r3, #1
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002580:	4619      	mov	r1, r3
 8002582:	4813      	ldr	r0, [pc, #76]	; (80025d0 <MX_GPIO_Init+0x1bc>)
 8002584:	f000 fcf8 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002588:	2320      	movs	r3, #32
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258c:	2301      	movs	r3, #1
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	480d      	ldr	r0, [pc, #52]	; (80025d4 <MX_GPIO_Init+0x1c0>)
 80025a0:	f000 fcea 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80025a4:	2340      	movs	r3, #64	; 0x40
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b4:	4619      	mov	r1, r3
 80025b6:	4807      	ldr	r0, [pc, #28]	; (80025d4 <MX_GPIO_Init+0x1c0>)
 80025b8:	f000 fcde 	bl	8002f78 <HAL_GPIO_Init>

}
 80025bc:	bf00      	nop
 80025be:	3738      	adds	r7, #56	; 0x38
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	48001000 	.word	0x48001000
 80025cc:	48001400 	.word	0x48001400
 80025d0:	48000400 	.word	0x48000400
 80025d4:	48001800 	.word	0x48001800
 80025d8:	10110000 	.word	0x10110000
 80025dc:	48000800 	.word	0x48000800

080025e0 <hcsr04_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_hcsr04_1 */
void hcsr04_1(void *argument)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	4814      	ldr	r0, [pc, #80]	; (800263c <hcsr04_1+0x5c>)
 80025ec:	f000 fe6e 	bl	80032cc <HAL_GPIO_TogglePin>
	tmp_mesCenter = triggerMeasureCenter();
 80025f0:	f7fe fd8c 	bl	800110c <triggerMeasureCenter>
 80025f4:	4603      	mov	r3, r0
 80025f6:	460c      	mov	r4, r1
 80025f8:	4a11      	ldr	r2, [pc, #68]	; (8002640 <hcsr04_1+0x60>)
 80025fa:	e9c2 3400 	strd	r3, r4, [r2]
	if(((mesCenter != 0) && (mesCenter < tmp_mesCenter)) || (mesCenter == 0))
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <hcsr04_1+0x64>)
 8002600:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002604:	4323      	orrs	r3, r4
 8002606:	d009      	beq.n	800261c <hcsr04_1+0x3c>
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <hcsr04_1+0x64>)
 800260a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <hcsr04_1+0x60>)
 8002610:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002614:	42a2      	cmp	r2, r4
 8002616:	bf08      	it	eq
 8002618:	4299      	cmpeq	r1, r3
 800261a:	d304      	bcc.n	8002626 <hcsr04_1+0x46>
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <hcsr04_1+0x64>)
 800261e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002622:	4323      	orrs	r3, r4
 8002624:	d105      	bne.n	8002632 <hcsr04_1+0x52>
	{
		mesCenter = tmp_mesCenter;
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <hcsr04_1+0x60>)
 8002628:	e9d3 3400 	ldrd	r3, r4, [r3]
 800262c:	4a05      	ldr	r2, [pc, #20]	; (8002644 <hcsr04_1+0x64>)
 800262e:	e9c2 3400 	strd	r3, r4, [r2]
	}
    osDelay(10);
 8002632:	200a      	movs	r0, #10
 8002634:	f005 f86c 	bl	8007710 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002638:	e7d6      	b.n	80025e8 <hcsr04_1+0x8>
 800263a:	bf00      	nop
 800263c:	48000400 	.word	0x48000400
 8002640:	20002028 	.word	0x20002028
 8002644:	20001e98 	.word	0x20001e98

08002648 <hcsr04_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hcsr04_2 */
void hcsr04_2(void *argument)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hcsr04_2 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002654:	4813      	ldr	r0, [pc, #76]	; (80026a4 <hcsr04_2+0x5c>)
 8002656:	f000 fe39 	bl	80032cc <HAL_GPIO_TogglePin>
	tmp_mesLeft = triggerMeasureLeft();
 800265a:	f7fe fd85 	bl	8001168 <triggerMeasureLeft>
 800265e:	4603      	mov	r3, r0
 8002660:	460c      	mov	r4, r1
 8002662:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <hcsr04_2+0x60>)
 8002664:	e9c2 3400 	strd	r3, r4, [r2]
	if(((mesLeft != 0) && (mesLeft > tmp_mesLeft)) || (mesLeft == 0))
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <hcsr04_2+0x64>)
 800266a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800266e:	4323      	orrs	r3, r4
 8002670:	d009      	beq.n	8002686 <hcsr04_2+0x3e>
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <hcsr04_2+0x64>)
 8002674:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <hcsr04_2+0x60>)
 800267a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800267e:	42a2      	cmp	r2, r4
 8002680:	bf08      	it	eq
 8002682:	4299      	cmpeq	r1, r3
 8002684:	d304      	bcc.n	8002690 <hcsr04_2+0x48>
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <hcsr04_2+0x64>)
 8002688:	e9d3 3400 	ldrd	r3, r4, [r3]
 800268c:	4323      	orrs	r3, r4
 800268e:	d105      	bne.n	800269c <hcsr04_2+0x54>
	{
		mesLeft = tmp_mesLeft;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <hcsr04_2+0x60>)
 8002692:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <hcsr04_2+0x64>)
 8002698:	e9c2 3400 	strd	r3, r4, [r2]
	}
    osDelay(10);
 800269c:	200a      	movs	r0, #10
 800269e:	f005 f837 	bl	8007710 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80026a2:	e7d5      	b.n	8002650 <hcsr04_2+0x8>
 80026a4:	48000400 	.word	0x48000400
 80026a8:	20002020 	.word	0x20002020
 80026ac:	20002038 	.word	0x20002038

080026b0 <hcsr04_3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hcsr04_3 */
void hcsr04_3(void *argument)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hcsr04_3 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80026b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026bc:	4815      	ldr	r0, [pc, #84]	; (8002714 <hcsr04_3+0x64>)
 80026be:	f000 fe05 	bl	80032cc <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80026c2:	2180      	movs	r1, #128	; 0x80
 80026c4:	4813      	ldr	r0, [pc, #76]	; (8002714 <hcsr04_3+0x64>)
 80026c6:	f000 fe01 	bl	80032cc <HAL_GPIO_TogglePin>
	tmp_mesRight = triggerMeasureRight();
 80026ca:	f7fe fd7b 	bl	80011c4 <triggerMeasureRight>
 80026ce:	4603      	mov	r3, r0
 80026d0:	460c      	mov	r4, r1
 80026d2:	4a11      	ldr	r2, [pc, #68]	; (8002718 <hcsr04_3+0x68>)
 80026d4:	e9c2 3400 	strd	r3, r4, [r2]
	if(((mesRight != 0) && (mesRight > tmp_mesRight)) || (mesRight == 0))
 80026d8:	4b10      	ldr	r3, [pc, #64]	; (800271c <hcsr04_3+0x6c>)
 80026da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026de:	4323      	orrs	r3, r4
 80026e0:	d009      	beq.n	80026f6 <hcsr04_3+0x46>
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <hcsr04_3+0x6c>)
 80026e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026e8:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <hcsr04_3+0x68>)
 80026ea:	e9d2 1200 	ldrd	r1, r2, [r2]
 80026ee:	42a2      	cmp	r2, r4
 80026f0:	bf08      	it	eq
 80026f2:	4299      	cmpeq	r1, r3
 80026f4:	d304      	bcc.n	8002700 <hcsr04_3+0x50>
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <hcsr04_3+0x6c>)
 80026f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026fc:	4323      	orrs	r3, r4
 80026fe:	d105      	bne.n	800270c <hcsr04_3+0x5c>
	{
		mesRight = tmp_mesRight;
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <hcsr04_3+0x68>)
 8002702:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <hcsr04_3+0x6c>)
 8002708:	e9c2 3400 	strd	r3, r4, [r2]
	}
    osDelay(10);
 800270c:	200a      	movs	r0, #10
 800270e:	f004 ffff 	bl	8007710 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002712:	e7d1      	b.n	80026b8 <hcsr04_3+0x8>
 8002714:	48000400 	.word	0x48000400
 8002718:	200020b0 	.word	0x200020b0
 800271c:	20001988 	.word	0x20001988

08002720 <lcd_buzz>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcd_buzz */
void lcd_buzz(void *argument)
{
 8002720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002724:	b09e      	sub	sp, #120	; 0x78
 8002726:	af1c      	add	r7, sp, #112	; 0x70
 8002728:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lcd_buzz */
  /* Infinite loop */
  for(;;)
  {
	if(begin == 0)
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <lcd_buzz+0x9c>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d112      	bne.n	8002758 <lcd_buzz+0x38>
	{
		lcdWelcome(lcd);
 8002732:	4c23      	ldr	r4, [pc, #140]	; (80027c0 <lcd_buzz+0xa0>)
 8002734:	4668      	mov	r0, sp
 8002736:	f104 0310 	add.w	r3, r4, #16
 800273a:	2258      	movs	r2, #88	; 0x58
 800273c:	4619      	mov	r1, r3
 800273e:	f007 fc39 	bl	8009fb4 <memcpy>
 8002742:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002746:	f7fe fe55 	bl	80013f4 <lcdWelcome>
		begin = 1;
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <lcd_buzz+0x9c>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
		osDelay(4000);
 8002750:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002754:	f004 ffdc 	bl	8007710 <osDelay>
	}

	display_driver(mesLeft, mesCenter, mesRight, lcd);
 8002758:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <lcd_buzz+0xa4>)
 800275a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <lcd_buzz+0xa8>)
 8002760:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <lcd_buzz+0xac>)
 8002766:	e9d3 4500 	ldrd	r4, r5, [r3]
 800276a:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <lcd_buzz+0xa0>)
 800276c:	ab02      	add	r3, sp, #8
 800276e:	4611      	mov	r1, r2
 8002770:	2268      	movs	r2, #104	; 0x68
 8002772:	4618      	mov	r0, r3
 8002774:	f007 fc1e 	bl	8009fb4 <memcpy>
 8002778:	e9cd 4500 	strd	r4, r5, [sp]
 800277c:	4652      	mov	r2, sl
 800277e:	465b      	mov	r3, fp
 8002780:	4640      	mov	r0, r8
 8002782:	4649      	mov	r1, r9
 8002784:	f7ff faec 	bl	8001d60 <display_driver>

    mesLeft = 0;
 8002788:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <lcd_buzz+0xa4>)
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f04f 0400 	mov.w	r4, #0
 8002792:	e9c2 3400 	strd	r3, r4, [r2]
    mesCenter = 0;
 8002796:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <lcd_buzz+0xa8>)
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f04f 0400 	mov.w	r4, #0
 80027a0:	e9c2 3400 	strd	r3, r4, [r2]
    mesRight = 0;
 80027a4:	4a09      	ldr	r2, [pc, #36]	; (80027cc <lcd_buzz+0xac>)
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	f04f 0400 	mov.w	r4, #0
 80027ae:	e9c2 3400 	strd	r3, r4, [r2]
    osDelay(100);
 80027b2:	2064      	movs	r0, #100	; 0x64
 80027b4:	f004 ffac 	bl	8007710 <osDelay>
	if(begin == 0)
 80027b8:	e7b7      	b.n	800272a <lcd_buzz+0xa>
 80027ba:	bf00      	nop
 80027bc:	20002030 	.word	0x20002030
 80027c0:	20001990 	.word	0x20001990
 80027c4:	20002038 	.word	0x20002038
 80027c8:	20001e98 	.word	0x20001e98
 80027cc:	20001988 	.word	0x20001988

080027d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027e2:	f000 faa5 	bl	8002d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40001000 	.word	0x40001000

080027f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_MspInit+0x44>)
 800280c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280e:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <HAL_MspInit+0x44>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6613      	str	r3, [r2, #96]	; 0x60
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_MspInit+0x44>)
 8002818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_MspInit+0x44>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	4a08      	ldr	r2, [pc, #32]	; (8002848 <HAL_MspInit+0x44>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	6593      	str	r3, [r2, #88]	; 0x58
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_MspInit+0x44>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08c      	sub	sp, #48	; 0x30
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a30      	ldr	r2, [pc, #192]	; (800292c <HAL_UART_MspInit+0xe0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d12b      	bne.n	80028c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800286e:	4b30      	ldr	r3, [pc, #192]	; (8002930 <HAL_UART_MspInit+0xe4>)
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	4a2f      	ldr	r2, [pc, #188]	; (8002930 <HAL_UART_MspInit+0xe4>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	65d3      	str	r3, [r2, #92]	; 0x5c
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_UART_MspInit+0xe4>)
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_UART_MspInit+0xe4>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4a29      	ldr	r2, [pc, #164]	; (8002930 <HAL_UART_MspInit+0xe4>)
 800288c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_UART_MspInit+0xe4>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800289e:	f000 ff4b 	bl	8003738 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80028a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80028b4:	2308      	movs	r3, #8
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	481d      	ldr	r0, [pc, #116]	; (8002934 <HAL_UART_MspInit+0xe8>)
 80028c0:	f000 fb5a 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028c4:	e02d      	b.n	8002922 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <HAL_UART_MspInit+0xec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d128      	bne.n	8002922 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_UART_MspInit+0xe4>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	4a16      	ldr	r2, [pc, #88]	; (8002930 <HAL_UART_MspInit+0xe4>)
 80028d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028da:	6593      	str	r3, [r2, #88]	; 0x58
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_UART_MspInit+0xe4>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_UART_MspInit+0xe4>)
 80028ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_UART_MspInit+0xe4>)
 80028ee:	f043 0308 	orr.w	r3, r3, #8
 80028f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_UART_MspInit+0xe4>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002900:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002912:	2307      	movs	r3, #7
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	4619      	mov	r1, r3
 800291c:	4807      	ldr	r0, [pc, #28]	; (800293c <HAL_UART_MspInit+0xf0>)
 800291e:	f000 fb2b 	bl	8002f78 <HAL_GPIO_Init>
}
 8002922:	bf00      	nop
 8002924:	3730      	adds	r7, #48	; 0x30
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40008000 	.word	0x40008000
 8002930:	40021000 	.word	0x40021000
 8002934:	48001800 	.word	0x48001800
 8002938:	40004800 	.word	0x40004800
 800293c:	48000c00 	.word	0x48000c00

08002940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_SPI_MspInit+0x7c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d128      	bne.n	80029b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_SPI_MspInit+0x80>)
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <HAL_SPI_MspInit+0x80>)
 8002968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800296c:	6613      	str	r3, [r2, #96]	; 0x60
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_SPI_MspInit+0x80>)
 8002970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_SPI_MspInit+0x80>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <HAL_SPI_MspInit+0x80>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_SPI_MspInit+0x80>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002992:	2382      	movs	r3, #130	; 0x82
 8002994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029a2:	2305      	movs	r3, #5
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b0:	f000 fae2 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029b4:	bf00      	nop
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40013000 	.word	0x40013000
 80029c0:	40021000 	.word	0x40021000

080029c4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <HAL_TIM_IC_MspInit+0x8c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d130      	bne.n	8002a48 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_TIM_IC_MspInit+0x90>)
 80029e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ea:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <HAL_TIM_IC_MspInit+0x90>)
 80029ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029f0:	6613      	str	r3, [r2, #96]	; 0x60
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_TIM_IC_MspInit+0x90>)
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_TIM_IC_MspInit+0x90>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <HAL_TIM_IC_MspInit+0x90>)
 8002a04:	f043 0310 	orr.w	r3, r3, #16
 8002a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_TIM_IC_MspInit+0x90>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	4809      	ldr	r0, [pc, #36]	; (8002a58 <HAL_TIM_IC_MspInit+0x94>)
 8002a34:	f000 faa0 	bl	8002f78 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	201b      	movs	r0, #27
 8002a3e:	f000 fa71 	bl	8002f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a42:	201b      	movs	r0, #27
 8002a44:	f000 fa8a 	bl	8002f5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a48:	bf00      	nop
 8002a4a:	3728      	adds	r7, #40	; 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	48001000 	.word	0x48001000

08002a5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a7c:	d154      	bne.n	8002b28 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a8a:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002a96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002aa8:	230a      	movs	r3, #10
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab6:	f000 fa5f 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	4619      	mov	r1, r3
 8002ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad2:	f000 fa51 	bl	8002f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d114      	bne.n	8002b24 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6593      	str	r3, [r2, #88]	; 0x58
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002b12:	f000 fe01 	bl	8003718 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <HAL_PCD_MspInit+0xd4>)
 8002b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b20:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002b22:	e001      	b.n	8002b28 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002b24:	f000 fdf8 	bl	8003718 <HAL_PWREx_EnableVddUSB>
}
 8002b28:	bf00      	nop
 8002b2a:	3728      	adds	r7, #40	; 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000

08002b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08c      	sub	sp, #48	; 0x30
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002b44:	2200      	movs	r2, #0
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	2036      	movs	r0, #54	; 0x36
 8002b4a:	f000 f9eb 	bl	8002f24 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b4e:	2036      	movs	r0, #54	; 0x36
 8002b50:	f000 fa04 	bl	8002f5c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_InitTick+0xa0>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_InitTick+0xa0>)
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <HAL_InitTick+0xa0>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b6c:	f107 0210 	add.w	r2, r7, #16
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 fc02 	bl	8004380 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002b7c:	f001 fbd4 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 8002b80:	4603      	mov	r3, r0
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <HAL_InitTick+0xa4>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0c9b      	lsrs	r3, r3, #18
 8002b90:	3b01      	subs	r3, #1
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_InitTick+0xa8>)
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_InitTick+0xac>)
 8002b98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_InitTick+0xa8>)
 8002b9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ba0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ba2:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <HAL_InitTick+0xa8>)
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <HAL_InitTick+0xa8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_InitTick+0xa8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002bb4:	4809      	ldr	r0, [pc, #36]	; (8002bdc <HAL_InitTick+0xa8>)
 8002bb6:	f002 fd4d 	bl	8005654 <HAL_TIM_Base_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d104      	bne.n	8002bca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002bc0:	4806      	ldr	r0, [pc, #24]	; (8002bdc <HAL_InitTick+0xa8>)
 8002bc2:	f002 fda9 	bl	8005718 <HAL_TIM_Base_Start_IT>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	e000      	b.n	8002bcc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3730      	adds	r7, #48	; 0x30
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	200020b8 	.word	0x200020b8
 8002be0:	40001000 	.word	0x40001000

08002be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <MemManage_Handler+0x4>

08002bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <BusFault_Handler+0x4>

08002c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <UsageFault_Handler+0x4>

08002c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <TIM1_CC_IRQHandler+0x10>)
 8002c1e:	f002 ff85 	bl	8005b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20001918 	.word	0x20001918

08002c2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <TIM6_DAC_IRQHandler+0x10>)
 8002c32:	f002 ff7b 	bl	8005b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200020b8 	.word	0x200020b8

08002c40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c44:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <SystemInit+0x64>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <SystemInit+0x64>)
 8002c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <SystemInit+0x68>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <SystemInit+0x68>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <SystemInit+0x68>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <SystemInit+0x68>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <SystemInit+0x68>)
 8002c6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002c70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002c74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <SystemInit+0x68>)
 8002c78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <SystemInit+0x68>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <SystemInit+0x68>)
 8002c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <SystemInit+0x68>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <SystemInit+0x64>)
 8002c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c96:	609a      	str	r2, [r3, #8]
#endif
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00
 8002ca8:	40021000 	.word	0x40021000

08002cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cb0:	f7ff ffc6 	bl	8002c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cb6:	e003      	b.n	8002cc0 <LoopCopyDataInit>

08002cb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002cba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002cbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002cbe:	3104      	adds	r1, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002cc0:	480a      	ldr	r0, [pc, #40]	; (8002cec <LoopForever+0xa>)
	ldr	r3, =_edata
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002cc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002cc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002cc8:	d3f6      	bcc.n	8002cb8 <CopyDataInit>
	ldr	r2, =_sbss
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ccc:	e002      	b.n	8002cd4 <LoopFillZerobss>

08002cce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002cce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002cd0:	f842 3b04 	str.w	r3, [r2], #4

08002cd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <LoopForever+0x16>)
	cmp	r2, r3
 8002cd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002cd8:	d3f9      	bcc.n	8002cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cda:	f007 f947 	bl	8009f6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cde:	f7ff f939 	bl	8001f54 <main>

08002ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ce2:	e7fe      	b.n	8002ce2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ce4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002ce8:	0800a4c4 	.word	0x0800a4c4
	ldr	r0, =_sdata
 8002cec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002cf0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8002cf4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002cf8:	20002148 	.word	0x20002148

08002cfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC1_IRQHandler>

08002cfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d08:	2003      	movs	r0, #3
 8002d0a:	f000 f900 	bl	8002f0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7ff ff10 	bl	8002b34 <HAL_InitTick>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	71fb      	strb	r3, [r7, #7]
 8002d1e:	e001      	b.n	8002d24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d20:	f7ff fd70 	bl	8002804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d24:	79fb      	ldrb	r3, [r7, #7]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_IncTick+0x20>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_IncTick+0x24>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_IncTick+0x24>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000008 	.word	0x20000008
 8002d54:	20002104 	.word	0x20002104

08002d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_GetTick+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20002104 	.word	0x20002104

08002d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7ff ffee 	bl	8002d58 <HAL_GetTick>
 8002d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d005      	beq.n	8002d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_Delay+0x40>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d96:	bf00      	nop
 8002d98:	f7ff ffde 	bl	8002d58 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d8f7      	bhi.n	8002d98 <HAL_Delay+0x28>
  {
  }
}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000008 	.word	0x20000008

08002db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de6:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	60d3      	str	r3, [r2, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <__NVIC_GetPriorityGrouping+0x18>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	f003 0307 	and.w	r3, r3, #7
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	db0b      	blt.n	8002e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	f003 021f 	and.w	r2, r3, #31
 8002e30:	4907      	ldr	r1, [pc, #28]	; (8002e50 <__NVIC_EnableIRQ+0x38>)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2001      	movs	r0, #1
 8002e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db0a      	blt.n	8002e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	490c      	ldr	r1, [pc, #48]	; (8002ea0 <__NVIC_SetPriority+0x4c>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	440b      	add	r3, r1
 8002e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e7c:	e00a      	b.n	8002e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4908      	ldr	r1, [pc, #32]	; (8002ea4 <__NVIC_SetPriority+0x50>)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	3b04      	subs	r3, #4
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	440b      	add	r3, r1
 8002e92:	761a      	strb	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000e100 	.word	0xe000e100
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f1c3 0307 	rsb	r3, r3, #7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	bf28      	it	cs
 8002ec6:	2304      	movcs	r3, #4
 8002ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d902      	bls.n	8002ed8 <NVIC_EncodePriority+0x30>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3b03      	subs	r3, #3
 8002ed6:	e000      	b.n	8002eda <NVIC_EncodePriority+0x32>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	4313      	orrs	r3, r2
         );
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	; 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ff4c 	bl	8002db4 <__NVIC_SetPriorityGrouping>
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f36:	f7ff ff61 	bl	8002dfc <__NVIC_GetPriorityGrouping>
 8002f3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	6978      	ldr	r0, [r7, #20]
 8002f42:	f7ff ffb1 	bl	8002ea8 <NVIC_EncodePriority>
 8002f46:	4602      	mov	r2, r0
 8002f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff80 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f54:	bf00      	nop
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff ff54 	bl	8002e18 <__NVIC_EnableIRQ>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f86:	e166      	b.n	8003256 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8158 	beq.w	8003250 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_GPIO_Init+0x48>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d007      	beq.n	8002fc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fb4:	2b11      	cmp	r3, #17
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b12      	cmp	r3, #18
 8002fbe:	d130      	bne.n	8003022 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	f003 0201 	and.w	r2, r3, #1
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0xea>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b12      	cmp	r3, #18
 8003060:	d123      	bne.n	80030aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	08da      	lsrs	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3208      	adds	r2, #8
 80030a4:	6939      	ldr	r1, [r7, #16]
 80030a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0203 	and.w	r2, r3, #3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80b2 	beq.w	8003250 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ec:	4b61      	ldr	r3, [pc, #388]	; (8003274 <HAL_GPIO_Init+0x2fc>)
 80030ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f0:	4a60      	ldr	r2, [pc, #384]	; (8003274 <HAL_GPIO_Init+0x2fc>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6613      	str	r3, [r2, #96]	; 0x60
 80030f8:	4b5e      	ldr	r3, [pc, #376]	; (8003274 <HAL_GPIO_Init+0x2fc>)
 80030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003104:	4a5c      	ldr	r2, [pc, #368]	; (8003278 <HAL_GPIO_Init+0x300>)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	220f      	movs	r2, #15
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800312e:	d02b      	beq.n	8003188 <HAL_GPIO_Init+0x210>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_GPIO_Init+0x304>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d025      	beq.n	8003184 <HAL_GPIO_Init+0x20c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a51      	ldr	r2, [pc, #324]	; (8003280 <HAL_GPIO_Init+0x308>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d01f      	beq.n	8003180 <HAL_GPIO_Init+0x208>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a50      	ldr	r2, [pc, #320]	; (8003284 <HAL_GPIO_Init+0x30c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d019      	beq.n	800317c <HAL_GPIO_Init+0x204>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a4f      	ldr	r2, [pc, #316]	; (8003288 <HAL_GPIO_Init+0x310>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <HAL_GPIO_Init+0x200>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a4e      	ldr	r2, [pc, #312]	; (800328c <HAL_GPIO_Init+0x314>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00d      	beq.n	8003174 <HAL_GPIO_Init+0x1fc>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a4d      	ldr	r2, [pc, #308]	; (8003290 <HAL_GPIO_Init+0x318>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <HAL_GPIO_Init+0x1f8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a4c      	ldr	r2, [pc, #304]	; (8003294 <HAL_GPIO_Init+0x31c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d101      	bne.n	800316c <HAL_GPIO_Init+0x1f4>
 8003168:	2307      	movs	r3, #7
 800316a:	e00e      	b.n	800318a <HAL_GPIO_Init+0x212>
 800316c:	2308      	movs	r3, #8
 800316e:	e00c      	b.n	800318a <HAL_GPIO_Init+0x212>
 8003170:	2306      	movs	r3, #6
 8003172:	e00a      	b.n	800318a <HAL_GPIO_Init+0x212>
 8003174:	2305      	movs	r3, #5
 8003176:	e008      	b.n	800318a <HAL_GPIO_Init+0x212>
 8003178:	2304      	movs	r3, #4
 800317a:	e006      	b.n	800318a <HAL_GPIO_Init+0x212>
 800317c:	2303      	movs	r3, #3
 800317e:	e004      	b.n	800318a <HAL_GPIO_Init+0x212>
 8003180:	2302      	movs	r3, #2
 8003182:	e002      	b.n	800318a <HAL_GPIO_Init+0x212>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_GPIO_Init+0x212>
 8003188:	2300      	movs	r3, #0
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	f002 0203 	and.w	r2, r2, #3
 8003190:	0092      	lsls	r2, r2, #2
 8003192:	4093      	lsls	r3, r2
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800319a:	4937      	ldr	r1, [pc, #220]	; (8003278 <HAL_GPIO_Init+0x300>)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	3302      	adds	r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031a8:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_GPIO_Init+0x320>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031cc:	4a32      	ldr	r2, [pc, #200]	; (8003298 <HAL_GPIO_Init+0x320>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <HAL_GPIO_Init+0x320>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031f6:	4a28      	ldr	r2, [pc, #160]	; (8003298 <HAL_GPIO_Init+0x320>)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031fc:	4b26      	ldr	r3, [pc, #152]	; (8003298 <HAL_GPIO_Init+0x320>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_GPIO_Init+0x320>)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_GPIO_Init+0x320>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800324a:	4a13      	ldr	r2, [pc, #76]	; (8003298 <HAL_GPIO_Init+0x320>)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3301      	adds	r3, #1
 8003254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	f47f ae91 	bne.w	8002f88 <HAL_GPIO_Init+0x10>
  }
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	40010000 	.word	0x40010000
 800327c:	48000400 	.word	0x48000400
 8003280:	48000800 	.word	0x48000800
 8003284:	48000c00 	.word	0x48000c00
 8003288:	48001000 	.word	0x48001000
 800328c:	48001400 	.word	0x48001400
 8003290:	48001800 	.word	0x48001800
 8003294:	48001c00 	.word	0x48001c00
 8003298:	40010400 	.word	0x40010400

0800329c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
 80032a8:	4613      	mov	r3, r2
 80032aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ac:	787b      	ldrb	r3, [r7, #1]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032b8:	e002      	b.n	80032c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	041a      	lsls	r2, r3, #16
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43d9      	mvns	r1, r3
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	400b      	ands	r3, r1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003302:	b08f      	sub	sp, #60	; 0x3c
 8003304:	af0a      	add	r7, sp, #40	; 0x28
 8003306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e116      	b.n	8003540 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fb95 	bl	8002a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2203      	movs	r2, #3
 8003336:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f003 fe87 	bl	8007064 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	687e      	ldr	r6, [r7, #4]
 800335e:	466d      	mov	r5, sp
 8003360:	f106 0410 	add.w	r4, r6, #16
 8003364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800336a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800336c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003370:	e885 0003 	stmia.w	r5, {r0, r1}
 8003374:	1d33      	adds	r3, r6, #4
 8003376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003378:	6838      	ldr	r0, [r7, #0]
 800337a:	f003 fe21 	bl	8006fc0 <USB_CoreInit>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0d7      	b.n	8003540 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f003 fe75 	bl	8007086 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	e04a      	b.n	8003438 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	333d      	adds	r3, #61	; 0x3d
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	333c      	adds	r3, #60	; 0x3c
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	b298      	uxth	r0, r3
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3342      	adds	r3, #66	; 0x42
 80033de:	4602      	mov	r2, r0
 80033e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	333f      	adds	r3, #63	; 0x3f
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	3344      	adds	r3, #68	; 0x44
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3348      	adds	r3, #72	; 0x48
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	3350      	adds	r3, #80	; 0x50
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	3301      	adds	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	d3af      	bcc.n	80033a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	e044      	b.n	80034d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	3301      	adds	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d3b5      	bcc.n	8003448 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	687e      	ldr	r6, [r7, #4]
 80034e4:	466d      	mov	r5, sp
 80034e6:	f106 0410 	add.w	r4, r6, #16
 80034ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80034fa:	1d33      	adds	r3, r6, #4
 80034fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	f003 fdec 	bl	80070dc <USB_DevInit>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e014      	b.n	8003540 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b01      	cmp	r3, #1
 800352c:	d102      	bne.n	8003534 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f80a 	bl	8003548 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f003 ff7c 	bl	8007436 <USB_DevDisconnect>

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003548 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357a:	f043 0303 	orr.w	r3, r3, #3
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003594:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800359c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a0:	d102      	bne.n	80035a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80035a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a6:	e00b      	b.n	80035c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80035a8:	4b08      	ldr	r3, [pc, #32]	; (80035cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80035aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b6:	d102      	bne.n	80035be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80035b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035bc:	e000      	b.n	80035c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80035be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40007000 	.word	0x40007000

080035d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d141      	bne.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035de:	4b4b      	ldr	r3, [pc, #300]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ea:	d131      	bne.n	8003650 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035ec:	4b47      	ldr	r3, [pc, #284]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f2:	4a46      	ldr	r2, [pc, #280]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035fc:	4b43      	ldr	r3, [pc, #268]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003604:	4a41      	ldr	r2, [pc, #260]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800360a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800360c:	4b40      	ldr	r3, [pc, #256]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2232      	movs	r2, #50	; 0x32
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	4a3f      	ldr	r2, [pc, #252]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	0c9b      	lsrs	r3, r3, #18
 800361e:	3301      	adds	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003622:	e002      	b.n	800362a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3b01      	subs	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800362a:	4b38      	ldr	r3, [pc, #224]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d102      	bne.n	800363e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f2      	bne.n	8003624 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800363e:	4b33      	ldr	r3, [pc, #204]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364a:	d158      	bne.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e057      	b.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003650:	4b2e      	ldr	r3, [pc, #184]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003656:	4a2d      	ldr	r2, [pc, #180]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800365c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003660:	e04d      	b.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003668:	d141      	bne.n	80036ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800366a:	4b28      	ldr	r3, [pc, #160]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	d131      	bne.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367e:	4a23      	ldr	r2, [pc, #140]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003688:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003690:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003696:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2232      	movs	r2, #50	; 0x32
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	0c9b      	lsrs	r3, r3, #18
 80036aa:	3301      	adds	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ae:	e002      	b.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c2:	d102      	bne.n	80036ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f2      	bne.n	80036b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d112      	bne.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e011      	b.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036ec:	e007      	b.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036ee:	4b07      	ldr	r3, [pc, #28]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f6:	4a05      	ldr	r2, [pc, #20]	; (800370c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40007000 	.word	0x40007000
 8003710:	20000000 	.word	0x20000000
 8003714:	431bde83 	.word	0x431bde83

08003718 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_PWREx_EnableVddUSB+0x1c>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4a04      	ldr	r2, [pc, #16]	; (8003734 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003726:	6053      	str	r3, [r2, #4]
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40007000 	.word	0x40007000

08003738 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_PWREx_EnableVddIO2+0x1c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003746:	6053      	str	r3, [r2, #4]
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40007000 	.word	0x40007000

08003758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f000 bc16 	b.w	8003f98 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376c:	4ba0      	ldr	r3, [pc, #640]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003776:	4b9e      	ldr	r3, [pc, #632]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80e4 	beq.w	8003956 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4c>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	f040 808b 	bne.w	80038b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	f040 8087 	bne.w	80038b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037a4:	4b92      	ldr	r3, [pc, #584]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_OscConfig+0x64>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e3ed      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	4b8b      	ldr	r3, [pc, #556]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <HAL_RCC_OscConfig+0x7e>
 80037cc:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d4:	e005      	b.n	80037e2 <HAL_RCC_OscConfig+0x8a>
 80037d6:	4b86      	ldr	r3, [pc, #536]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d223      	bcs.n	800382e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fdfa 	bl	80043e4 <RCC_SetFlashLatencyFromMSIRange>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e3ce      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037fa:	4b7d      	ldr	r3, [pc, #500]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7c      	ldr	r2, [pc, #496]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4977      	ldr	r1, [pc, #476]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003818:	4b75      	ldr	r3, [pc, #468]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	4972      	ldr	r1, [pc, #456]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
 800382c:	e025      	b.n	800387a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382e:	4b70      	ldr	r3, [pc, #448]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6f      	ldr	r2, [pc, #444]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b6d      	ldr	r3, [pc, #436]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	496a      	ldr	r1, [pc, #424]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800384c:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	4965      	ldr	r1, [pc, #404]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fdba 	bl	80043e4 <RCC_SetFlashLatencyFromMSIRange>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e38e      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800387a:	f000 fcbf 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 800387e:	4601      	mov	r1, r0
 8003880:	4b5b      	ldr	r3, [pc, #364]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	4a5a      	ldr	r2, [pc, #360]	; (80039f4 <HAL_RCC_OscConfig+0x29c>)
 800388c:	5cd3      	ldrb	r3, [r2, r3]
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	fa21 f303 	lsr.w	r3, r1, r3
 8003896:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <HAL_RCC_OscConfig+0x2a0>)
 8003898:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800389a:	4b58      	ldr	r3, [pc, #352]	; (80039fc <HAL_RCC_OscConfig+0x2a4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f948 	bl	8002b34 <HAL_InitTick>
 80038a4:	4603      	mov	r3, r0
 80038a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d052      	beq.n	8003954 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	e372      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d032      	beq.n	8003920 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ba:	4b4d      	ldr	r3, [pc, #308]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a4c      	ldr	r2, [pc, #304]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038c6:	f7ff fa47 	bl	8002d58 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ce:	f7ff fa43 	bl	8002d58 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e35b      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ec:	4b40      	ldr	r3, [pc, #256]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a3f      	ldr	r2, [pc, #252]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80038f2:	f043 0308 	orr.w	r3, r3, #8
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b3d      	ldr	r3, [pc, #244]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	493a      	ldr	r1, [pc, #232]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800390a:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	4935      	ldr	r1, [pc, #212]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
 800391e:	e01a      	b.n	8003956 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003920:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a32      	ldr	r2, [pc, #200]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800392c:	f7ff fa14 	bl	8002d58 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003934:	f7ff fa10 	bl	8002d58 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e328      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1dc>
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003954:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d073      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d005      	beq.n	8003974 <HAL_RCC_OscConfig+0x21c>
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d10e      	bne.n	800398c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d10b      	bne.n	800398c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d063      	beq.n	8003a48 <HAL_RCC_OscConfig+0x2f0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d15f      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e305      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d106      	bne.n	80039a4 <HAL_RCC_OscConfig+0x24c>
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e01d      	b.n	80039e0 <HAL_RCC_OscConfig+0x288>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x270>
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a0f      	ldr	r2, [pc, #60]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0x288>
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a05      	ldr	r2, [pc, #20]	; (80039f0 <HAL_RCC_OscConfig+0x298>)
 80039da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01b      	beq.n	8003a20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7ff f9b6 	bl	8002d58 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ee:	e010      	b.n	8003a12 <HAL_RCC_OscConfig+0x2ba>
 80039f0:	40021000 	.word	0x40021000
 80039f4:	0800a454 	.word	0x0800a454
 80039f8:	20000000 	.word	0x20000000
 80039fc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7ff f9aa 	bl	8002d58 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e2c2      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a12:	4baf      	ldr	r3, [pc, #700]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x2a8>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7ff f99a 	bl	8002d58 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7ff f996 	bl	8002d58 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e2ae      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a3a:	4ba5      	ldr	r3, [pc, #660]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x2d0>
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d060      	beq.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_OscConfig+0x310>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b0c      	cmp	r3, #12
 8003a60:	d119      	bne.n	8003a96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d116      	bne.n	8003a96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a68:	4b99      	ldr	r3, [pc, #612]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_OscConfig+0x328>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e28b      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a80:	4b93      	ldr	r3, [pc, #588]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	4990      	ldr	r1, [pc, #576]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a94:	e040      	b.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d023      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9e:	4b8c      	ldr	r3, [pc, #560]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a8b      	ldr	r2, [pc, #556]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7ff f955 	bl	8002d58 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7ff f951 	bl	8002d58 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e269      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac4:	4b82      	ldr	r3, [pc, #520]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad0:	4b7f      	ldr	r3, [pc, #508]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	497c      	ldr	r1, [pc, #496]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
 8003ae4:	e018      	b.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae6:	4b7a      	ldr	r3, [pc, #488]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a79      	ldr	r2, [pc, #484]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7ff f931 	bl	8002d58 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afa:	f7ff f92d 	bl	8002d58 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e245      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b0c:	4b70      	ldr	r3, [pc, #448]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d03c      	beq.n	8003b9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2c:	4b68      	ldr	r3, [pc, #416]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b32:	4a67      	ldr	r2, [pc, #412]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7ff f90c 	bl	8002d58 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b44:	f7ff f908 	bl	8002d58 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e220      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b56:	4b5e      	ldr	r3, [pc, #376]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ef      	beq.n	8003b44 <HAL_RCC_OscConfig+0x3ec>
 8003b64:	e01b      	b.n	8003b9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b66:	4b5a      	ldr	r3, [pc, #360]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6c:	4a58      	ldr	r2, [pc, #352]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7ff f8ef 	bl	8002d58 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7e:	f7ff f8eb 	bl	8002d58 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e203      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b90:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ef      	bne.n	8003b7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80a6 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bb0:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	4b44      	ldr	r3, [pc, #272]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	4a43      	ldr	r2, [pc, #268]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc8:	4b41      	ldr	r3, [pc, #260]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd8:	4b3e      	ldr	r3, [pc, #248]	; (8003cd4 <HAL_RCC_OscConfig+0x57c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d118      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be4:	4b3b      	ldr	r3, [pc, #236]	; (8003cd4 <HAL_RCC_OscConfig+0x57c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3a      	ldr	r2, [pc, #232]	; (8003cd4 <HAL_RCC_OscConfig+0x57c>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf0:	f7ff f8b2 	bl	8002d58 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf8:	f7ff f8ae 	bl	8002d58 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1c6      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0a:	4b32      	ldr	r3, [pc, #200]	; (8003cd4 <HAL_RCC_OscConfig+0x57c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d108      	bne.n	8003c30 <HAL_RCC_OscConfig+0x4d8>
 8003c1e:	4b2c      	ldr	r3, [pc, #176]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2e:	e024      	b.n	8003c7a <HAL_RCC_OscConfig+0x522>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b05      	cmp	r3, #5
 8003c36:	d110      	bne.n	8003c5a <HAL_RCC_OscConfig+0x502>
 8003c38:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c48:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	4a20      	ldr	r2, [pc, #128]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c58:	e00f      	b.n	8003c7a <HAL_RCC_OscConfig+0x522>
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c60:	4a1b      	ldr	r2, [pc, #108]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c6a:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003c72:	f023 0304 	bic.w	r3, r3, #4
 8003c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d016      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7ff f869 	bl	8002d58 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7ff f865 	bl	8002d58 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e17b      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_OscConfig+0x578>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0ed      	beq.n	8003c8a <HAL_RCC_OscConfig+0x532>
 8003cae:	e01a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7ff f852 	bl	8002d58 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb6:	e00f      	b.n	8003cd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7ff f84e 	bl	8002d58 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d906      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e164      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd8:	4ba8      	ldr	r3, [pc, #672]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e8      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce6:	7ffb      	ldrb	r3, [r7, #31]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cec:	4ba3      	ldr	r3, [pc, #652]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	4aa2      	ldr	r2, [pc, #648]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d03c      	beq.n	8003d7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01c      	beq.n	8003d46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d0c:	4b9b      	ldr	r3, [pc, #620]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d12:	4a9a      	ldr	r2, [pc, #616]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7ff f81c 	bl	8002d58 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d24:	f7ff f818 	bl	8002d58 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e130      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d36:	4b91      	ldr	r3, [pc, #580]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ef      	beq.n	8003d24 <HAL_RCC_OscConfig+0x5cc>
 8003d44:	e01b      	b.n	8003d7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d46:	4b8d      	ldr	r3, [pc, #564]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d4c:	4a8b      	ldr	r2, [pc, #556]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d56:	f7fe ffff 	bl	8002d58 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d5e:	f7fe fffb 	bl	8002d58 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e113      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d70:	4b82      	ldr	r3, [pc, #520]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ef      	bne.n	8003d5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8107 	beq.w	8003f96 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	f040 80cb 	bne.w	8003f28 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d92:	4b7a      	ldr	r3, [pc, #488]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0203 	and.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d12c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	3b01      	subs	r3, #1
 8003db2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d123      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d11b      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d113      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	3b01      	subs	r3, #1
 8003de6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d109      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d06d      	beq.n	8003edc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d068      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e06:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e12:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0ba      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e22:	4b56      	ldr	r3, [pc, #344]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a55      	ldr	r2, [pc, #340]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003e28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e2e:	f7fe ff93 	bl	8002d58 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fe ff8f 	bl	8002d58 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e0a7      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e48:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e54:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <HAL_RCC_OscConfig+0x828>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e64:	3a01      	subs	r2, #1
 8003e66:	0112      	lsls	r2, r2, #4
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e6e:	0212      	lsls	r2, r2, #8
 8003e70:	4311      	orrs	r1, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e76:	0852      	lsrs	r2, r2, #1
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	0552      	lsls	r2, r2, #21
 8003e7c:	4311      	orrs	r1, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e82:	0852      	lsrs	r2, r2, #1
 8003e84:	3a01      	subs	r2, #1
 8003e86:	0652      	lsls	r2, r2, #25
 8003e88:	4311      	orrs	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e8e:	06d2      	lsls	r2, r2, #27
 8003e90:	430a      	orrs	r2, r1
 8003e92:	493a      	ldr	r1, [pc, #232]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e98:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a37      	ldr	r2, [pc, #220]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea4:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a34      	ldr	r2, [pc, #208]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eb0:	f7fe ff52 	bl	8002d58 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fe ff4e 	bl	8002d58 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e066      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ed6:	e05e      	b.n	8003f96 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e05d      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003edc:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d156      	bne.n	8003f96 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ee8:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f00:	f7fe ff2a 	bl	8002d58 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe ff26 	bl	8002d58 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e03e      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x7b0>
 8003f26:	e036      	b.n	8003f96 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d031      	beq.n	8003f92 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f38:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f46:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003f4c:	f023 0303 	bic.w	r3, r3, #3
 8003f50:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003f58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fe fef9 	bl	8002d58 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f68:	e00c      	b.n	8003f84 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe fef5 	bl	8002d58 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d905      	bls.n	8003f84 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e00d      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_OscConfig+0x848>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1ec      	bne.n	8003f6a <HAL_RCC_OscConfig+0x812>
 8003f90:	e001      	b.n	8003f96 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e10f      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b89      	ldr	r3, [pc, #548]	; (80041e4 <HAL_RCC_ClockConfig+0x240>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d910      	bls.n	8003fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b86      	ldr	r3, [pc, #536]	; (80041e4 <HAL_RCC_ClockConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 020f 	bic.w	r2, r3, #15
 8003fd2:	4984      	ldr	r1, [pc, #528]	; (80041e4 <HAL_RCC_ClockConfig+0x240>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b82      	ldr	r3, [pc, #520]	; (80041e4 <HAL_RCC_ClockConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0f7      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8089 	beq.w	800410c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d133      	bne.n	800406a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004002:	4b79      	ldr	r3, [pc, #484]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e0e4      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004012:	f000 fa41 	bl	8004498 <RCC_GetSysClockFreqFromPLLSource>
 8004016:	4602      	mov	r2, r0
 8004018:	4b74      	ldr	r3, [pc, #464]	; (80041ec <HAL_RCC_ClockConfig+0x248>)
 800401a:	429a      	cmp	r2, r3
 800401c:	d955      	bls.n	80040ca <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800401e:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800402a:	4b6f      	ldr	r3, [pc, #444]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004032:	4a6d      	ldr	r2, [pc, #436]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 8004034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004038:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e044      	b.n	80040ca <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d03e      	beq.n	80040ca <HAL_RCC_ClockConfig+0x126>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d13a      	bne.n	80040ca <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004054:	4b64      	ldr	r3, [pc, #400]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405c:	4a62      	ldr	r2, [pc, #392]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 800405e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004062:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	e02f      	b.n	80040ca <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004072:	4b5d      	ldr	r3, [pc, #372]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d115      	bne.n	80040aa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0ac      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800408a:	4b57      	ldr	r3, [pc, #348]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0a0      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800409a:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e098      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80040aa:	f000 f8a7 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b4e      	ldr	r3, [pc, #312]	; (80041ec <HAL_RCC_ClockConfig+0x248>)
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d909      	bls.n	80040ca <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040b6:	4b4c      	ldr	r3, [pc, #304]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040be:	4a4a      	ldr	r2, [pc, #296]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 80040c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4944      	ldr	r1, [pc, #272]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040dc:	f7fe fe3c 	bl	8002d58 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fe fe38 	bl	8002d58 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e070      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b33      	ldr	r3, [pc, #204]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4930      	ldr	r1, [pc, #192]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
 800412a:	e008      	b.n	800413e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b80      	cmp	r3, #128	; 0x80
 8004130:	d105      	bne.n	800413e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004132:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	4a2c      	ldr	r2, [pc, #176]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 8004138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800413e:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <HAL_RCC_ClockConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d210      	bcs.n	800416e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414c:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <HAL_RCC_ClockConfig+0x240>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 020f 	bic.w	r2, r3, #15
 8004154:	4923      	ldr	r1, [pc, #140]	; (80041e4 <HAL_RCC_ClockConfig+0x240>)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415c:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <HAL_RCC_ClockConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d001      	beq.n	800416e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e036      	b.n	80041dc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417a:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4918      	ldr	r1, [pc, #96]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 8004188:	4313      	orrs	r3, r2
 800418a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4910      	ldr	r1, [pc, #64]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041ac:	f000 f826 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041b0:	4601      	mov	r1, r0
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_RCC_ClockConfig+0x244>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <HAL_RCC_ClockConfig+0x24c>)
 80041be:	5cd3      	ldrb	r3, [r2, r3]
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	fa21 f303 	lsr.w	r3, r1, r3
 80041c8:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <HAL_RCC_ClockConfig+0x250>)
 80041ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <HAL_RCC_ClockConfig+0x254>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe fcaf 	bl	8002b34 <HAL_InitTick>
 80041d6:	4603      	mov	r3, r0
 80041d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40022000 	.word	0x40022000
 80041e8:	40021000 	.word	0x40021000
 80041ec:	04c4b400 	.word	0x04c4b400
 80041f0:	0800a454 	.word	0x0800a454
 80041f4:	20000000 	.word	0x20000000
 80041f8:	20000004 	.word	0x20000004

080041fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b089      	sub	sp, #36	; 0x24
 8004200:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800420a:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_RCC_GetSysClockFreq+0x104>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004214:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <HAL_RCC_GetSysClockFreq+0x104>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x34>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b0c      	cmp	r3, #12
 8004228:	d121      	bne.n	800426e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d11e      	bne.n	800426e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004230:	4b33      	ldr	r3, [pc, #204]	; (8004300 <HAL_RCC_GetSysClockFreq+0x104>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800423c:	4b30      	ldr	r3, [pc, #192]	; (8004300 <HAL_RCC_GetSysClockFreq+0x104>)
 800423e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	e005      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <HAL_RCC_GetSysClockFreq+0x104>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004258:	4a2a      	ldr	r2, [pc, #168]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004260:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10d      	bne.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800426c:	e00a      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d102      	bne.n	800427a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004274:	4b24      	ldr	r3, [pc, #144]	; (8004308 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	e004      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d101      	bne.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004280:	4b22      	ldr	r3, [pc, #136]	; (800430c <HAL_RCC_GetSysClockFreq+0x110>)
 8004282:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b0c      	cmp	r3, #12
 8004288:	d133      	bne.n	80042f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800428a:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <HAL_RCC_GetSysClockFreq+0x104>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d002      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800429a:	2b03      	cmp	r3, #3
 800429c:	d003      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800429e:	e005      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042a2:	617b      	str	r3, [r7, #20]
      break;
 80042a4:	e005      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042a6:	4b19      	ldr	r3, [pc, #100]	; (800430c <HAL_RCC_GetSysClockFreq+0x110>)
 80042a8:	617b      	str	r3, [r7, #20]
      break;
 80042aa:	e002      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	617b      	str	r3, [r7, #20]
      break;
 80042b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042b2:	4b13      	ldr	r3, [pc, #76]	; (8004300 <HAL_RCC_GetSysClockFreq+0x104>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	3301      	adds	r3, #1
 80042be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <HAL_RCC_GetSysClockFreq+0x104>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	fb02 f203 	mul.w	r2, r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_RCC_GetSysClockFreq+0x104>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	0e5b      	lsrs	r3, r3, #25
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	3301      	adds	r3, #1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042f2:	69bb      	ldr	r3, [r7, #24]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3724      	adds	r7, #36	; 0x24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40021000 	.word	0x40021000
 8004304:	0800a46c 	.word	0x0800a46c
 8004308:	00f42400 	.word	0x00f42400
 800430c:	007a1200 	.word	0x007a1200

08004310 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <HAL_RCC_GetHCLKFreq+0x14>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20000000 	.word	0x20000000

08004328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800432c:	f7ff fff0 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004330:	4601      	mov	r1, r0
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4a04      	ldr	r2, [pc, #16]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800433e:	5cd3      	ldrb	r3, [r2, r3]
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000
 8004350:	0800a464 	.word	0x0800a464

08004354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004358:	f7ff ffda 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 800435c:	4601      	mov	r1, r0
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	0adb      	lsrs	r3, r3, #11
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4a04      	ldr	r2, [pc, #16]	; (800437c <HAL_RCC_GetPCLK2Freq+0x28>)
 800436a:	5cd3      	ldrb	r3, [r2, r3]
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000
 800437c:	0800a464 	.word	0x0800a464

08004380 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	220f      	movs	r2, #15
 800438e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004390:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_RCC_GetClockConfig+0x5c>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0203 	and.w	r2, r3, #3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <HAL_RCC_GetClockConfig+0x5c>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <HAL_RCC_GetClockConfig+0x5c>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCC_GetClockConfig+0x5c>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	08db      	lsrs	r3, r3, #3
 80043ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <HAL_RCC_GetClockConfig+0x60>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 020f 	and.w	r2, r3, #15
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	601a      	str	r2, [r3, #0]
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40022000 	.word	0x40022000

080043e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043f0:	4b27      	ldr	r3, [pc, #156]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043fc:	f7ff f8c8 	bl	8003590 <HAL_PWREx_GetVoltageRange>
 8004400:	6178      	str	r0, [r7, #20]
 8004402:	e014      	b.n	800442e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004404:	4b22      	ldr	r3, [pc, #136]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	4a21      	ldr	r2, [pc, #132]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800440a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440e:	6593      	str	r3, [r2, #88]	; 0x58
 8004410:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800441c:	f7ff f8b8 	bl	8003590 <HAL_PWREx_GetVoltageRange>
 8004420:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004422:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004426:	4a1a      	ldr	r2, [pc, #104]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004434:	d10b      	bne.n	800444e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d913      	bls.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2ba0      	cmp	r3, #160	; 0xa0
 8004440:	d902      	bls.n	8004448 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004442:	2302      	movs	r3, #2
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e00d      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004448:	2301      	movs	r3, #1
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e00a      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b7f      	cmp	r3, #127	; 0x7f
 8004452:	d902      	bls.n	800445a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004454:	2302      	movs	r3, #2
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	e004      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b70      	cmp	r3, #112	; 0x70
 800445e:	d101      	bne.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004460:	2301      	movs	r3, #1
 8004462:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 020f 	bic.w	r2, r3, #15
 800446c:	4909      	ldr	r1, [pc, #36]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004474:	4b07      	ldr	r3, [pc, #28]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	429a      	cmp	r2, r3
 8004480:	d001      	beq.n	8004486 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	40022000 	.word	0x40022000

08004498 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80044a2:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d118      	bne.n	80044e0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044ae:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044ba:	4b27      	ldr	r3, [pc, #156]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e005      	b.n	80044d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044ca:	4b23      	ldr	r3, [pc, #140]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044d6:	4a21      	ldr	r2, [pc, #132]	; (800455c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044de:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044e0:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d002      	beq.n	80044f6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d003      	beq.n	80044fc <RCC_GetSysClockFreqFromPLLSource+0x64>
 80044f4:	e005      	b.n	8004502 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80044f6:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80044f8:	613b      	str	r3, [r7, #16]
    break;
 80044fa:	e005      	b.n	8004508 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80044fc:	4b19      	ldr	r3, [pc, #100]	; (8004564 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80044fe:	613b      	str	r3, [r7, #16]
    break;
 8004500:	e002      	b.n	8004508 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	613b      	str	r3, [r7, #16]
    break;
 8004506:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	3301      	adds	r3, #1
 8004514:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004516:	4b10      	ldr	r3, [pc, #64]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	fb02 f203 	mul.w	r2, r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	0e5b      	lsrs	r3, r3, #25
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	3301      	adds	r3, #1
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004548:	683b      	ldr	r3, [r7, #0]
}
 800454a:	4618      	mov	r0, r3
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	0800a46c 	.word	0x0800a46c
 8004560:	00f42400 	.word	0x00f42400
 8004564:	007a1200 	.word	0x007a1200

08004568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004570:	2300      	movs	r3, #0
 8004572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004574:	2300      	movs	r3, #0
 8004576:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004580:	2b00      	cmp	r3, #0
 8004582:	d03d      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d00b      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d804      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00e      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d015      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004598:	e01d      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800459a:	2b60      	cmp	r3, #96	; 0x60
 800459c:	d01e      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 800459e:	2b80      	cmp	r3, #128	; 0x80
 80045a0:	d01c      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80045a2:	e018      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045a4:	4b86      	ldr	r3, [pc, #536]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a85      	ldr	r2, [pc, #532]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045b0:	e015      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3304      	adds	r3, #4
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fafd 	bl	8004bb8 <RCCEx_PLLSAI1_Config>
 80045be:	4603      	mov	r3, r0
 80045c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045c2:	e00c      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3320      	adds	r3, #32
 80045c8:	2100      	movs	r1, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fbe4 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d4:	e003      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	74fb      	strb	r3, [r7, #19]
      break;
 80045da:	e000      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80045dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10b      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e4:	4b76      	ldr	r3, [pc, #472]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ea:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f2:	4973      	ldr	r1, [pc, #460]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80045fa:	e001      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d042      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004614:	d00f      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800461a:	d805      	bhi.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d011      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004624:	d017      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8004626:	e01f      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462c:	d01f      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d01c      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004634:	e018      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004636:	4b62      	ldr	r3, [pc, #392]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4a61      	ldr	r2, [pc, #388]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004642:	e015      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fab4 	bl	8004bb8 <RCCEx_PLLSAI1_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004654:	e00c      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3320      	adds	r3, #32
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fb9b 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004666:	e003      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	74fb      	strb	r3, [r7, #19]
      break;
 800466c:	e000      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800466e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004676:	4b52      	ldr	r3, [pc, #328]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800467c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	494e      	ldr	r1, [pc, #312]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800468c:	e001      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468e:	7cfb      	ldrb	r3, [r7, #19]
 8004690:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 809f 	beq.w	80047de <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a0:	2300      	movs	r3, #0
 80046a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046a4:	4b46      	ldr	r3, [pc, #280]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046b4:	2300      	movs	r3, #0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00d      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	4a40      	ldr	r2, [pc, #256]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6593      	str	r3, [r2, #88]	; 0x58
 80046c6:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d2:	2301      	movs	r3, #1
 80046d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d6:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3a      	ldr	r2, [pc, #232]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046e2:	f7fe fb39 	bl	8002d58 <HAL_GetTick>
 80046e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046e8:	e009      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fe fb35 	bl	8002d58 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d902      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	74fb      	strb	r3, [r7, #19]
        break;
 80046fc:	e005      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0ef      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d15b      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01f      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	429a      	cmp	r2, r3
 800472c:	d019      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004738:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800473a:	4b21      	ldr	r3, [pc, #132]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800474a:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800475a:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d016      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fe faf4 	bl	8002d58 <HAL_GetTick>
 8004770:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004772:	e00b      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004774:	f7fe faf0 	bl	8002d58 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d902      	bls.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	74fb      	strb	r3, [r7, #19]
            break;
 800478a:	e006      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0ec      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10c      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	4903      	ldr	r1, [pc, #12]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047b8:	e008      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047ba:	7cfb      	ldrb	r3, [r7, #19]
 80047bc:	74bb      	strb	r3, [r7, #18]
 80047be:	e005      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c8:	7cfb      	ldrb	r3, [r7, #19]
 80047ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047cc:	7c7b      	ldrb	r3, [r7, #17]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d105      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d2:	4ba0      	ldr	r3, [pc, #640]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	4a9f      	ldr	r2, [pc, #636]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ea:	4b9a      	ldr	r3, [pc, #616]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f023 0203 	bic.w	r2, r3, #3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f8:	4996      	ldr	r1, [pc, #600]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800480c:	4b91      	ldr	r3, [pc, #580]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f023 020c 	bic.w	r2, r3, #12
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	498e      	ldr	r1, [pc, #568]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800482e:	4b89      	ldr	r3, [pc, #548]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	4985      	ldr	r1, [pc, #532]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004850:	4b80      	ldr	r3, [pc, #512]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485e:	497d      	ldr	r1, [pc, #500]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004872:	4b78      	ldr	r3, [pc, #480]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004880:	4974      	ldr	r1, [pc, #464]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004894:	4b6f      	ldr	r3, [pc, #444]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	496c      	ldr	r1, [pc, #432]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048b6:	4b67      	ldr	r3, [pc, #412]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c4:	4963      	ldr	r1, [pc, #396]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048d8:	4b5e      	ldr	r3, [pc, #376]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048e6:	495b      	ldr	r1, [pc, #364]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048fa:	4b56      	ldr	r3, [pc, #344]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004908:	4952      	ldr	r1, [pc, #328]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800491c:	4b4d      	ldr	r3, [pc, #308]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	494a      	ldr	r1, [pc, #296]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800493e:	4b45      	ldr	r3, [pc, #276]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	4941      	ldr	r1, [pc, #260]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004960:	4b3c      	ldr	r3, [pc, #240]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004966:	f023 0203 	bic.w	r2, r3, #3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496e:	4939      	ldr	r1, [pc, #228]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d028      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004982:	4b34      	ldr	r3, [pc, #208]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004988:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004990:	4930      	ldr	r1, [pc, #192]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049a0:	d106      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a2:	4b2c      	ldr	r3, [pc, #176]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	4a2b      	ldr	r2, [pc, #172]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ac:	60d3      	str	r3, [r2, #12]
 80049ae:	e011      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3304      	adds	r3, #4
 80049be:	2101      	movs	r1, #1
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 f8f9 	bl	8004bb8 <RCCEx_PLLSAI1_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049ca:	7cfb      	ldrb	r3, [r7, #19]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
 80049d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d04d      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049e8:	d108      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049f0:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80049fa:	e012      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a02:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a0c:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a1a:	490e      	ldr	r1, [pc, #56]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a36:	60d3      	str	r3, [r2, #12]
 8004a38:	e020      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a42:	d109      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a02      	ldr	r2, [pc, #8]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4e:	60d3      	str	r3, [r2, #12]
 8004a50:	e014      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2101      	movs	r1, #1
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f8a5 	bl	8004bb8 <RCCEx_PLLSAI1_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d028      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a88:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a96:	4947      	ldr	r1, [pc, #284]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a41      	ldr	r2, [pc, #260]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]
 8004ab4:	e011      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004abe:	d10c      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f876 	bl	8004bb8 <RCCEx_PLLSAI1_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01e      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ae6:	4b33      	ldr	r3, [pc, #204]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af6:	492f      	ldr	r1, [pc, #188]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	2102      	movs	r1, #2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f851 	bl	8004bb8 <RCCEx_PLLSAI1_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b30:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b36:	f023 0204 	bic.w	r2, r3, #4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b40:	491c      	ldr	r1, [pc, #112]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b54:	4b17      	ldr	r3, [pc, #92]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b5a:	f023 0218 	bic.w	r2, r3, #24
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	4913      	ldr	r1, [pc, #76]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d017      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b88:	490a      	ldr	r1, [pc, #40]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b9a:	d105      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ba6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ba8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000

08004bb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bc6:	4b70      	ldr	r3, [pc, #448]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00e      	beq.n	8004bf0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bd2:	4b6d      	ldr	r3, [pc, #436]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0203 	and.w	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d103      	bne.n	8004bea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
       ||
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d13f      	bne.n	8004c6a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
 8004bee:	e03c      	b.n	8004c6a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d00c      	beq.n	8004c12 <RCCEx_PLLSAI1_Config+0x5a>
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d013      	beq.n	8004c24 <RCCEx_PLLSAI1_Config+0x6c>
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d120      	bne.n	8004c42 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c00:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d11d      	bne.n	8004c48 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c10:	e01a      	b.n	8004c48 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c12:	4b5d      	ldr	r3, [pc, #372]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c22:	e013      	b.n	8004c4c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c24:	4b58      	ldr	r3, [pc, #352]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10f      	bne.n	8004c50 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c30:	4b55      	ldr	r3, [pc, #340]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c40:	e006      	b.n	8004c50 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	73fb      	strb	r3, [r7, #15]
      break;
 8004c46:	e004      	b.n	8004c52 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004c48:	bf00      	nop
 8004c4a:	e002      	b.n	8004c52 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004c4c:	bf00      	nop
 8004c4e:	e000      	b.n	8004c52 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004c50:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d108      	bne.n	8004c6a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004c58:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f023 0203 	bic.w	r2, r3, #3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4948      	ldr	r1, [pc, #288]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f040 8086 	bne.w	8004d7e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c72:	4b45      	ldr	r3, [pc, #276]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a44      	ldr	r2, [pc, #272]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7e:	f7fe f86b 	bl	8002d58 <HAL_GetTick>
 8004c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c84:	e009      	b.n	8004c9a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c86:	f7fe f867 	bl	8002d58 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d902      	bls.n	8004c9a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	73fb      	strb	r3, [r7, #15]
        break;
 8004c98:	e005      	b.n	8004ca6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c9a:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ef      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d168      	bne.n	8004d7e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d113      	bne.n	8004cda <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cb2:	4b35      	ldr	r3, [pc, #212]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	4b35      	ldr	r3, [pc, #212]	; (8004d8c <RCCEx_PLLSAI1_Config+0x1d4>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6892      	ldr	r2, [r2, #8]
 8004cbe:	0211      	lsls	r1, r2, #8
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	68d2      	ldr	r2, [r2, #12]
 8004cc4:	06d2      	lsls	r2, r2, #27
 8004cc6:	4311      	orrs	r1, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6852      	ldr	r2, [r2, #4]
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	0112      	lsls	r2, r2, #4
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	492d      	ldr	r1, [pc, #180]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	610b      	str	r3, [r1, #16]
 8004cd8:	e02d      	b.n	8004d36 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d115      	bne.n	8004d0c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce0:	4b29      	ldr	r3, [pc, #164]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	4b2a      	ldr	r3, [pc, #168]	; (8004d90 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6892      	ldr	r2, [r2, #8]
 8004cec:	0211      	lsls	r1, r2, #8
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6912      	ldr	r2, [r2, #16]
 8004cf2:	0852      	lsrs	r2, r2, #1
 8004cf4:	3a01      	subs	r2, #1
 8004cf6:	0552      	lsls	r2, r2, #21
 8004cf8:	4311      	orrs	r1, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6852      	ldr	r2, [r2, #4]
 8004cfe:	3a01      	subs	r2, #1
 8004d00:	0112      	lsls	r2, r2, #4
 8004d02:	430a      	orrs	r2, r1
 8004d04:	4920      	ldr	r1, [pc, #128]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	610b      	str	r3, [r1, #16]
 8004d0a:	e014      	b.n	8004d36 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d0c:	4b1e      	ldr	r3, [pc, #120]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6892      	ldr	r2, [r2, #8]
 8004d18:	0211      	lsls	r1, r2, #8
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6952      	ldr	r2, [r2, #20]
 8004d1e:	0852      	lsrs	r2, r2, #1
 8004d20:	3a01      	subs	r2, #1
 8004d22:	0652      	lsls	r2, r2, #25
 8004d24:	4311      	orrs	r1, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6852      	ldr	r2, [r2, #4]
 8004d2a:	3a01      	subs	r2, #1
 8004d2c:	0112      	lsls	r2, r2, #4
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	4915      	ldr	r1, [pc, #84]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a13      	ldr	r2, [pc, #76]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d42:	f7fe f809 	bl	8002d58 <HAL_GetTick>
 8004d46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d48:	e009      	b.n	8004d5e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d4a:	f7fe f805 	bl	8002d58 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d902      	bls.n	8004d5e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	73fb      	strb	r3, [r7, #15]
          break;
 8004d5c:	e005      	b.n	8004d6a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ef      	beq.n	8004d4a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	4903      	ldr	r1, [pc, #12]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	07ff800f 	.word	0x07ff800f
 8004d90:	ff9f800f 	.word	0xff9f800f
 8004d94:	f9ff800f 	.word	0xf9ff800f

08004d98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004da6:	4b70      	ldr	r3, [pc, #448]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00e      	beq.n	8004dd0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004db2:	4b6d      	ldr	r3, [pc, #436]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0203 	and.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d103      	bne.n	8004dca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d13f      	bne.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
 8004dce:	e03c      	b.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d00c      	beq.n	8004df2 <RCCEx_PLLSAI2_Config+0x5a>
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d013      	beq.n	8004e04 <RCCEx_PLLSAI2_Config+0x6c>
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d120      	bne.n	8004e22 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004de0:	4b61      	ldr	r3, [pc, #388]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d11d      	bne.n	8004e28 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df0:	e01a      	b.n	8004e28 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004df2:	4b5d      	ldr	r3, [pc, #372]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d116      	bne.n	8004e2c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e02:	e013      	b.n	8004e2c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e04:	4b58      	ldr	r3, [pc, #352]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10f      	bne.n	8004e30 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e10:	4b55      	ldr	r3, [pc, #340]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d109      	bne.n	8004e30 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e20:	e006      	b.n	8004e30 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
      break;
 8004e26:	e004      	b.n	8004e32 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004e28:	bf00      	nop
 8004e2a:	e002      	b.n	8004e32 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004e2c:	bf00      	nop
 8004e2e:	e000      	b.n	8004e32 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004e30:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d108      	bne.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004e38:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f023 0203 	bic.w	r2, r3, #3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4948      	ldr	r1, [pc, #288]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 8086 	bne.w	8004f5e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e52:	4b45      	ldr	r3, [pc, #276]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a44      	ldr	r2, [pc, #272]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fd ff7b 	bl	8002d58 <HAL_GetTick>
 8004e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e64:	e009      	b.n	8004e7a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e66:	f7fd ff77 	bl	8002d58 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d902      	bls.n	8004e7a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	73fb      	strb	r3, [r7, #15]
        break;
 8004e78:	e005      	b.n	8004e86 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e7a:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1ef      	bne.n	8004e66 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d168      	bne.n	8004f5e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d113      	bne.n	8004eba <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e92:	4b35      	ldr	r3, [pc, #212]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	4b35      	ldr	r3, [pc, #212]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1d4>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6892      	ldr	r2, [r2, #8]
 8004e9e:	0211      	lsls	r1, r2, #8
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	68d2      	ldr	r2, [r2, #12]
 8004ea4:	06d2      	lsls	r2, r2, #27
 8004ea6:	4311      	orrs	r1, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6852      	ldr	r2, [r2, #4]
 8004eac:	3a01      	subs	r2, #1
 8004eae:	0112      	lsls	r2, r2, #4
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	492d      	ldr	r1, [pc, #180]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	614b      	str	r3, [r1, #20]
 8004eb8:	e02d      	b.n	8004f16 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d115      	bne.n	8004eec <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ec0:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6892      	ldr	r2, [r2, #8]
 8004ecc:	0211      	lsls	r1, r2, #8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6912      	ldr	r2, [r2, #16]
 8004ed2:	0852      	lsrs	r2, r2, #1
 8004ed4:	3a01      	subs	r2, #1
 8004ed6:	0552      	lsls	r2, r2, #21
 8004ed8:	4311      	orrs	r1, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6852      	ldr	r2, [r2, #4]
 8004ede:	3a01      	subs	r2, #1
 8004ee0:	0112      	lsls	r2, r2, #4
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	4920      	ldr	r1, [pc, #128]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	614b      	str	r3, [r1, #20]
 8004eea:	e014      	b.n	8004f16 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eec:	4b1e      	ldr	r3, [pc, #120]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6892      	ldr	r2, [r2, #8]
 8004ef8:	0211      	lsls	r1, r2, #8
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6952      	ldr	r2, [r2, #20]
 8004efe:	0852      	lsrs	r2, r2, #1
 8004f00:	3a01      	subs	r2, #1
 8004f02:	0652      	lsls	r2, r2, #25
 8004f04:	4311      	orrs	r1, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6852      	ldr	r2, [r2, #4]
 8004f0a:	3a01      	subs	r2, #1
 8004f0c:	0112      	lsls	r2, r2, #4
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	4915      	ldr	r1, [pc, #84]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f22:	f7fd ff19 	bl	8002d58 <HAL_GetTick>
 8004f26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f28:	e009      	b.n	8004f3e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f2a:	f7fd ff15 	bl	8002d58 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d902      	bls.n	8004f3e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f3c:	e005      	b.n	8004f4a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0ef      	beq.n	8004f2a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	4903      	ldr	r1, [pc, #12]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	07ff800f 	.word	0x07ff800f
 8004f70:	ff9f800f 	.word	0xff9f800f
 8004f74:	f9ff800f 	.word	0xf9ff800f

08004f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e095      	b.n	80050b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d108      	bne.n	8004fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f9a:	d009      	beq.n	8004fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	61da      	str	r2, [r3, #28]
 8004fa2:	e005      	b.n	8004fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fd fcb8 	bl	8002940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ff0:	d902      	bls.n	8004ff8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	e002      	b.n	8004ffe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ffc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005006:	d007      	beq.n	8005018 <HAL_SPI_Init+0xa0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005010:	d002      	beq.n	8005018 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	ea42 0103 	orr.w	r1, r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	f003 0204 	and.w	r2, r3, #4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005094:	ea42 0103 	orr.w	r1, r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b088      	sub	sp, #32
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_SPI_Transmit+0x22>
 80050dc:	2302      	movs	r3, #2
 80050de:	e158      	b.n	8005392 <HAL_SPI_Transmit+0x2d4>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050e8:	f7fd fe36 	bl	8002d58 <HAL_GetTick>
 80050ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d002      	beq.n	8005104 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
 8005100:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005102:	e13d      	b.n	8005380 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_SPI_Transmit+0x52>
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d102      	bne.n	8005116 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005114:	e134      	b.n	8005380 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2203      	movs	r2, #3
 800511a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005160:	d10f      	bne.n	8005182 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005170:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005180:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d007      	beq.n	80051a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051a8:	d94b      	bls.n	8005242 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_SPI_Transmit+0xfa>
 80051b2:	8afb      	ldrh	r3, [r7, #22]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d13e      	bne.n	8005236 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	881a      	ldrh	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051dc:	e02b      	b.n	8005236 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d112      	bne.n	8005212 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	881a      	ldrh	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	1c9a      	adds	r2, r3, #2
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005210:	e011      	b.n	8005236 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005212:	f7fd fda1 	bl	8002d58 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d803      	bhi.n	800522a <HAL_SPI_Transmit+0x16c>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d102      	bne.n	8005230 <HAL_SPI_Transmit+0x172>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005234:	e0a4      	b.n	8005380 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ce      	bne.n	80051de <HAL_SPI_Transmit+0x120>
 8005240:	e07c      	b.n	800533c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_SPI_Transmit+0x192>
 800524a:	8afb      	ldrh	r3, [r7, #22]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d170      	bne.n	8005332 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b01      	cmp	r3, #1
 8005258:	d912      	bls.n	8005280 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b02      	subs	r3, #2
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800527e:	e058      	b.n	8005332 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	7812      	ldrb	r2, [r2, #0]
 800528c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80052a6:	e044      	b.n	8005332 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d12b      	bne.n	800530e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d912      	bls.n	80052e6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	881a      	ldrh	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	1c9a      	adds	r2, r3, #2
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b02      	subs	r3, #2
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052e4:	e025      	b.n	8005332 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	7812      	ldrb	r2, [r2, #0]
 80052f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800530c:	e011      	b.n	8005332 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800530e:	f7fd fd23 	bl	8002d58 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d803      	bhi.n	8005326 <HAL_SPI_Transmit+0x268>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d102      	bne.n	800532c <HAL_SPI_Transmit+0x26e>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d102      	bne.n	8005332 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005330:	e026      	b.n	8005380 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1b5      	bne.n	80052a8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f941 	bl	80055c8 <SPI_EndRxTxTransaction>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e000      	b.n	8005380 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800537e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005390:	7ffb      	ldrb	r3, [r7, #31]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053ac:	f7fd fcd4 	bl	8002d58 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	4413      	add	r3, r2
 80053ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053bc:	f7fd fccc 	bl	8002d58 <HAL_GetTick>
 80053c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053c2:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	015b      	lsls	r3, r3, #5
 80053c8:	0d1b      	lsrs	r3, r3, #20
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	fb02 f303 	mul.w	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d2:	e054      	b.n	800547e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d050      	beq.n	800547e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053dc:	f7fd fcbc 	bl	8002d58 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d902      	bls.n	80053f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d13d      	bne.n	800546e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800540a:	d111      	bne.n	8005430 <SPI_WaitFlagStateUntilTimeout+0x94>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005414:	d004      	beq.n	8005420 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541e:	d107      	bne.n	8005430 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005438:	d10f      	bne.n	800545a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e017      	b.n	800549e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3b01      	subs	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4013      	ands	r3, r2
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	429a      	cmp	r2, r3
 800548c:	bf0c      	ite	eq
 800548e:	2301      	moveq	r3, #1
 8005490:	2300      	movne	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	429a      	cmp	r2, r3
 800549a:	d19b      	bne.n	80053d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3720      	adds	r7, #32
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000000 	.word	0x20000000

080054ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054ba:	f7fd fc4d 	bl	8002d58 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	4413      	add	r3, r2
 80054c8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054ca:	f7fd fc45 	bl	8002d58 <HAL_GetTick>
 80054ce:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054d0:	4b3c      	ldr	r3, [pc, #240]	; (80055c4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	00da      	lsls	r2, r3, #3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	0d1b      	lsrs	r3, r3, #20
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
 80054e6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80054e8:	e05f      	b.n	80055aa <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054f0:	d106      	bne.n	8005500 <SPI_WaitFifoStateUntilTimeout+0x54>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d050      	beq.n	80055aa <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005508:	f7fd fc26 	bl	8002d58 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	429a      	cmp	r2, r3
 8005516:	d902      	bls.n	800551e <SPI_WaitFifoStateUntilTimeout+0x72>
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d13d      	bne.n	800559a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800552c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005536:	d111      	bne.n	800555c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005540:	d004      	beq.n	800554c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554a:	d107      	bne.n	800555c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005564:	d10f      	bne.n	8005586 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e010      	b.n	80055bc <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4013      	ands	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d197      	bne.n	80054ea <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000000 	.word	0x20000000

080055c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2200      	movs	r2, #0
 80055dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff ff63 	bl	80054ac <SPI_WaitFifoStateUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f0:	f043 0220 	orr.w	r2, r3, #32
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e027      	b.n	800564c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff fec8 	bl	800539c <SPI_WaitFlagStateUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e014      	b.n	800564c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2200      	movs	r2, #0
 800562a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7ff ff3c 	bl	80054ac <SPI_WaitFifoStateUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563e:	f043 0220 	orr.w	r2, r3, #32
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e000      	b.n	800564c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e049      	b.n	80056fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f841 	bl	8005702 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f000 fc60 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	d001      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e04f      	b.n	80057d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a23      	ldr	r2, [pc, #140]	; (80057dc <HAL_TIM_Base_Start_IT+0xc4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01d      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575a:	d018      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00e      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1c      	ldr	r2, [pc, #112]	; (80057e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d009      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1b      	ldr	r2, [pc, #108]	; (80057ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d004      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x76>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a19      	ldr	r2, [pc, #100]	; (80057f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d115      	bne.n	80057ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005796:	4013      	ands	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b06      	cmp	r3, #6
 800579e:	d015      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0xb4>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a6:	d011      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b8:	e008      	b.n	80057cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e000      	b.n	80057ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800
 80057e8:	40000c00 	.word	0x40000c00
 80057ec:	40013400 	.word	0x40013400
 80057f0:	40014000 	.word	0x40014000
 80057f4:	00010007 	.word	0x00010007

080057f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e049      	b.n	800589e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fd f8d0 	bl	80029c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f000 fb8e 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <HAL_TIM_IC_Start_IT+0x1a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	e023      	b.n	800590a <HAL_TIM_IC_Start_IT+0x62>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_IC_Start_IT+0x2a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	e01b      	b.n	800590a <HAL_TIM_IC_Start_IT+0x62>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_IC_Start_IT+0x3a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	e013      	b.n	800590a <HAL_TIM_IC_Start_IT+0x62>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_IC_Start_IT+0x4a>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	e00b      	b.n	800590a <HAL_TIM_IC_Start_IT+0x62>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b10      	cmp	r3, #16
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_IC_Start_IT+0x5a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	e003      	b.n	800590a <HAL_TIM_IC_Start_IT+0x62>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005908:	b2db      	uxtb	r3, r3
 800590a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <HAL_TIM_IC_Start_IT+0x74>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005918:	b2db      	uxtb	r3, r3
 800591a:	e013      	b.n	8005944 <HAL_TIM_IC_Start_IT+0x9c>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b04      	cmp	r3, #4
 8005920:	d104      	bne.n	800592c <HAL_TIM_IC_Start_IT+0x84>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005928:	b2db      	uxtb	r3, r3
 800592a:	e00b      	b.n	8005944 <HAL_TIM_IC_Start_IT+0x9c>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b08      	cmp	r3, #8
 8005930:	d104      	bne.n	800593c <HAL_TIM_IC_Start_IT+0x94>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005938:	b2db      	uxtb	r3, r3
 800593a:	e003      	b.n	8005944 <HAL_TIM_IC_Start_IT+0x9c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005942:	b2db      	uxtb	r3, r3
 8005944:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d102      	bne.n	8005952 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d001      	beq.n	8005956 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e0d8      	b.n	8005b08 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <HAL_TIM_IC_Start_IT+0xbe>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005964:	e023      	b.n	80059ae <HAL_TIM_IC_Start_IT+0x106>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b04      	cmp	r3, #4
 800596a:	d104      	bne.n	8005976 <HAL_TIM_IC_Start_IT+0xce>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005974:	e01b      	b.n	80059ae <HAL_TIM_IC_Start_IT+0x106>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d104      	bne.n	8005986 <HAL_TIM_IC_Start_IT+0xde>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005984:	e013      	b.n	80059ae <HAL_TIM_IC_Start_IT+0x106>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b0c      	cmp	r3, #12
 800598a:	d104      	bne.n	8005996 <HAL_TIM_IC_Start_IT+0xee>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005994:	e00b      	b.n	80059ae <HAL_TIM_IC_Start_IT+0x106>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b10      	cmp	r3, #16
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_IC_Start_IT+0xfe>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a4:	e003      	b.n	80059ae <HAL_TIM_IC_Start_IT+0x106>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d104      	bne.n	80059be <HAL_TIM_IC_Start_IT+0x116>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059bc:	e013      	b.n	80059e6 <HAL_TIM_IC_Start_IT+0x13e>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d104      	bne.n	80059ce <HAL_TIM_IC_Start_IT+0x126>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059cc:	e00b      	b.n	80059e6 <HAL_TIM_IC_Start_IT+0x13e>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d104      	bne.n	80059de <HAL_TIM_IC_Start_IT+0x136>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059dc:	e003      	b.n	80059e6 <HAL_TIM_IC_Start_IT+0x13e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2202      	movs	r2, #2
 80059e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b0c      	cmp	r3, #12
 80059ea:	d841      	bhi.n	8005a70 <HAL_TIM_IC_Start_IT+0x1c8>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <HAL_TIM_IC_Start_IT+0x14c>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a29 	.word	0x08005a29
 80059f8:	08005a71 	.word	0x08005a71
 80059fc:	08005a71 	.word	0x08005a71
 8005a00:	08005a71 	.word	0x08005a71
 8005a04:	08005a3b 	.word	0x08005a3b
 8005a08:	08005a71 	.word	0x08005a71
 8005a0c:	08005a71 	.word	0x08005a71
 8005a10:	08005a71 	.word	0x08005a71
 8005a14:	08005a4d 	.word	0x08005a4d
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a71 	.word	0x08005a71
 8005a20:	08005a71 	.word	0x08005a71
 8005a24:	08005a5f 	.word	0x08005a5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0202 	orr.w	r2, r2, #2
 8005a36:	60da      	str	r2, [r3, #12]
      break;
 8005a38:	e01b      	b.n	8005a72 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 0204 	orr.w	r2, r2, #4
 8005a48:	60da      	str	r2, [r3, #12]
      break;
 8005a4a:	e012      	b.n	8005a72 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0208 	orr.w	r2, r2, #8
 8005a5a:	60da      	str	r2, [r3, #12]
      break;
 8005a5c:	e009      	b.n	8005a72 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0210 	orr.w	r2, r2, #16
 8005a6c:	60da      	str	r2, [r3, #12]
      break;
 8005a6e:	e000      	b.n	8005a72 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8005a70:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2201      	movs	r2, #1
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fc2a 	bl	80062d4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a22      	ldr	r2, [pc, #136]	; (8005b10 <HAL_TIM_IC_Start_IT+0x268>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d01d      	beq.n	8005ac6 <HAL_TIM_IC_Start_IT+0x21e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a92:	d018      	beq.n	8005ac6 <HAL_TIM_IC_Start_IT+0x21e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1e      	ldr	r2, [pc, #120]	; (8005b14 <HAL_TIM_IC_Start_IT+0x26c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_TIM_IC_Start_IT+0x21e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <HAL_TIM_IC_Start_IT+0x270>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_TIM_IC_Start_IT+0x21e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <HAL_TIM_IC_Start_IT+0x274>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIM_IC_Start_IT+0x21e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1a      	ldr	r2, [pc, #104]	; (8005b20 <HAL_TIM_IC_Start_IT+0x278>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIM_IC_Start_IT+0x21e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a18      	ldr	r2, [pc, #96]	; (8005b24 <HAL_TIM_IC_Start_IT+0x27c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d115      	bne.n	8005af2 <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <HAL_TIM_IC_Start_IT+0x280>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b06      	cmp	r3, #6
 8005ad6:	d015      	beq.n	8005b04 <HAL_TIM_IC_Start_IT+0x25c>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ade:	d011      	beq.n	8005b04 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af0:	e008      	b.n	8005b04 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0201 	orr.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	e000      	b.n	8005b06 <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40000c00 	.word	0x40000c00
 8005b20:	40013400 	.word	0x40013400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	00010007 	.word	0x00010007

08005b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d122      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d11b      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0202 	mvn.w	r2, #2
 8005b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fb fa0c 	bl	8000f8c <HAL_TIM_IC_CaptureCallback>
 8005b74:	e005      	b.n	8005b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9d0 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f9d7 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d122      	bne.n	8005bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d11b      	bne.n	8005bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0204 	mvn.w	r2, #4
 8005bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fb f9e2 	bl	8000f8c <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f9a6 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f9ad 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d122      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d11b      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0208 	mvn.w	r2, #8
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2204      	movs	r2, #4
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fb f9b8 	bl	8000f8c <HAL_TIM_IC_CaptureCallback>
 8005c1c:	e005      	b.n	8005c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f97c 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f983 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b10      	cmp	r3, #16
 8005c3c:	d122      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d11b      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0210 	mvn.w	r2, #16
 8005c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2208      	movs	r2, #8
 8005c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fb f98e 	bl	8000f8c <HAL_TIM_IC_CaptureCallback>
 8005c70:	e005      	b.n	8005c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f952 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f959 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d10e      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d107      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0201 	mvn.w	r2, #1
 8005ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fc fd90 	bl	80027d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cba:	2b80      	cmp	r3, #128	; 0x80
 8005cbc:	d10e      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc8:	2b80      	cmp	r3, #128	; 0x80
 8005cca:	d107      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fbb4 	bl	8006444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cea:	d10e      	bne.n	8005d0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf6:	2b80      	cmp	r3, #128	; 0x80
 8005cf8:	d107      	bne.n	8005d0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fba7 	bl	8006458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b40      	cmp	r3, #64	; 0x40
 8005d16:	d10e      	bne.n	8005d36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d107      	bne.n	8005d36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f907 	bl	8005f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d10e      	bne.n	8005d62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d107      	bne.n	8005d62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f06f 0220 	mvn.w	r2, #32
 8005d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fb67 	bl	8006430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e082      	b.n	8005e8a <HAL_TIM_IC_ConfigChannel+0x120>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d11b      	bne.n	8005dca <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6819      	ldr	r1, [r3, #0]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f000 f973 	bl	800608c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699a      	ldr	r2, [r3, #24]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 020c 	bic.w	r2, r2, #12
 8005db4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6999      	ldr	r1, [r3, #24]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	619a      	str	r2, [r3, #24]
 8005dc8:	e05a      	b.n	8005e80 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d11c      	bne.n	8005e0a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	6819      	ldr	r1, [r3, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f000 f9c2 	bl	8006168 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005df2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6999      	ldr	r1, [r3, #24]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	021a      	lsls	r2, r3, #8
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	619a      	str	r2, [r3, #24]
 8005e08:	e03a      	b.n	8005e80 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d11b      	bne.n	8005e48 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6819      	ldr	r1, [r3, #0]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f000 f9df 	bl	80061e2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69da      	ldr	r2, [r3, #28]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 020c 	bic.w	r2, r2, #12
 8005e32:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69d9      	ldr	r1, [r3, #28]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	61da      	str	r2, [r3, #28]
 8005e46:	e01b      	b.n	8005e80 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	6819      	ldr	r1, [r3, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f000 f9ff 	bl	800625a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69da      	ldr	r2, [r3, #28]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69d9      	ldr	r1, [r3, #28]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	021a      	lsls	r2, r3, #8
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	d831      	bhi.n	8005f0c <HAL_TIM_ReadCapturedValue+0x78>
 8005ea8:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ee5 	.word	0x08005ee5
 8005eb4:	08005f0d 	.word	0x08005f0d
 8005eb8:	08005f0d 	.word	0x08005f0d
 8005ebc:	08005f0d 	.word	0x08005f0d
 8005ec0:	08005eef 	.word	0x08005eef
 8005ec4:	08005f0d 	.word	0x08005f0d
 8005ec8:	08005f0d 	.word	0x08005f0d
 8005ecc:	08005f0d 	.word	0x08005f0d
 8005ed0:	08005ef9 	.word	0x08005ef9
 8005ed4:	08005f0d 	.word	0x08005f0d
 8005ed8:	08005f0d 	.word	0x08005f0d
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005f03 	.word	0x08005f03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eea:	60fb      	str	r3, [r7, #12]

      break;
 8005eec:	e00f      	b.n	8005f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	60fb      	str	r3, [r7, #12]

      break;
 8005ef6:	e00a      	b.n	8005f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	60fb      	str	r3, [r7, #12]

      break;
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	60fb      	str	r3, [r7, #12]

      break;
 8005f0a:	e000      	b.n	8005f0e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f0c:	bf00      	nop
  }

  return tmpreg;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a40      	ldr	r2, [pc, #256]	; (800606c <TIM_Base_SetConfig+0x114>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d00f      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3d      	ldr	r2, [pc, #244]	; (8006070 <TIM_Base_SetConfig+0x118>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3c      	ldr	r2, [pc, #240]	; (8006074 <TIM_Base_SetConfig+0x11c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3b      	ldr	r2, [pc, #236]	; (8006078 <TIM_Base_SetConfig+0x120>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3a      	ldr	r2, [pc, #232]	; (800607c <TIM_Base_SetConfig+0x124>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2f      	ldr	r2, [pc, #188]	; (800606c <TIM_Base_SetConfig+0x114>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01f      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb8:	d01b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2c      	ldr	r2, [pc, #176]	; (8006070 <TIM_Base_SetConfig+0x118>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d017      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2b      	ldr	r2, [pc, #172]	; (8006074 <TIM_Base_SetConfig+0x11c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <TIM_Base_SetConfig+0x120>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00f      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a29      	ldr	r2, [pc, #164]	; (800607c <TIM_Base_SetConfig+0x124>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a28      	ldr	r2, [pc, #160]	; (8006080 <TIM_Base_SetConfig+0x128>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a27      	ldr	r2, [pc, #156]	; (8006084 <TIM_Base_SetConfig+0x12c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a26      	ldr	r2, [pc, #152]	; (8006088 <TIM_Base_SetConfig+0x130>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d108      	bne.n	8006004 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a10      	ldr	r2, [pc, #64]	; (800606c <TIM_Base_SetConfig+0x114>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00f      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a12      	ldr	r2, [pc, #72]	; (800607c <TIM_Base_SetConfig+0x124>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00b      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a11      	ldr	r2, [pc, #68]	; (8006080 <TIM_Base_SetConfig+0x128>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d007      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a10      	ldr	r2, [pc, #64]	; (8006084 <TIM_Base_SetConfig+0x12c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0f      	ldr	r2, [pc, #60]	; (8006088 <TIM_Base_SetConfig+0x130>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d103      	bne.n	8006058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	615a      	str	r2, [r3, #20]
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40013400 	.word	0x40013400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800

0800608c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4a26      	ldr	r2, [pc, #152]	; (8006150 <TIM_TI1_SetConfig+0xc4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d017      	beq.n	80060ea <TIM_TI1_SetConfig+0x5e>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c0:	d013      	beq.n	80060ea <TIM_TI1_SetConfig+0x5e>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4a23      	ldr	r2, [pc, #140]	; (8006154 <TIM_TI1_SetConfig+0xc8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00f      	beq.n	80060ea <TIM_TI1_SetConfig+0x5e>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a22      	ldr	r2, [pc, #136]	; (8006158 <TIM_TI1_SetConfig+0xcc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00b      	beq.n	80060ea <TIM_TI1_SetConfig+0x5e>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4a21      	ldr	r2, [pc, #132]	; (800615c <TIM_TI1_SetConfig+0xd0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d007      	beq.n	80060ea <TIM_TI1_SetConfig+0x5e>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a20      	ldr	r2, [pc, #128]	; (8006160 <TIM_TI1_SetConfig+0xd4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d003      	beq.n	80060ea <TIM_TI1_SetConfig+0x5e>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <TIM_TI1_SetConfig+0xd8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <TIM_TI1_SetConfig+0x62>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <TIM_TI1_SetConfig+0x64>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e003      	b.n	800610e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f043 0301 	orr.w	r3, r3, #1
 800610c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	b2db      	uxtb	r3, r3
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f023 030a 	bic.w	r3, r3, #10
 8006128:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f003 030a 	and.w	r3, r3, #10
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40012c00 	.word	0x40012c00
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40013400 	.word	0x40013400
 8006164:	40014000 	.word	0x40014000

08006168 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f023 0210 	bic.w	r2, r3, #16
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	031b      	lsls	r3, r3, #12
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	621a      	str	r2, [r3, #32]
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b087      	sub	sp, #28
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
 80061ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800621e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	b2db      	uxtb	r3, r3
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006232:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800625a:	b480      	push	{r7}
 800625c:	b087      	sub	sp, #28
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
 8006266:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006286:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006298:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	031b      	lsls	r3, r3, #12
 800629e:	b29b      	uxth	r3, r3
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80062ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	031b      	lsls	r3, r3, #12
 80062b2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 031f 	and.w	r3, r3, #31
 80062e6:	2201      	movs	r2, #1
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	43db      	mvns	r3, r3
 80062f6:	401a      	ands	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a1a      	ldr	r2, [r3, #32]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 031f 	and.w	r3, r3, #31
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	fa01 f303 	lsl.w	r3, r1, r3
 800630c:	431a      	orrs	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
	...

08006320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006334:	2302      	movs	r3, #2
 8006336:	e068      	b.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2e      	ldr	r2, [pc, #184]	; (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2d      	ldr	r2, [pc, #180]	; (800641c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d108      	bne.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006372:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006384:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1e      	ldr	r2, [pc, #120]	; (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01d      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063aa:	d018      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1a      	ldr	r2, [pc, #104]	; (8006424 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00e      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a13      	ldr	r2, [pc, #76]	; (800641c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a14      	ldr	r2, [pc, #80]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d10c      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40012c00 	.word	0x40012c00
 800641c:	40013400 	.word	0x40013400
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40014000 	.word	0x40014000

08006430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e042      	b.n	8006504 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fc f9db 	bl	800284c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2224      	movs	r2, #36	; 0x24
 800649a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f82c 	bl	800650c <UART_SetConfig>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e022      	b.n	8006504 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 faf2 	bl	8006ab0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fb79 	bl	8006bf4 <UART_CheckIdleState>
 8006502:	4603      	mov	r3, r0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800650c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006510:	b088      	sub	sp, #32
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	4313      	orrs	r3, r2
 8006530:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	4313      	orrs	r3, r2
 800653a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	4bb1      	ldr	r3, [pc, #708]	; (8006808 <UART_SetConfig+0x2fc>)
 8006544:	4013      	ands	r3, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	69f9      	ldr	r1, [r7, #28]
 800654c:	430b      	orrs	r3, r1
 800654e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4aa6      	ldr	r2, [pc, #664]	; (800680c <UART_SetConfig+0x300>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d004      	beq.n	8006580 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	4313      	orrs	r3, r2
 800657e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800658a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6812      	ldr	r2, [r2, #0]
 8006592:	69f9      	ldr	r1, [r7, #28]
 8006594:	430b      	orrs	r3, r1
 8006596:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	f023 010f 	bic.w	r1, r3, #15
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a97      	ldr	r2, [pc, #604]	; (8006810 <UART_SetConfig+0x304>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d121      	bne.n	80065fc <UART_SetConfig+0xf0>
 80065b8:	4b96      	ldr	r3, [pc, #600]	; (8006814 <UART_SetConfig+0x308>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d816      	bhi.n	80065f4 <UART_SetConfig+0xe8>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <UART_SetConfig+0xc0>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065dd 	.word	0x080065dd
 80065d0:	080065e9 	.word	0x080065e9
 80065d4:	080065e3 	.word	0x080065e3
 80065d8:	080065ef 	.word	0x080065ef
 80065dc:	2301      	movs	r3, #1
 80065de:	76fb      	strb	r3, [r7, #27]
 80065e0:	e0e8      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80065e2:	2302      	movs	r3, #2
 80065e4:	76fb      	strb	r3, [r7, #27]
 80065e6:	e0e5      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80065e8:	2304      	movs	r3, #4
 80065ea:	76fb      	strb	r3, [r7, #27]
 80065ec:	e0e2      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80065ee:	2308      	movs	r3, #8
 80065f0:	76fb      	strb	r3, [r7, #27]
 80065f2:	e0df      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80065f4:	2310      	movs	r3, #16
 80065f6:	76fb      	strb	r3, [r7, #27]
 80065f8:	bf00      	nop
 80065fa:	e0db      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a85      	ldr	r2, [pc, #532]	; (8006818 <UART_SetConfig+0x30c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d134      	bne.n	8006670 <UART_SetConfig+0x164>
 8006606:	4b83      	ldr	r3, [pc, #524]	; (8006814 <UART_SetConfig+0x308>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660c:	f003 030c 	and.w	r3, r3, #12
 8006610:	2b0c      	cmp	r3, #12
 8006612:	d829      	bhi.n	8006668 <UART_SetConfig+0x15c>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x110>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006651 	.word	0x08006651
 8006620:	08006669 	.word	0x08006669
 8006624:	08006669 	.word	0x08006669
 8006628:	08006669 	.word	0x08006669
 800662c:	0800665d 	.word	0x0800665d
 8006630:	08006669 	.word	0x08006669
 8006634:	08006669 	.word	0x08006669
 8006638:	08006669 	.word	0x08006669
 800663c:	08006657 	.word	0x08006657
 8006640:	08006669 	.word	0x08006669
 8006644:	08006669 	.word	0x08006669
 8006648:	08006669 	.word	0x08006669
 800664c:	08006663 	.word	0x08006663
 8006650:	2300      	movs	r3, #0
 8006652:	76fb      	strb	r3, [r7, #27]
 8006654:	e0ae      	b.n	80067b4 <UART_SetConfig+0x2a8>
 8006656:	2302      	movs	r3, #2
 8006658:	76fb      	strb	r3, [r7, #27]
 800665a:	e0ab      	b.n	80067b4 <UART_SetConfig+0x2a8>
 800665c:	2304      	movs	r3, #4
 800665e:	76fb      	strb	r3, [r7, #27]
 8006660:	e0a8      	b.n	80067b4 <UART_SetConfig+0x2a8>
 8006662:	2308      	movs	r3, #8
 8006664:	76fb      	strb	r3, [r7, #27]
 8006666:	e0a5      	b.n	80067b4 <UART_SetConfig+0x2a8>
 8006668:	2310      	movs	r3, #16
 800666a:	76fb      	strb	r3, [r7, #27]
 800666c:	bf00      	nop
 800666e:	e0a1      	b.n	80067b4 <UART_SetConfig+0x2a8>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a69      	ldr	r2, [pc, #420]	; (800681c <UART_SetConfig+0x310>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d120      	bne.n	80066bc <UART_SetConfig+0x1b0>
 800667a:	4b66      	ldr	r3, [pc, #408]	; (8006814 <UART_SetConfig+0x308>)
 800667c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006680:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006684:	2b10      	cmp	r3, #16
 8006686:	d00f      	beq.n	80066a8 <UART_SetConfig+0x19c>
 8006688:	2b10      	cmp	r3, #16
 800668a:	d802      	bhi.n	8006692 <UART_SetConfig+0x186>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <UART_SetConfig+0x190>
 8006690:	e010      	b.n	80066b4 <UART_SetConfig+0x1a8>
 8006692:	2b20      	cmp	r3, #32
 8006694:	d005      	beq.n	80066a2 <UART_SetConfig+0x196>
 8006696:	2b30      	cmp	r3, #48	; 0x30
 8006698:	d009      	beq.n	80066ae <UART_SetConfig+0x1a2>
 800669a:	e00b      	b.n	80066b4 <UART_SetConfig+0x1a8>
 800669c:	2300      	movs	r3, #0
 800669e:	76fb      	strb	r3, [r7, #27]
 80066a0:	e088      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80066a2:	2302      	movs	r3, #2
 80066a4:	76fb      	strb	r3, [r7, #27]
 80066a6:	e085      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80066a8:	2304      	movs	r3, #4
 80066aa:	76fb      	strb	r3, [r7, #27]
 80066ac:	e082      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80066ae:	2308      	movs	r3, #8
 80066b0:	76fb      	strb	r3, [r7, #27]
 80066b2:	e07f      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80066b4:	2310      	movs	r3, #16
 80066b6:	76fb      	strb	r3, [r7, #27]
 80066b8:	bf00      	nop
 80066ba:	e07b      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a57      	ldr	r2, [pc, #348]	; (8006820 <UART_SetConfig+0x314>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d120      	bne.n	8006708 <UART_SetConfig+0x1fc>
 80066c6:	4b53      	ldr	r3, [pc, #332]	; (8006814 <UART_SetConfig+0x308>)
 80066c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d00f      	beq.n	80066f4 <UART_SetConfig+0x1e8>
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	d802      	bhi.n	80066de <UART_SetConfig+0x1d2>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <UART_SetConfig+0x1dc>
 80066dc:	e010      	b.n	8006700 <UART_SetConfig+0x1f4>
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d005      	beq.n	80066ee <UART_SetConfig+0x1e2>
 80066e2:	2bc0      	cmp	r3, #192	; 0xc0
 80066e4:	d009      	beq.n	80066fa <UART_SetConfig+0x1ee>
 80066e6:	e00b      	b.n	8006700 <UART_SetConfig+0x1f4>
 80066e8:	2300      	movs	r3, #0
 80066ea:	76fb      	strb	r3, [r7, #27]
 80066ec:	e062      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80066ee:	2302      	movs	r3, #2
 80066f0:	76fb      	strb	r3, [r7, #27]
 80066f2:	e05f      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80066f4:	2304      	movs	r3, #4
 80066f6:	76fb      	strb	r3, [r7, #27]
 80066f8:	e05c      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80066fa:	2308      	movs	r3, #8
 80066fc:	76fb      	strb	r3, [r7, #27]
 80066fe:	e059      	b.n	80067b4 <UART_SetConfig+0x2a8>
 8006700:	2310      	movs	r3, #16
 8006702:	76fb      	strb	r3, [r7, #27]
 8006704:	bf00      	nop
 8006706:	e055      	b.n	80067b4 <UART_SetConfig+0x2a8>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a45      	ldr	r2, [pc, #276]	; (8006824 <UART_SetConfig+0x318>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d124      	bne.n	800675c <UART_SetConfig+0x250>
 8006712:	4b40      	ldr	r3, [pc, #256]	; (8006814 <UART_SetConfig+0x308>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006720:	d012      	beq.n	8006748 <UART_SetConfig+0x23c>
 8006722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006726:	d802      	bhi.n	800672e <UART_SetConfig+0x222>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <UART_SetConfig+0x230>
 800672c:	e012      	b.n	8006754 <UART_SetConfig+0x248>
 800672e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006732:	d006      	beq.n	8006742 <UART_SetConfig+0x236>
 8006734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006738:	d009      	beq.n	800674e <UART_SetConfig+0x242>
 800673a:	e00b      	b.n	8006754 <UART_SetConfig+0x248>
 800673c:	2300      	movs	r3, #0
 800673e:	76fb      	strb	r3, [r7, #27]
 8006740:	e038      	b.n	80067b4 <UART_SetConfig+0x2a8>
 8006742:	2302      	movs	r3, #2
 8006744:	76fb      	strb	r3, [r7, #27]
 8006746:	e035      	b.n	80067b4 <UART_SetConfig+0x2a8>
 8006748:	2304      	movs	r3, #4
 800674a:	76fb      	strb	r3, [r7, #27]
 800674c:	e032      	b.n	80067b4 <UART_SetConfig+0x2a8>
 800674e:	2308      	movs	r3, #8
 8006750:	76fb      	strb	r3, [r7, #27]
 8006752:	e02f      	b.n	80067b4 <UART_SetConfig+0x2a8>
 8006754:	2310      	movs	r3, #16
 8006756:	76fb      	strb	r3, [r7, #27]
 8006758:	bf00      	nop
 800675a:	e02b      	b.n	80067b4 <UART_SetConfig+0x2a8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a2a      	ldr	r2, [pc, #168]	; (800680c <UART_SetConfig+0x300>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d124      	bne.n	80067b0 <UART_SetConfig+0x2a4>
 8006766:	4b2b      	ldr	r3, [pc, #172]	; (8006814 <UART_SetConfig+0x308>)
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006774:	d012      	beq.n	800679c <UART_SetConfig+0x290>
 8006776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677a:	d802      	bhi.n	8006782 <UART_SetConfig+0x276>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d007      	beq.n	8006790 <UART_SetConfig+0x284>
 8006780:	e012      	b.n	80067a8 <UART_SetConfig+0x29c>
 8006782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006786:	d006      	beq.n	8006796 <UART_SetConfig+0x28a>
 8006788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800678c:	d009      	beq.n	80067a2 <UART_SetConfig+0x296>
 800678e:	e00b      	b.n	80067a8 <UART_SetConfig+0x29c>
 8006790:	2300      	movs	r3, #0
 8006792:	76fb      	strb	r3, [r7, #27]
 8006794:	e00e      	b.n	80067b4 <UART_SetConfig+0x2a8>
 8006796:	2302      	movs	r3, #2
 8006798:	76fb      	strb	r3, [r7, #27]
 800679a:	e00b      	b.n	80067b4 <UART_SetConfig+0x2a8>
 800679c:	2304      	movs	r3, #4
 800679e:	76fb      	strb	r3, [r7, #27]
 80067a0:	e008      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80067a2:	2308      	movs	r3, #8
 80067a4:	76fb      	strb	r3, [r7, #27]
 80067a6:	e005      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80067a8:	2310      	movs	r3, #16
 80067aa:	76fb      	strb	r3, [r7, #27]
 80067ac:	bf00      	nop
 80067ae:	e001      	b.n	80067b4 <UART_SetConfig+0x2a8>
 80067b0:	2310      	movs	r3, #16
 80067b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a14      	ldr	r2, [pc, #80]	; (800680c <UART_SetConfig+0x300>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	f040 80a1 	bne.w	8006902 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067c0:	7efb      	ldrb	r3, [r7, #27]
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d836      	bhi.n	8006834 <UART_SetConfig+0x328>
 80067c6:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <UART_SetConfig+0x2c0>)
 80067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	08006835 	.word	0x08006835
 80067d4:	080067f9 	.word	0x080067f9
 80067d8:	08006835 	.word	0x08006835
 80067dc:	080067ff 	.word	0x080067ff
 80067e0:	08006835 	.word	0x08006835
 80067e4:	08006835 	.word	0x08006835
 80067e8:	08006835 	.word	0x08006835
 80067ec:	0800682d 	.word	0x0800682d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fd fd9a 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 80067f4:	6178      	str	r0, [r7, #20]
        break;
 80067f6:	e022      	b.n	800683e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067f8:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <UART_SetConfig+0x31c>)
 80067fa:	617b      	str	r3, [r7, #20]
        break;
 80067fc:	e01f      	b.n	800683e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067fe:	f7fd fcfd 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8006802:	6178      	str	r0, [r7, #20]
        break;
 8006804:	e01b      	b.n	800683e <UART_SetConfig+0x332>
 8006806:	bf00      	nop
 8006808:	cfff69f3 	.word	0xcfff69f3
 800680c:	40008000 	.word	0x40008000
 8006810:	40013800 	.word	0x40013800
 8006814:	40021000 	.word	0x40021000
 8006818:	40004400 	.word	0x40004400
 800681c:	40004800 	.word	0x40004800
 8006820:	40004c00 	.word	0x40004c00
 8006824:	40005000 	.word	0x40005000
 8006828:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006830:	617b      	str	r3, [r7, #20]
        break;
 8006832:	e004      	b.n	800683e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	76bb      	strb	r3, [r7, #26]
        break;
 800683c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 811d 	beq.w	8006a80 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	4a97      	ldr	r2, [pc, #604]	; (8006aa8 <UART_SetConfig+0x59c>)
 800684c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006850:	461a      	mov	r2, r3
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	fbb3 f3f2 	udiv	r3, r3, r2
 8006858:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	4413      	add	r3, r2
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d305      	bcc.n	8006876 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d902      	bls.n	800687c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	76bb      	strb	r3, [r7, #26]
 800687a:	e101      	b.n	8006a80 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	4618      	mov	r0, r3
 8006880:	f04f 0100 	mov.w	r1, #0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	4a87      	ldr	r2, [pc, #540]	; (8006aa8 <UART_SetConfig+0x59c>)
 800688a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f04f 0400 	mov.w	r4, #0
 8006894:	461a      	mov	r2, r3
 8006896:	4623      	mov	r3, r4
 8006898:	f7f9 fdc8 	bl	800042c <__aeabi_uldivmod>
 800689c:	4603      	mov	r3, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	4619      	mov	r1, r3
 80068a2:	4622      	mov	r2, r4
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	f04f 0400 	mov.w	r4, #0
 80068ac:	0214      	lsls	r4, r2, #8
 80068ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80068b2:	020b      	lsls	r3, r1, #8
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6852      	ldr	r2, [r2, #4]
 80068b8:	0852      	lsrs	r2, r2, #1
 80068ba:	4611      	mov	r1, r2
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	eb13 0b01 	adds.w	fp, r3, r1
 80068c4:	eb44 0c02 	adc.w	ip, r4, r2
 80068c8:	4658      	mov	r0, fp
 80068ca:	4661      	mov	r1, ip
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f04f 0400 	mov.w	r4, #0
 80068d4:	461a      	mov	r2, r3
 80068d6:	4623      	mov	r3, r4
 80068d8:	f7f9 fda8 	bl	800042c <__aeabi_uldivmod>
 80068dc:	4603      	mov	r3, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068e8:	d308      	bcc.n	80068fc <UART_SetConfig+0x3f0>
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068f0:	d204      	bcs.n	80068fc <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	60da      	str	r2, [r3, #12]
 80068fa:	e0c1      	b.n	8006a80 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	76bb      	strb	r3, [r7, #26]
 8006900:	e0be      	b.n	8006a80 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690a:	d164      	bne.n	80069d6 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800690c:	7efb      	ldrb	r3, [r7, #27]
 800690e:	2b08      	cmp	r3, #8
 8006910:	d827      	bhi.n	8006962 <UART_SetConfig+0x456>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <UART_SetConfig+0x40c>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	0800693d 	.word	0x0800693d
 800691c:	08006945 	.word	0x08006945
 8006920:	0800694d 	.word	0x0800694d
 8006924:	08006963 	.word	0x08006963
 8006928:	08006953 	.word	0x08006953
 800692c:	08006963 	.word	0x08006963
 8006930:	08006963 	.word	0x08006963
 8006934:	08006963 	.word	0x08006963
 8006938:	0800695b 	.word	0x0800695b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800693c:	f7fd fcf4 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 8006940:	6178      	str	r0, [r7, #20]
        break;
 8006942:	e013      	b.n	800696c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006944:	f7fd fd06 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 8006948:	6178      	str	r0, [r7, #20]
        break;
 800694a:	e00f      	b.n	800696c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800694c:	4b57      	ldr	r3, [pc, #348]	; (8006aac <UART_SetConfig+0x5a0>)
 800694e:	617b      	str	r3, [r7, #20]
        break;
 8006950:	e00c      	b.n	800696c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006952:	f7fd fc53 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8006956:	6178      	str	r0, [r7, #20]
        break;
 8006958:	e008      	b.n	800696c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800695a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695e:	617b      	str	r3, [r7, #20]
        break;
 8006960:	e004      	b.n	800696c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	76bb      	strb	r3, [r7, #26]
        break;
 800696a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8086 	beq.w	8006a80 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	4a4b      	ldr	r2, [pc, #300]	; (8006aa8 <UART_SetConfig+0x59c>)
 800697a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800697e:	461a      	mov	r2, r3
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	fbb3 f3f2 	udiv	r3, r3, r2
 8006986:	005a      	lsls	r2, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	085b      	lsrs	r3, r3, #1
 800698e:	441a      	add	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	fbb2 f3f3 	udiv	r3, r2, r3
 8006998:	b29b      	uxth	r3, r3
 800699a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b0f      	cmp	r3, #15
 80069a0:	d916      	bls.n	80069d0 <UART_SetConfig+0x4c4>
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a8:	d212      	bcs.n	80069d0 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f023 030f 	bic.w	r3, r3, #15
 80069b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	b29a      	uxth	r2, r3
 80069c0:	89fb      	ldrh	r3, [r7, #14]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	89fa      	ldrh	r2, [r7, #14]
 80069cc:	60da      	str	r2, [r3, #12]
 80069ce:	e057      	b.n	8006a80 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	76bb      	strb	r3, [r7, #26]
 80069d4:	e054      	b.n	8006a80 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069d6:	7efb      	ldrb	r3, [r7, #27]
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d828      	bhi.n	8006a2e <UART_SetConfig+0x522>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <UART_SetConfig+0x4d8>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006a11 	.word	0x08006a11
 80069ec:	08006a19 	.word	0x08006a19
 80069f0:	08006a2f 	.word	0x08006a2f
 80069f4:	08006a1f 	.word	0x08006a1f
 80069f8:	08006a2f 	.word	0x08006a2f
 80069fc:	08006a2f 	.word	0x08006a2f
 8006a00:	08006a2f 	.word	0x08006a2f
 8006a04:	08006a27 	.word	0x08006a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a08:	f7fd fc8e 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 8006a0c:	6178      	str	r0, [r7, #20]
        break;
 8006a0e:	e013      	b.n	8006a38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a10:	f7fd fca0 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 8006a14:	6178      	str	r0, [r7, #20]
        break;
 8006a16:	e00f      	b.n	8006a38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a18:	4b24      	ldr	r3, [pc, #144]	; (8006aac <UART_SetConfig+0x5a0>)
 8006a1a:	617b      	str	r3, [r7, #20]
        break;
 8006a1c:	e00c      	b.n	8006a38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a1e:	f7fd fbed 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8006a22:	6178      	str	r0, [r7, #20]
        break;
 8006a24:	e008      	b.n	8006a38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2a:	617b      	str	r3, [r7, #20]
        break;
 8006a2c:	e004      	b.n	8006a38 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	76bb      	strb	r3, [r7, #26]
        break;
 8006a36:	bf00      	nop
    }

    if (pclk != 0U)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d020      	beq.n	8006a80 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	4a19      	ldr	r2, [pc, #100]	; (8006aa8 <UART_SetConfig+0x59c>)
 8006a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	085b      	lsrs	r3, r3, #1
 8006a56:	441a      	add	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b0f      	cmp	r3, #15
 8006a68:	d908      	bls.n	8006a7c <UART_SetConfig+0x570>
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a70:	d204      	bcs.n	8006a7c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	60da      	str	r2, [r3, #12]
 8006a7a:	e001      	b.n	8006a80 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006a9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006aa8:	0800a49c 	.word	0x0800a49c
 8006aac:	00f42400 	.word	0x00f42400

08006ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01a      	beq.n	8006bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bae:	d10a      	bne.n	8006bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  }
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006c04:	f7fc f8a8 	bl	8002d58 <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d10e      	bne.n	8006c36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f82c 	bl	8006c84 <UART_WaitOnFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e022      	b.n	8006c7c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d10e      	bne.n	8006c62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f816 	bl	8006c84 <UART_WaitOnFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e00c      	b.n	8006c7c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	4613      	mov	r3, r2
 8006c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c94:	e062      	b.n	8006d5c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d05e      	beq.n	8006d5c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fc f85b 	bl	8002d58 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d11d      	bne.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cc2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e045      	b.n	8006d7c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d02e      	beq.n	8006d5c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d0c:	d126      	bne.n	8006d5c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d26:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e00f      	b.n	8006d7c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69da      	ldr	r2, [r3, #28]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4013      	ands	r3, r2
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	bf0c      	ite	eq
 8006d6c:	2301      	moveq	r3, #1
 8006d6e:	2300      	movne	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d08d      	beq.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d101      	bne.n	8006d9a <HAL_UARTEx_DisableFifoMode+0x16>
 8006d96:	2302      	movs	r3, #2
 8006d98:	e027      	b.n	8006dea <HAL_UARTEx_DisableFifoMode+0x66>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2224      	movs	r2, #36	; 0x24
 8006da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0201 	bic.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006dc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e02d      	b.n	8006e6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2224      	movs	r2, #36	; 0x24
 8006e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f850 	bl	8006ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e02d      	b.n	8006ee6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2224      	movs	r2, #36	; 0x24
 8006e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f812 	bl	8006ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b089      	sub	sp, #36	; 0x24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006ef8:	4a2f      	ldr	r2, [pc, #188]	; (8006fb8 <UARTEx_SetNbDataToProcess+0xc8>)
 8006efa:	f107 0314 	add.w	r3, r7, #20
 8006efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f02:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006f06:	4a2d      	ldr	r2, [pc, #180]	; (8006fbc <UARTEx_SetNbDataToProcess+0xcc>)
 8006f08:	f107 030c 	add.w	r3, r7, #12
 8006f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f10:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d108      	bne.n	8006f2e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f2c:	e03d      	b.n	8006faa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f2e:	2308      	movs	r3, #8
 8006f30:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f32:	2308      	movs	r3, #8
 8006f34:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	0e5b      	lsrs	r3, r3, #25
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	0f5b      	lsrs	r3, r3, #29
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006f56:	7fbb      	ldrb	r3, [r7, #30]
 8006f58:	7f3a      	ldrb	r2, [r7, #28]
 8006f5a:	f107 0120 	add.w	r1, r7, #32
 8006f5e:	440a      	add	r2, r1
 8006f60:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006f64:	fb02 f303 	mul.w	r3, r2, r3
 8006f68:	7f3a      	ldrb	r2, [r7, #28]
 8006f6a:	f107 0120 	add.w	r1, r7, #32
 8006f6e:	440a      	add	r2, r1
 8006f70:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006f80:	7ffb      	ldrb	r3, [r7, #31]
 8006f82:	7f7a      	ldrb	r2, [r7, #29]
 8006f84:	f107 0120 	add.w	r1, r7, #32
 8006f88:	440a      	add	r2, r1
 8006f8a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006f8e:	fb02 f303 	mul.w	r3, r2, r3
 8006f92:	7f7a      	ldrb	r2, [r7, #29]
 8006f94:	f107 0120 	add.w	r1, r7, #32
 8006f98:	440a      	add	r2, r1
 8006f9a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006f9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006faa:	bf00      	nop
 8006fac:	3724      	adds	r7, #36	; 0x24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	0800a1c0 	.word	0x0800a1c0
 8006fbc:	0800a1c8 	.word	0x0800a1c8

08006fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	f107 001c 	add.w	r0, r7, #28
 8006fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d122      	bne.n	800701e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007002:	2b01      	cmp	r3, #1
 8007004:	d105      	bne.n	8007012 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa30 	bl	8007478 <USB_CoreReset>
 8007018:	4603      	mov	r3, r0
 800701a:	73fb      	strb	r3, [r7, #15]
 800701c:	e01a      	b.n	8007054 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa24 	bl	8007478 <USB_CoreReset>
 8007030:	4603      	mov	r3, r0
 8007032:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	639a      	str	r2, [r3, #56]	; 0x38
 8007046:	e005      	b.n	8007054 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8007054:	7bfb      	ldrb	r3, [r7, #15]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007060:	b004      	add	sp, #16
 8007062:	4770      	bx	lr

08007064 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f023 0201 	bic.w	r2, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d106      	bne.n	80070b2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]
 80070b0:	e00b      	b.n	80070ca <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80070b2:	78fb      	ldrb	r3, [r7, #3]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]
 80070c4:	e001      	b.n	80070ca <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e003      	b.n	80070d2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80070ca:	2032      	movs	r0, #50	; 0x32
 80070cc:	f7fb fe50 	bl	8002d70 <HAL_Delay>

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070dc:	b084      	sub	sp, #16
 80070de:	b580      	push	{r7, lr}
 80070e0:	b086      	sub	sp, #24
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	e009      	b.n	8007110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3340      	adds	r3, #64	; 0x40
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	2200      	movs	r2, #0
 8007108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3301      	adds	r3, #1
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b0e      	cmp	r3, #14
 8007114:	d9f2      	bls.n	80070fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d11c      	bne.n	8007156 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800712a:	f043 0302 	orr.w	r3, r3, #2
 800712e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	e005      	b.n	8007162 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007168:	461a      	mov	r2, r3
 800716a:	2300      	movs	r3, #0
 800716c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007174:	4619      	mov	r1, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717c:	461a      	mov	r2, r3
 800717e:	680b      	ldr	r3, [r1, #0]
 8007180:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007182:	2103      	movs	r1, #3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f93d 	bl	8007404 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800718a:	2110      	movs	r1, #16
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f8f1 	bl	8007374 <USB_FlushTxFifo>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f90f 	bl	80073c0 <USB_FlushRxFifo>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b2:	461a      	mov	r2, r3
 80071b4:	2300      	movs	r3, #0
 80071b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071be:	461a      	mov	r2, r3
 80071c0:	2300      	movs	r3, #0
 80071c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ca:	461a      	mov	r2, r3
 80071cc:	2300      	movs	r3, #0
 80071ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071d0:	2300      	movs	r3, #0
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	e043      	b.n	800725e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ec:	d118      	bne.n	8007220 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007200:	461a      	mov	r2, r3
 8007202:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	e013      	b.n	8007232 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007216:	461a      	mov	r2, r3
 8007218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e008      	b.n	8007232 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722c:	461a      	mov	r2, r3
 800722e:	2300      	movs	r3, #0
 8007230:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723e:	461a      	mov	r2, r3
 8007240:	2300      	movs	r3, #0
 8007242:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	461a      	mov	r2, r3
 8007252:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007256:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	3301      	adds	r3, #1
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	429a      	cmp	r2, r3
 8007264:	d3b7      	bcc.n	80071d6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	e043      	b.n	80072f4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800727e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007282:	d118      	bne.n	80072b6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007296:	461a      	mov	r2, r3
 8007298:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e013      	b.n	80072c8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ac:	461a      	mov	r2, r3
 80072ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	e008      	b.n	80072c8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	461a      	mov	r2, r3
 80072c4:	2300      	movs	r3, #0
 80072c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	461a      	mov	r2, r3
 80072d6:	2300      	movs	r3, #0
 80072d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e6:	461a      	mov	r2, r3
 80072e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	3301      	adds	r3, #1
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d3b7      	bcc.n	800726c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800730a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800730e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800731c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	f043 0210 	orr.w	r2, r3, #16
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	4b10      	ldr	r3, [pc, #64]	; (8007370 <USB_DevInit+0x294>)
 8007330:	4313      	orrs	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	f043 0208 	orr.w	r2, r3, #8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d107      	bne.n	800735e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007356:	f043 0304 	orr.w	r3, r3, #4
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800736a:	b004      	add	sp, #16
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	803c3800 	.word	0x803c3800

08007374 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	019b      	lsls	r3, r3, #6
 8007386:	f043 0220 	orr.w	r2, r3, #32
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4a09      	ldr	r2, [pc, #36]	; (80073bc <USB_FlushTxFifo+0x48>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d901      	bls.n	80073a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e006      	b.n	80073ae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d0f0      	beq.n	800738e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	00030d40 	.word	0x00030d40

080073c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2210      	movs	r2, #16
 80073d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3301      	adds	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4a09      	ldr	r2, [pc, #36]	; (8007400 <USB_FlushRxFifo+0x40>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d901      	bls.n	80073e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e006      	b.n	80073f2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f003 0310 	and.w	r3, r3, #16
 80073ec:	2b10      	cmp	r3, #16
 80073ee:	d0f0      	beq.n	80073d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	00030d40 	.word	0x00030d40

08007404 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	68f9      	ldr	r1, [r7, #12]
 8007420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007424:	4313      	orrs	r3, r2
 8007426:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007450:	f023 0303 	bic.w	r3, r3, #3
 8007454:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007464:	f043 0302 	orr.w	r3, r3, #2
 8007468:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3301      	adds	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4a13      	ldr	r2, [pc, #76]	; (80074dc <USB_CoreReset+0x64>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d901      	bls.n	8007496 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e01b      	b.n	80074ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	daf2      	bge.n	8007484 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f043 0201 	orr.w	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3301      	adds	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a09      	ldr	r2, [pc, #36]	; (80074dc <USB_CoreReset+0x64>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d901      	bls.n	80074c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e006      	b.n	80074ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d0f0      	beq.n	80074ae <USB_CoreReset+0x36>

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	00030d40 	.word	0x00030d40

080074e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80074e4:	bf00      	nop
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
	...

080074f0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074f6:	f3ef 8305 	mrs	r3, IPSR
 80074fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80074fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10f      	bne.n	8007522 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007502:	f3ef 8310 	mrs	r3, PRIMASK
 8007506:	607b      	str	r3, [r7, #4]
  return(result);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800750e:	f3ef 8311 	mrs	r3, BASEPRI
 8007512:	603b      	str	r3, [r7, #0]
  return(result);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d007      	beq.n	800752a <osKernelInitialize+0x3a>
 800751a:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <osKernelInitialize+0x64>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b02      	cmp	r3, #2
 8007520:	d103      	bne.n	800752a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007522:	f06f 0305 	mvn.w	r3, #5
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	e00c      	b.n	8007544 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800752a:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <osKernelInitialize+0x64>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d105      	bne.n	800753e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007532:	4b08      	ldr	r3, [pc, #32]	; (8007554 <osKernelInitialize+0x64>)
 8007534:	2201      	movs	r2, #1
 8007536:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e002      	b.n	8007544 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800753e:	f04f 33ff 	mov.w	r3, #4294967295
 8007542:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007544:	68fb      	ldr	r3, [r7, #12]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	2000002c 	.word	0x2000002c

08007558 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800755e:	f3ef 8305 	mrs	r3, IPSR
 8007562:	60bb      	str	r3, [r7, #8]
  return(result);
 8007564:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10f      	bne.n	800758a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800756a:	f3ef 8310 	mrs	r3, PRIMASK
 800756e:	607b      	str	r3, [r7, #4]
  return(result);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007576:	f3ef 8311 	mrs	r3, BASEPRI
 800757a:	603b      	str	r3, [r7, #0]
  return(result);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d007      	beq.n	8007592 <osKernelStart+0x3a>
 8007582:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <osKernelStart+0x68>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d103      	bne.n	8007592 <osKernelStart+0x3a>
    stat = osErrorISR;
 800758a:	f06f 0305 	mvn.w	r3, #5
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e010      	b.n	80075b4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007592:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <osKernelStart+0x68>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d109      	bne.n	80075ae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800759a:	f7ff ffa1 	bl	80074e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800759e:	4b08      	ldr	r3, [pc, #32]	; (80075c0 <osKernelStart+0x68>)
 80075a0:	2202      	movs	r2, #2
 80075a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80075a4:	f001 f870 	bl	8008688 <vTaskStartScheduler>
      stat = osOK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	e002      	b.n	80075b4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80075ae:	f04f 33ff 	mov.w	r3, #4294967295
 80075b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80075b4:	68fb      	ldr	r3, [r7, #12]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	2000002c 	.word	0x2000002c

080075c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b090      	sub	sp, #64	; 0x40
 80075c8:	af04      	add	r7, sp, #16
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d4:	f3ef 8305 	mrs	r3, IPSR
 80075d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80075da:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 808f 	bne.w	8007700 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e2:	f3ef 8310 	mrs	r3, PRIMASK
 80075e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075ee:	f3ef 8311 	mrs	r3, BASEPRI
 80075f2:	617b      	str	r3, [r7, #20]
  return(result);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <osThreadNew+0x3e>
 80075fa:	4b44      	ldr	r3, [pc, #272]	; (800770c <osThreadNew+0x148>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d07e      	beq.n	8007700 <osThreadNew+0x13c>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d07b      	beq.n	8007700 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007608:	2380      	movs	r3, #128	; 0x80
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800760c:	2318      	movs	r3, #24
 800760e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007610:	2300      	movs	r3, #0
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007614:	f04f 33ff 	mov.w	r3, #4294967295
 8007618:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d045      	beq.n	80076ac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <osThreadNew+0x6a>
        name = attr->name;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	2b00      	cmp	r3, #0
 8007640:	d008      	beq.n	8007654 <osThreadNew+0x90>
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	2b38      	cmp	r3, #56	; 0x38
 8007646:	d805      	bhi.n	8007654 <osThreadNew+0x90>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <osThreadNew+0x94>
        return (NULL);
 8007654:	2300      	movs	r3, #0
 8007656:	e054      	b.n	8007702 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	089b      	lsrs	r3, r3, #2
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00e      	beq.n	800768e <osThreadNew+0xca>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	2b5b      	cmp	r3, #91	; 0x5b
 8007676:	d90a      	bls.n	800768e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800767c:	2b00      	cmp	r3, #0
 800767e:	d006      	beq.n	800768e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <osThreadNew+0xca>
        mem = 1;
 8007688:	2301      	movs	r3, #1
 800768a:	623b      	str	r3, [r7, #32]
 800768c:	e010      	b.n	80076b0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10c      	bne.n	80076b0 <osThreadNew+0xec>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d108      	bne.n	80076b0 <osThreadNew+0xec>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d104      	bne.n	80076b0 <osThreadNew+0xec>
          mem = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	623b      	str	r3, [r7, #32]
 80076aa:	e001      	b.n	80076b0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d110      	bne.n	80076d8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076be:	9202      	str	r2, [sp, #8]
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fe09 	bl	80082e4 <xTaskCreateStatic>
 80076d2:	4603      	mov	r3, r0
 80076d4:	613b      	str	r3, [r7, #16]
 80076d6:	e013      	b.n	8007700 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d110      	bne.n	8007700 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	f107 0310 	add.w	r3, r7, #16
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fe51 	bl	8008398 <xTaskCreate>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d001      	beq.n	8007700 <osThreadNew+0x13c>
          hTask = NULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007700:	693b      	ldr	r3, [r7, #16]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3730      	adds	r7, #48	; 0x30
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	2000002c 	.word	0x2000002c

08007710 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007718:	f3ef 8305 	mrs	r3, IPSR
 800771c:	613b      	str	r3, [r7, #16]
  return(result);
 800771e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10f      	bne.n	8007744 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007724:	f3ef 8310 	mrs	r3, PRIMASK
 8007728:	60fb      	str	r3, [r7, #12]
  return(result);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d105      	bne.n	800773c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007730:	f3ef 8311 	mrs	r3, BASEPRI
 8007734:	60bb      	str	r3, [r7, #8]
  return(result);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d007      	beq.n	800774c <osDelay+0x3c>
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <osDelay+0x58>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d103      	bne.n	800774c <osDelay+0x3c>
    stat = osErrorISR;
 8007744:	f06f 0305 	mvn.w	r3, #5
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e007      	b.n	800775c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 ff62 	bl	8008620 <vTaskDelay>
    }
  }

  return (stat);
 800775c:	697b      	ldr	r3, [r7, #20]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	2000002c 	.word	0x2000002c

0800776c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a07      	ldr	r2, [pc, #28]	; (8007798 <vApplicationGetIdleTaskMemory+0x2c>)
 800777c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4a06      	ldr	r2, [pc, #24]	; (800779c <vApplicationGetIdleTaskMemory+0x30>)
 8007782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2280      	movs	r2, #128	; 0x80
 8007788:	601a      	str	r2, [r3, #0]
}
 800778a:	bf00      	nop
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20000030 	.word	0x20000030
 800779c:	2000008c 	.word	0x2000008c

080077a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4a07      	ldr	r2, [pc, #28]	; (80077cc <vApplicationGetTimerTaskMemory+0x2c>)
 80077b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4a06      	ldr	r2, [pc, #24]	; (80077d0 <vApplicationGetTimerTaskMemory+0x30>)
 80077b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077be:	601a      	str	r2, [r3, #0]
}
 80077c0:	bf00      	nop
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	2000028c 	.word	0x2000028c
 80077d0:	200002e8 	.word	0x200002e8

080077d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f103 0208 	add.w	r2, r3, #8
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f103 0208 	add.w	r2, r3, #8
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f103 0208 	add.w	r2, r3, #8
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800782e:	b480      	push	{r7}
 8007830:	b085      	sub	sp, #20
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007876:	b480      	push	{r7}
 8007878:	b085      	sub	sp, #20
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788c:	d103      	bne.n	8007896 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	e00c      	b.n	80078b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3308      	adds	r3, #8
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e002      	b.n	80078a4 <vListInsert+0x2e>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d2f6      	bcs.n	800789e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	601a      	str	r2, [r3, #0]
}
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6892      	ldr	r2, [r2, #8]
 80078fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6852      	ldr	r2, [r2, #4]
 8007908:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d103      	bne.n	800791c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	1e5a      	subs	r2, r3, #1
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d109      	bne.n	8007964 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60bb      	str	r3, [r7, #8]
 8007962:	e7fe      	b.n	8007962 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007964:	f002 f812 	bl	800998c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007970:	68f9      	ldr	r1, [r7, #12]
 8007972:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007974:	fb01 f303 	mul.w	r3, r1, r3
 8007978:	441a      	add	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007994:	3b01      	subs	r3, #1
 8007996:	68f9      	ldr	r1, [r7, #12]
 8007998:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800799a:	fb01 f303 	mul.w	r3, r1, r3
 800799e:	441a      	add	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	22ff      	movs	r2, #255	; 0xff
 80079a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	22ff      	movs	r2, #255	; 0xff
 80079b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d114      	bne.n	80079e4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01a      	beq.n	80079f8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3310      	adds	r3, #16
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 f8de 	bl	8008b88 <xTaskRemoveFromEventList>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d012      	beq.n	80079f8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079d2:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <xQueueGenericReset+0xcc>)
 80079d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	e009      	b.n	80079f8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3310      	adds	r3, #16
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff fef3 	bl	80077d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3324      	adds	r3, #36	; 0x24
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff feee 	bl	80077d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079f8:	f001 fff6 	bl	80099e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079fc:	2301      	movs	r3, #1
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	e000ed04 	.word	0xe000ed04

08007a0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08e      	sub	sp, #56	; 0x38
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d109      	bne.n	8007a34 <xQueueGenericCreateStatic+0x28>
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a32:	e7fe      	b.n	8007a32 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d109      	bne.n	8007a4e <xQueueGenericCreateStatic+0x42>
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a4c:	e7fe      	b.n	8007a4c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <xQueueGenericCreateStatic+0x4e>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <xQueueGenericCreateStatic+0x52>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e000      	b.n	8007a60 <xQueueGenericCreateStatic+0x54>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d109      	bne.n	8007a78 <xQueueGenericCreateStatic+0x6c>
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	623b      	str	r3, [r7, #32]
 8007a76:	e7fe      	b.n	8007a76 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d102      	bne.n	8007a84 <xQueueGenericCreateStatic+0x78>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <xQueueGenericCreateStatic+0x7c>
 8007a84:	2301      	movs	r3, #1
 8007a86:	e000      	b.n	8007a8a <xQueueGenericCreateStatic+0x7e>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <xQueueGenericCreateStatic+0x96>
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007aa2:	2350      	movs	r3, #80	; 0x50
 8007aa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b50      	cmp	r3, #80	; 0x50
 8007aaa:	d009      	beq.n	8007ac0 <xQueueGenericCreateStatic+0xb4>
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	61bb      	str	r3, [r7, #24]
 8007abe:	e7fe      	b.n	8007abe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ac0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00d      	beq.n	8007ae8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ad4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	4613      	mov	r3, r2
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f805 	bl	8007af2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3730      	adds	r7, #48	; 0x30
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	e002      	b.n	8007b14 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b20:	2101      	movs	r1, #1
 8007b22:	69b8      	ldr	r0, [r7, #24]
 8007b24:	f7ff ff0a 	bl	800793c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	78fa      	ldrb	r2, [r7, #3]
 8007b2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08e      	sub	sp, #56	; 0x38
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b46:	2300      	movs	r3, #0
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d109      	bne.n	8007b68 <xQueueGenericSend+0x30>
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b66:	e7fe      	b.n	8007b66 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d103      	bne.n	8007b76 <xQueueGenericSend+0x3e>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <xQueueGenericSend+0x42>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <xQueueGenericSend+0x44>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d109      	bne.n	8007b94 <xQueueGenericSend+0x5c>
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
 8007b92:	e7fe      	b.n	8007b92 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d103      	bne.n	8007ba2 <xQueueGenericSend+0x6a>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <xQueueGenericSend+0x6e>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <xQueueGenericSend+0x70>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d109      	bne.n	8007bc0 <xQueueGenericSend+0x88>
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	623b      	str	r3, [r7, #32]
 8007bbe:	e7fe      	b.n	8007bbe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bc0:	f001 f998 	bl	8008ef4 <xTaskGetSchedulerState>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d102      	bne.n	8007bd0 <xQueueGenericSend+0x98>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <xQueueGenericSend+0x9c>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <xQueueGenericSend+0x9e>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <xQueueGenericSend+0xb6>
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	61fb      	str	r3, [r7, #28]
 8007bec:	e7fe      	b.n	8007bec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bee:	f001 fecd 	bl	800998c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d302      	bcc.n	8007c04 <xQueueGenericSend+0xcc>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d129      	bne.n	8007c58 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c0a:	f000 f9ff 	bl	800800c <prvCopyDataToQueue>
 8007c0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d010      	beq.n	8007c3a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	3324      	adds	r3, #36	; 0x24
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 ffb3 	bl	8008b88 <xTaskRemoveFromEventList>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d013      	beq.n	8007c50 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c28:	4b3f      	ldr	r3, [pc, #252]	; (8007d28 <xQueueGenericSend+0x1f0>)
 8007c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	e00a      	b.n	8007c50 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d007      	beq.n	8007c50 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c40:	4b39      	ldr	r3, [pc, #228]	; (8007d28 <xQueueGenericSend+0x1f0>)
 8007c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c50:	f001 feca 	bl	80099e8 <vPortExitCritical>
				return pdPASS;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e063      	b.n	8007d20 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c5e:	f001 fec3 	bl	80099e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	e05c      	b.n	8007d20 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c6c:	f107 0314 	add.w	r3, r7, #20
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 ffeb 	bl	8008c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c76:	2301      	movs	r3, #1
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c7a:	f001 feb5 	bl	80099e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c7e:	f000 fd67 	bl	8008750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c82:	f001 fe83 	bl	800998c <vPortEnterCritical>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c8c:	b25b      	sxtb	r3, r3
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c92:	d103      	bne.n	8007c9c <xQueueGenericSend+0x164>
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ca2:	b25b      	sxtb	r3, r3
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d103      	bne.n	8007cb2 <xQueueGenericSend+0x17a>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cb2:	f001 fe99 	bl	80099e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cb6:	1d3a      	adds	r2, r7, #4
 8007cb8:	f107 0314 	add.w	r3, r7, #20
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 ffda 	bl	8008c78 <xTaskCheckForTimeOut>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d124      	bne.n	8007d14 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ccc:	f000 fa96 	bl	80081fc <prvIsQueueFull>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d018      	beq.n	8007d08 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	3310      	adds	r3, #16
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 ff04 	bl	8008aec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ce6:	f000 fa21 	bl	800812c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007cea:	f000 fd3f 	bl	800876c <xTaskResumeAll>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f47f af7c 	bne.w	8007bee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <xQueueGenericSend+0x1f0>)
 8007cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	e772      	b.n	8007bee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d0a:	f000 fa0f 	bl	800812c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d0e:	f000 fd2d 	bl	800876c <xTaskResumeAll>
 8007d12:	e76c      	b.n	8007bee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d16:	f000 fa09 	bl	800812c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d1a:	f000 fd27 	bl	800876c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3738      	adds	r7, #56	; 0x38
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	e000ed04 	.word	0xe000ed04

08007d2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08e      	sub	sp, #56	; 0x38
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <xQueueGenericSendFromISR+0x2c>
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
 8007d56:	e7fe      	b.n	8007d56 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d103      	bne.n	8007d66 <xQueueGenericSendFromISR+0x3a>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <xQueueGenericSendFromISR+0x3e>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e000      	b.n	8007d6c <xQueueGenericSendFromISR+0x40>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <xQueueGenericSendFromISR+0x58>
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	623b      	str	r3, [r7, #32]
 8007d82:	e7fe      	b.n	8007d82 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d103      	bne.n	8007d92 <xQueueGenericSendFromISR+0x66>
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d101      	bne.n	8007d96 <xQueueGenericSendFromISR+0x6a>
 8007d92:	2301      	movs	r3, #1
 8007d94:	e000      	b.n	8007d98 <xQueueGenericSendFromISR+0x6c>
 8007d96:	2300      	movs	r3, #0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d109      	bne.n	8007db0 <xQueueGenericSendFromISR+0x84>
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	61fb      	str	r3, [r7, #28]
 8007dae:	e7fe      	b.n	8007dae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007db0:	f001 fec8 	bl	8009b44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007db4:	f3ef 8211 	mrs	r2, BASEPRI
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	61ba      	str	r2, [r7, #24]
 8007dca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d302      	bcc.n	8007de2 <xQueueGenericSendFromISR+0xb6>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d12c      	bne.n	8007e3c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	68b9      	ldr	r1, [r7, #8]
 8007df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007df2:	f000 f90b 	bl	800800c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007df6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfe:	d112      	bne.n	8007e26 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d016      	beq.n	8007e36 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	3324      	adds	r3, #36	; 0x24
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 febb 	bl	8008b88 <xTaskRemoveFromEventList>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00e      	beq.n	8007e36 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00b      	beq.n	8007e36 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	e007      	b.n	8007e36 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	b25a      	sxtb	r2, r3
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e36:	2301      	movs	r3, #1
 8007e38:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007e3a:	e001      	b.n	8007e40 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3738      	adds	r7, #56	; 0x38
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08c      	sub	sp, #48	; 0x30
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d109      	bne.n	8007e82 <xQueueReceive+0x2e>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	623b      	str	r3, [r7, #32]
 8007e80:	e7fe      	b.n	8007e80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d103      	bne.n	8007e90 <xQueueReceive+0x3c>
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <xQueueReceive+0x40>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e000      	b.n	8007e96 <xQueueReceive+0x42>
 8007e94:	2300      	movs	r3, #0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <xQueueReceive+0x5a>
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	61fb      	str	r3, [r7, #28]
 8007eac:	e7fe      	b.n	8007eac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eae:	f001 f821 	bl	8008ef4 <xTaskGetSchedulerState>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <xQueueReceive+0x6a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <xQueueReceive+0x6e>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <xQueueReceive+0x70>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d109      	bne.n	8007edc <xQueueReceive+0x88>
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	e7fe      	b.n	8007eda <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007edc:	f001 fd56 	bl	800998c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d01f      	beq.n	8007f2c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007eec:	68b9      	ldr	r1, [r7, #8]
 8007eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef0:	f000 f8f6 	bl	80080e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	1e5a      	subs	r2, r3, #1
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00f      	beq.n	8007f24 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	3310      	adds	r3, #16
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fe3d 	bl	8008b88 <xTaskRemoveFromEventList>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d007      	beq.n	8007f24 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f14:	4b3c      	ldr	r3, [pc, #240]	; (8008008 <xQueueReceive+0x1b4>)
 8007f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f24:	f001 fd60 	bl	80099e8 <vPortExitCritical>
				return pdPASS;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e069      	b.n	8008000 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d103      	bne.n	8007f3a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f32:	f001 fd59 	bl	80099e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f36:	2300      	movs	r3, #0
 8007f38:	e062      	b.n	8008000 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d106      	bne.n	8007f4e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f40:	f107 0310 	add.w	r3, r7, #16
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fe81 	bl	8008c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f4e:	f001 fd4b 	bl	80099e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f52:	f000 fbfd 	bl	8008750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f56:	f001 fd19 	bl	800998c <vPortEnterCritical>
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f60:	b25b      	sxtb	r3, r3
 8007f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f66:	d103      	bne.n	8007f70 <xQueueReceive+0x11c>
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f76:	b25b      	sxtb	r3, r3
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d103      	bne.n	8007f86 <xQueueReceive+0x132>
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f86:	f001 fd2f 	bl	80099e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f8a:	1d3a      	adds	r2, r7, #4
 8007f8c:	f107 0310 	add.w	r3, r7, #16
 8007f90:	4611      	mov	r1, r2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fe70 	bl	8008c78 <xTaskCheckForTimeOut>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d123      	bne.n	8007fe6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa0:	f000 f916 	bl	80081d0 <prvIsQueueEmpty>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d017      	beq.n	8007fda <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	3324      	adds	r3, #36	; 0x24
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fd9a 	bl	8008aec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fba:	f000 f8b7 	bl	800812c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fbe:	f000 fbd5 	bl	800876c <xTaskResumeAll>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d189      	bne.n	8007edc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007fc8:	4b0f      	ldr	r3, [pc, #60]	; (8008008 <xQueueReceive+0x1b4>)
 8007fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	e780      	b.n	8007edc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fdc:	f000 f8a6 	bl	800812c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fe0:	f000 fbc4 	bl	800876c <xTaskResumeAll>
 8007fe4:	e77a      	b.n	8007edc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fe8:	f000 f8a0 	bl	800812c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fec:	f000 fbbe 	bl	800876c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ff2:	f000 f8ed 	bl	80081d0 <prvIsQueueEmpty>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f43f af6f 	beq.w	8007edc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ffe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008000:	4618      	mov	r0, r3
 8008002:	3730      	adds	r7, #48	; 0x30
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008018:	2300      	movs	r3, #0
 800801a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10d      	bne.n	8008046 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d14d      	bne.n	80080ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 ff7a 	bl	8008f30 <xTaskPriorityDisinherit>
 800803c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	609a      	str	r2, [r3, #8]
 8008044:	e043      	b.n	80080ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d119      	bne.n	8008080 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6858      	ldr	r0, [r3, #4]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008054:	461a      	mov	r2, r3
 8008056:	68b9      	ldr	r1, [r7, #8]
 8008058:	f001 ffac 	bl	8009fb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008064:	441a      	add	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	429a      	cmp	r2, r3
 8008074:	d32b      	bcc.n	80080ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	605a      	str	r2, [r3, #4]
 800807e:	e026      	b.n	80080ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	68d8      	ldr	r0, [r3, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008088:	461a      	mov	r2, r3
 800808a:	68b9      	ldr	r1, [r7, #8]
 800808c:	f001 ff92 	bl	8009fb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	68da      	ldr	r2, [r3, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	425b      	negs	r3, r3
 800809a:	441a      	add	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d207      	bcs.n	80080bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	425b      	negs	r3, r3
 80080b6:	441a      	add	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d105      	bne.n	80080ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80080d6:	697b      	ldr	r3, [r7, #20]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d018      	beq.n	8008124 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fa:	441a      	add	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	429a      	cmp	r2, r3
 800810a:	d303      	bcc.n	8008114 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68d9      	ldr	r1, [r3, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811c:	461a      	mov	r2, r3
 800811e:	6838      	ldr	r0, [r7, #0]
 8008120:	f001 ff48 	bl	8009fb4 <memcpy>
	}
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008134:	f001 fc2a 	bl	800998c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800813e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008140:	e011      	b.n	8008166 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	2b00      	cmp	r3, #0
 8008148:	d012      	beq.n	8008170 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3324      	adds	r3, #36	; 0x24
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fd1a 	bl	8008b88 <xTaskRemoveFromEventList>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800815a:	f000 fded 	bl	8008d38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	3b01      	subs	r3, #1
 8008162:	b2db      	uxtb	r3, r3
 8008164:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dce9      	bgt.n	8008142 <prvUnlockQueue+0x16>
 800816e:	e000      	b.n	8008172 <prvUnlockQueue+0x46>
					break;
 8008170:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	22ff      	movs	r2, #255	; 0xff
 8008176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800817a:	f001 fc35 	bl	80099e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800817e:	f001 fc05 	bl	800998c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008188:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800818a:	e011      	b.n	80081b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d012      	beq.n	80081ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3310      	adds	r3, #16
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fcf5 	bl	8008b88 <xTaskRemoveFromEventList>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081a4:	f000 fdc8 	bl	8008d38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dce9      	bgt.n	800818c <prvUnlockQueue+0x60>
 80081b8:	e000      	b.n	80081bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	22ff      	movs	r2, #255	; 0xff
 80081c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80081c4:	f001 fc10 	bl	80099e8 <vPortExitCritical>
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081d8:	f001 fbd8 	bl	800998c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d102      	bne.n	80081ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081e4:	2301      	movs	r3, #1
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	e001      	b.n	80081ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081ee:	f001 fbfb 	bl	80099e8 <vPortExitCritical>

	return xReturn;
 80081f2:	68fb      	ldr	r3, [r7, #12]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008204:	f001 fbc2 	bl	800998c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008210:	429a      	cmp	r2, r3
 8008212:	d102      	bne.n	800821a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008214:	2301      	movs	r3, #1
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	e001      	b.n	800821e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800821e:	f001 fbe3 	bl	80099e8 <vPortExitCritical>

	return xReturn;
 8008222:	68fb      	ldr	r3, [r7, #12]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	e014      	b.n	8008266 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800823c:	4a0e      	ldr	r2, [pc, #56]	; (8008278 <vQueueAddToRegistry+0x4c>)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10b      	bne.n	8008260 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008248:	490b      	ldr	r1, [pc, #44]	; (8008278 <vQueueAddToRegistry+0x4c>)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008252:	4a09      	ldr	r2, [pc, #36]	; (8008278 <vQueueAddToRegistry+0x4c>)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	4413      	add	r3, r2
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800825e:	e005      	b.n	800826c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3301      	adds	r3, #1
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b07      	cmp	r3, #7
 800826a:	d9e7      	bls.n	800823c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800826c:	bf00      	nop
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	20002108 	.word	0x20002108

0800827c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800828c:	f001 fb7e 	bl	800998c <vPortEnterCritical>
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008296:	b25b      	sxtb	r3, r3
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d103      	bne.n	80082a6 <vQueueWaitForMessageRestricted+0x2a>
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ac:	b25b      	sxtb	r3, r3
 80082ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b2:	d103      	bne.n	80082bc <vQueueWaitForMessageRestricted+0x40>
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082bc:	f001 fb94 	bl	80099e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d106      	bne.n	80082d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	3324      	adds	r3, #36	; 0x24
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fc2f 	bl	8008b34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082d6:	6978      	ldr	r0, [r7, #20]
 80082d8:	f7ff ff28 	bl	800812c <prvUnlockQueue>
	}
 80082dc:	bf00      	nop
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08e      	sub	sp, #56	; 0x38
 80082e8:	af04      	add	r7, sp, #16
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d109      	bne.n	800830c <xTaskCreateStatic+0x28>
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	623b      	str	r3, [r7, #32]
 800830a:	e7fe      	b.n	800830a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <xTaskCreateStatic+0x42>
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	61fb      	str	r3, [r7, #28]
 8008324:	e7fe      	b.n	8008324 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008326:	235c      	movs	r3, #92	; 0x5c
 8008328:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b5c      	cmp	r3, #92	; 0x5c
 800832e:	d009      	beq.n	8008344 <xTaskCreateStatic+0x60>
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	61bb      	str	r3, [r7, #24]
 8008342:	e7fe      	b.n	8008342 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008344:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01e      	beq.n	800838a <xTaskCreateStatic+0xa6>
 800834c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01b      	beq.n	800838a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800835a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	2202      	movs	r2, #2
 8008360:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008364:	2300      	movs	r3, #0
 8008366:	9303      	str	r3, [sp, #12]
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	9302      	str	r3, [sp, #8]
 800836c:	f107 0314 	add.w	r3, r7, #20
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 f850 	bl	8008422 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008382:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008384:	f000 f8dc 	bl	8008540 <prvAddNewTaskToReadyList>
 8008388:	e001      	b.n	800838e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800838e:	697b      	ldr	r3, [r7, #20]
	}
 8008390:	4618      	mov	r0, r3
 8008392:	3728      	adds	r7, #40	; 0x28
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08c      	sub	sp, #48	; 0x30
 800839c:	af04      	add	r7, sp, #16
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	4613      	mov	r3, r2
 80083a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083a8:	88fb      	ldrh	r3, [r7, #6]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 fc07 	bl	8009bc0 <pvPortMalloc>
 80083b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00e      	beq.n	80083d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083ba:	205c      	movs	r0, #92	; 0x5c
 80083bc:	f001 fc00 	bl	8009bc0 <pvPortMalloc>
 80083c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	631a      	str	r2, [r3, #48]	; 0x30
 80083ce:	e005      	b.n	80083dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083d0:	6978      	ldr	r0, [r7, #20]
 80083d2:	f001 fcb7 	bl	8009d44 <vPortFree>
 80083d6:	e001      	b.n	80083dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083d8:	2300      	movs	r3, #0
 80083da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d017      	beq.n	8008412 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083ea:	88fa      	ldrh	r2, [r7, #6]
 80083ec:	2300      	movs	r3, #0
 80083ee:	9303      	str	r3, [sp, #12]
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	9302      	str	r3, [sp, #8]
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 f80e 	bl	8008422 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008406:	69f8      	ldr	r0, [r7, #28]
 8008408:	f000 f89a 	bl	8008540 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800840c:	2301      	movs	r3, #1
 800840e:	61bb      	str	r3, [r7, #24]
 8008410:	e002      	b.n	8008418 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008412:	f04f 33ff 	mov.w	r3, #4294967295
 8008416:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008418:	69bb      	ldr	r3, [r7, #24]
	}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b088      	sub	sp, #32
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
 800842e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	461a      	mov	r2, r3
 800843a:	21a5      	movs	r1, #165	; 0xa5
 800843c:	f001 fdc5 	bl	8009fca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800844a:	3b01      	subs	r3, #1
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	f023 0307 	bic.w	r3, r3, #7
 8008458:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	2b00      	cmp	r3, #0
 8008462:	d009      	beq.n	8008478 <prvInitialiseNewTask+0x56>
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e7fe      	b.n	8008476 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d01f      	beq.n	80084be <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800847e:	2300      	movs	r3, #0
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	e012      	b.n	80084aa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	4413      	add	r3, r2
 800848a:	7819      	ldrb	r1, [r3, #0]
 800848c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	3334      	adds	r3, #52	; 0x34
 8008494:	460a      	mov	r2, r1
 8008496:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	4413      	add	r3, r2
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d006      	beq.n	80084b2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	3301      	adds	r3, #1
 80084a8:	61fb      	str	r3, [r7, #28]
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	2b0f      	cmp	r3, #15
 80084ae:	d9e9      	bls.n	8008484 <prvInitialiseNewTask+0x62>
 80084b0:	e000      	b.n	80084b4 <prvInitialiseNewTask+0x92>
			{
				break;
 80084b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084bc:	e003      	b.n	80084c6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	2b37      	cmp	r3, #55	; 0x37
 80084ca:	d901      	bls.n	80084d0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084cc:	2337      	movs	r3, #55	; 0x37
 80084ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	2200      	movs	r2, #0
 80084e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	3304      	adds	r3, #4
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff f994 	bl	8007814 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	3318      	adds	r3, #24
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff f98f 	bl	8007814 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	2200      	movs	r2, #0
 8008510:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	68f9      	ldr	r1, [r7, #12]
 800851e:	69b8      	ldr	r0, [r7, #24]
 8008520:	f001 f90c 	bl	800973c <pxPortInitialiseStack>
 8008524:	4602      	mov	r2, r0
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008536:	bf00      	nop
 8008538:	3720      	adds	r7, #32
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008548:	f001 fa20 	bl	800998c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800854c:	4b2d      	ldr	r3, [pc, #180]	; (8008604 <prvAddNewTaskToReadyList+0xc4>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	4a2c      	ldr	r2, [pc, #176]	; (8008604 <prvAddNewTaskToReadyList+0xc4>)
 8008554:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008556:	4b2c      	ldr	r3, [pc, #176]	; (8008608 <prvAddNewTaskToReadyList+0xc8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800855e:	4a2a      	ldr	r2, [pc, #168]	; (8008608 <prvAddNewTaskToReadyList+0xc8>)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008564:	4b27      	ldr	r3, [pc, #156]	; (8008604 <prvAddNewTaskToReadyList+0xc4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d110      	bne.n	800858e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800856c:	f000 fc08 	bl	8008d80 <prvInitialiseTaskLists>
 8008570:	e00d      	b.n	800858e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008572:	4b26      	ldr	r3, [pc, #152]	; (800860c <prvAddNewTaskToReadyList+0xcc>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d109      	bne.n	800858e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800857a:	4b23      	ldr	r3, [pc, #140]	; (8008608 <prvAddNewTaskToReadyList+0xc8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	429a      	cmp	r2, r3
 8008586:	d802      	bhi.n	800858e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008588:	4a1f      	ldr	r2, [pc, #124]	; (8008608 <prvAddNewTaskToReadyList+0xc8>)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800858e:	4b20      	ldr	r3, [pc, #128]	; (8008610 <prvAddNewTaskToReadyList+0xd0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <prvAddNewTaskToReadyList+0xd0>)
 8008596:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008598:	4b1d      	ldr	r3, [pc, #116]	; (8008610 <prvAddNewTaskToReadyList+0xd0>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <prvAddNewTaskToReadyList+0xd4>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d903      	bls.n	80085b4 <prvAddNewTaskToReadyList+0x74>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	4a18      	ldr	r2, [pc, #96]	; (8008614 <prvAddNewTaskToReadyList+0xd4>)
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4a15      	ldr	r2, [pc, #84]	; (8008618 <prvAddNewTaskToReadyList+0xd8>)
 80085c2:	441a      	add	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f7ff f92f 	bl	800782e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085d0:	f001 fa0a 	bl	80099e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085d4:	4b0d      	ldr	r3, [pc, #52]	; (800860c <prvAddNewTaskToReadyList+0xcc>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00e      	beq.n	80085fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085dc:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <prvAddNewTaskToReadyList+0xc8>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d207      	bcs.n	80085fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085ea:	4b0c      	ldr	r3, [pc, #48]	; (800861c <prvAddNewTaskToReadyList+0xdc>)
 80085ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085fa:	bf00      	nop
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000bbc 	.word	0x20000bbc
 8008608:	200006e8 	.word	0x200006e8
 800860c:	20000bc8 	.word	0x20000bc8
 8008610:	20000bd8 	.word	0x20000bd8
 8008614:	20000bc4 	.word	0x20000bc4
 8008618:	200006ec 	.word	0x200006ec
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d016      	beq.n	8008660 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008632:	4b13      	ldr	r3, [pc, #76]	; (8008680 <vTaskDelay+0x60>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <vTaskDelay+0x2e>
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	60bb      	str	r3, [r7, #8]
 800864c:	e7fe      	b.n	800864c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800864e:	f000 f87f 	bl	8008750 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008652:	2100      	movs	r1, #0
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fcd7 	bl	8009008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800865a:	f000 f887 	bl	800876c <xTaskResumeAll>
 800865e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d107      	bne.n	8008676 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008666:	4b07      	ldr	r3, [pc, #28]	; (8008684 <vTaskDelay+0x64>)
 8008668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008676:	bf00      	nop
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000be4 	.word	0x20000be4
 8008684:	e000ed04 	.word	0xe000ed04

08008688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08a      	sub	sp, #40	; 0x28
 800868c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008692:	2300      	movs	r3, #0
 8008694:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008696:	463a      	mov	r2, r7
 8008698:	1d39      	adds	r1, r7, #4
 800869a:	f107 0308 	add.w	r3, r7, #8
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff f864 	bl	800776c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	9202      	str	r2, [sp, #8]
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	2300      	movs	r3, #0
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	2300      	movs	r3, #0
 80086b4:	460a      	mov	r2, r1
 80086b6:	4920      	ldr	r1, [pc, #128]	; (8008738 <vTaskStartScheduler+0xb0>)
 80086b8:	4820      	ldr	r0, [pc, #128]	; (800873c <vTaskStartScheduler+0xb4>)
 80086ba:	f7ff fe13 	bl	80082e4 <xTaskCreateStatic>
 80086be:	4602      	mov	r2, r0
 80086c0:	4b1f      	ldr	r3, [pc, #124]	; (8008740 <vTaskStartScheduler+0xb8>)
 80086c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086c4:	4b1e      	ldr	r3, [pc, #120]	; (8008740 <vTaskStartScheduler+0xb8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086cc:	2301      	movs	r3, #1
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	e001      	b.n	80086d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d102      	bne.n	80086e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086dc:	f000 fce8 	bl	80090b0 <xTimerCreateTimerTask>
 80086e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d115      	bne.n	8008714 <vTaskStartScheduler+0x8c>
 80086e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <vTaskStartScheduler+0xbc>)
 80086fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008700:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008702:	4b11      	ldr	r3, [pc, #68]	; (8008748 <vTaskStartScheduler+0xc0>)
 8008704:	2201      	movs	r2, #1
 8008706:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008708:	4b10      	ldr	r3, [pc, #64]	; (800874c <vTaskStartScheduler+0xc4>)
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800870e:	f001 f89f 	bl	8009850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008712:	e00d      	b.n	8008730 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871a:	d109      	bne.n	8008730 <vTaskStartScheduler+0xa8>
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	e7fe      	b.n	800872e <vTaskStartScheduler+0xa6>
}
 8008730:	bf00      	nop
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	0800a1d0 	.word	0x0800a1d0
 800873c:	08008d51 	.word	0x08008d51
 8008740:	20000be0 	.word	0x20000be0
 8008744:	20000bdc 	.word	0x20000bdc
 8008748:	20000bc8 	.word	0x20000bc8
 800874c:	20000bc0 	.word	0x20000bc0

08008750 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008754:	4b04      	ldr	r3, [pc, #16]	; (8008768 <vTaskSuspendAll+0x18>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3301      	adds	r3, #1
 800875a:	4a03      	ldr	r2, [pc, #12]	; (8008768 <vTaskSuspendAll+0x18>)
 800875c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800875e:	bf00      	nop
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	20000be4 	.word	0x20000be4

0800876c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008776:	2300      	movs	r3, #0
 8008778:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800877a:	4b41      	ldr	r3, [pc, #260]	; (8008880 <xTaskResumeAll+0x114>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d109      	bne.n	8008796 <xTaskResumeAll+0x2a>
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	e7fe      	b.n	8008794 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008796:	f001 f8f9 	bl	800998c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800879a:	4b39      	ldr	r3, [pc, #228]	; (8008880 <xTaskResumeAll+0x114>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3b01      	subs	r3, #1
 80087a0:	4a37      	ldr	r2, [pc, #220]	; (8008880 <xTaskResumeAll+0x114>)
 80087a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087a4:	4b36      	ldr	r3, [pc, #216]	; (8008880 <xTaskResumeAll+0x114>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d162      	bne.n	8008872 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087ac:	4b35      	ldr	r3, [pc, #212]	; (8008884 <xTaskResumeAll+0x118>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d05e      	beq.n	8008872 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087b4:	e02f      	b.n	8008816 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b6:	4b34      	ldr	r3, [pc, #208]	; (8008888 <xTaskResumeAll+0x11c>)
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3318      	adds	r3, #24
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff f890 	bl	80078e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3304      	adds	r3, #4
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff f88b 	bl	80078e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d6:	4b2d      	ldr	r3, [pc, #180]	; (800888c <xTaskResumeAll+0x120>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d903      	bls.n	80087e6 <xTaskResumeAll+0x7a>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e2:	4a2a      	ldr	r2, [pc, #168]	; (800888c <xTaskResumeAll+0x120>)
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4a27      	ldr	r2, [pc, #156]	; (8008890 <xTaskResumeAll+0x124>)
 80087f4:	441a      	add	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3304      	adds	r3, #4
 80087fa:	4619      	mov	r1, r3
 80087fc:	4610      	mov	r0, r2
 80087fe:	f7ff f816 	bl	800782e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008806:	4b23      	ldr	r3, [pc, #140]	; (8008894 <xTaskResumeAll+0x128>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	429a      	cmp	r2, r3
 800880e:	d302      	bcc.n	8008816 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008810:	4b21      	ldr	r3, [pc, #132]	; (8008898 <xTaskResumeAll+0x12c>)
 8008812:	2201      	movs	r2, #1
 8008814:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008816:	4b1c      	ldr	r3, [pc, #112]	; (8008888 <xTaskResumeAll+0x11c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1cb      	bne.n	80087b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008824:	f000 fb46 	bl	8008eb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008828:	4b1c      	ldr	r3, [pc, #112]	; (800889c <xTaskResumeAll+0x130>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d010      	beq.n	8008856 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008834:	f000 f846 	bl	80088c4 <xTaskIncrementTick>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800883e:	4b16      	ldr	r3, [pc, #88]	; (8008898 <xTaskResumeAll+0x12c>)
 8008840:	2201      	movs	r2, #1
 8008842:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3b01      	subs	r3, #1
 8008848:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1f1      	bne.n	8008834 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008850:	4b12      	ldr	r3, [pc, #72]	; (800889c <xTaskResumeAll+0x130>)
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008856:	4b10      	ldr	r3, [pc, #64]	; (8008898 <xTaskResumeAll+0x12c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d009      	beq.n	8008872 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800885e:	2301      	movs	r3, #1
 8008860:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008862:	4b0f      	ldr	r3, [pc, #60]	; (80088a0 <xTaskResumeAll+0x134>)
 8008864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008872:	f001 f8b9 	bl	80099e8 <vPortExitCritical>

	return xAlreadyYielded;
 8008876:	68bb      	ldr	r3, [r7, #8]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000be4 	.word	0x20000be4
 8008884:	20000bbc 	.word	0x20000bbc
 8008888:	20000b7c 	.word	0x20000b7c
 800888c:	20000bc4 	.word	0x20000bc4
 8008890:	200006ec 	.word	0x200006ec
 8008894:	200006e8 	.word	0x200006e8
 8008898:	20000bd0 	.word	0x20000bd0
 800889c:	20000bcc 	.word	0x20000bcc
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088aa:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <xTaskGetTickCount+0x1c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088b0:	687b      	ldr	r3, [r7, #4]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	20000bc0 	.word	0x20000bc0

080088c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088ca:	2300      	movs	r3, #0
 80088cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ce:	4b4e      	ldr	r3, [pc, #312]	; (8008a08 <xTaskIncrementTick+0x144>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f040 8088 	bne.w	80089e8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088d8:	4b4c      	ldr	r3, [pc, #304]	; (8008a0c <xTaskIncrementTick+0x148>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3301      	adds	r3, #1
 80088de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088e0:	4a4a      	ldr	r2, [pc, #296]	; (8008a0c <xTaskIncrementTick+0x148>)
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d11f      	bne.n	800892c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80088ec:	4b48      	ldr	r3, [pc, #288]	; (8008a10 <xTaskIncrementTick+0x14c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d009      	beq.n	800890a <xTaskIncrementTick+0x46>
 80088f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	e7fe      	b.n	8008908 <xTaskIncrementTick+0x44>
 800890a:	4b41      	ldr	r3, [pc, #260]	; (8008a10 <xTaskIncrementTick+0x14c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	4b40      	ldr	r3, [pc, #256]	; (8008a14 <xTaskIncrementTick+0x150>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a3e      	ldr	r2, [pc, #248]	; (8008a10 <xTaskIncrementTick+0x14c>)
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	4a3e      	ldr	r2, [pc, #248]	; (8008a14 <xTaskIncrementTick+0x150>)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	4b3e      	ldr	r3, [pc, #248]	; (8008a18 <xTaskIncrementTick+0x154>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3301      	adds	r3, #1
 8008924:	4a3c      	ldr	r2, [pc, #240]	; (8008a18 <xTaskIncrementTick+0x154>)
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	f000 fac4 	bl	8008eb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800892c:	4b3b      	ldr	r3, [pc, #236]	; (8008a1c <xTaskIncrementTick+0x158>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	429a      	cmp	r2, r3
 8008934:	d349      	bcc.n	80089ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008936:	4b36      	ldr	r3, [pc, #216]	; (8008a10 <xTaskIncrementTick+0x14c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d104      	bne.n	800894a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008940:	4b36      	ldr	r3, [pc, #216]	; (8008a1c <xTaskIncrementTick+0x158>)
 8008942:	f04f 32ff 	mov.w	r2, #4294967295
 8008946:	601a      	str	r2, [r3, #0]
					break;
 8008948:	e03f      	b.n	80089ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800894a:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <xTaskIncrementTick+0x14c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	429a      	cmp	r2, r3
 8008960:	d203      	bcs.n	800896a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008962:	4a2e      	ldr	r2, [pc, #184]	; (8008a1c <xTaskIncrementTick+0x158>)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008968:	e02f      	b.n	80089ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	3304      	adds	r3, #4
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe ffba 	bl	80078e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008978:	2b00      	cmp	r3, #0
 800897a:	d004      	beq.n	8008986 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	3318      	adds	r3, #24
 8008980:	4618      	mov	r0, r3
 8008982:	f7fe ffb1 	bl	80078e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898a:	4b25      	ldr	r3, [pc, #148]	; (8008a20 <xTaskIncrementTick+0x15c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d903      	bls.n	800899a <xTaskIncrementTick+0xd6>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <xTaskIncrementTick+0x15c>)
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4a1f      	ldr	r2, [pc, #124]	; (8008a24 <xTaskIncrementTick+0x160>)
 80089a8:	441a      	add	r2, r3
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fe ff3c 	bl	800782e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ba:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <xTaskIncrementTick+0x164>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d3b8      	bcc.n	8008936 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80089c4:	2301      	movs	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089c8:	e7b5      	b.n	8008936 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089ca:	4b17      	ldr	r3, [pc, #92]	; (8008a28 <xTaskIncrementTick+0x164>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d0:	4914      	ldr	r1, [pc, #80]	; (8008a24 <xTaskIncrementTick+0x160>)
 80089d2:	4613      	mov	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	440b      	add	r3, r1
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d907      	bls.n	80089f2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80089e2:	2301      	movs	r3, #1
 80089e4:	617b      	str	r3, [r7, #20]
 80089e6:	e004      	b.n	80089f2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80089e8:	4b10      	ldr	r3, [pc, #64]	; (8008a2c <xTaskIncrementTick+0x168>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3301      	adds	r3, #1
 80089ee:	4a0f      	ldr	r2, [pc, #60]	; (8008a2c <xTaskIncrementTick+0x168>)
 80089f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80089f2:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <xTaskIncrementTick+0x16c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80089fe:	697b      	ldr	r3, [r7, #20]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3718      	adds	r7, #24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000be4 	.word	0x20000be4
 8008a0c:	20000bc0 	.word	0x20000bc0
 8008a10:	20000b74 	.word	0x20000b74
 8008a14:	20000b78 	.word	0x20000b78
 8008a18:	20000bd4 	.word	0x20000bd4
 8008a1c:	20000bdc 	.word	0x20000bdc
 8008a20:	20000bc4 	.word	0x20000bc4
 8008a24:	200006ec 	.word	0x200006ec
 8008a28:	200006e8 	.word	0x200006e8
 8008a2c:	20000bcc 	.word	0x20000bcc
 8008a30:	20000bd0 	.word	0x20000bd0

08008a34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a3a:	4b27      	ldr	r3, [pc, #156]	; (8008ad8 <vTaskSwitchContext+0xa4>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a42:	4b26      	ldr	r3, [pc, #152]	; (8008adc <vTaskSwitchContext+0xa8>)
 8008a44:	2201      	movs	r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a48:	e040      	b.n	8008acc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008a4a:	4b24      	ldr	r3, [pc, #144]	; (8008adc <vTaskSwitchContext+0xa8>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a50:	4b23      	ldr	r3, [pc, #140]	; (8008ae0 <vTaskSwitchContext+0xac>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	e00f      	b.n	8008a78 <vTaskSwitchContext+0x44>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <vTaskSwitchContext+0x3e>
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	607b      	str	r3, [r7, #4]
 8008a70:	e7fe      	b.n	8008a70 <vTaskSwitchContext+0x3c>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	491a      	ldr	r1, [pc, #104]	; (8008ae4 <vTaskSwitchContext+0xb0>)
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	440b      	add	r3, r1
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d0e5      	beq.n	8008a58 <vTaskSwitchContext+0x24>
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4a13      	ldr	r2, [pc, #76]	; (8008ae4 <vTaskSwitchContext+0xb0>)
 8008a98:	4413      	add	r3, r2
 8008a9a:	60bb      	str	r3, [r7, #8]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	605a      	str	r2, [r3, #4]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	3308      	adds	r3, #8
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d104      	bne.n	8008abc <vTaskSwitchContext+0x88>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	605a      	str	r2, [r3, #4]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	4a09      	ldr	r2, [pc, #36]	; (8008ae8 <vTaskSwitchContext+0xb4>)
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	4a06      	ldr	r2, [pc, #24]	; (8008ae0 <vTaskSwitchContext+0xac>)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6013      	str	r3, [r2, #0]
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	20000be4 	.word	0x20000be4
 8008adc:	20000bd0 	.word	0x20000bd0
 8008ae0:	20000bc4 	.word	0x20000bc4
 8008ae4:	200006ec 	.word	0x200006ec
 8008ae8:	200006e8 	.word	0x200006e8

08008aec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d109      	bne.n	8008b10 <vTaskPlaceOnEventList+0x24>
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	e7fe      	b.n	8008b0e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <vTaskPlaceOnEventList+0x44>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3318      	adds	r3, #24
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7fe feac 	bl	8007876 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b1e:	2101      	movs	r1, #1
 8008b20:	6838      	ldr	r0, [r7, #0]
 8008b22:	f000 fa71 	bl	8009008 <prvAddCurrentTaskToDelayedList>
}
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200006e8 	.word	0x200006e8

08008b34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d109      	bne.n	8008b5a <vTaskPlaceOnEventListRestricted+0x26>
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e7fe      	b.n	8008b58 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b5a:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <vTaskPlaceOnEventListRestricted+0x50>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3318      	adds	r3, #24
 8008b60:	4619      	mov	r1, r3
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f7fe fe63 	bl	800782e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	68b8      	ldr	r0, [r7, #8]
 8008b78:	f000 fa46 	bl	8009008 <prvAddCurrentTaskToDelayedList>
	}
 8008b7c:	bf00      	nop
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	200006e8 	.word	0x200006e8

08008b88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <xTaskRemoveFromEventList+0x2a>
 8008b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	e7fe      	b.n	8008bb0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	3318      	adds	r3, #24
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fe96 	bl	80078e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bbc:	4b1d      	ldr	r3, [pc, #116]	; (8008c34 <xTaskRemoveFromEventList+0xac>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11d      	bne.n	8008c00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fe fe8d 	bl	80078e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd2:	4b19      	ldr	r3, [pc, #100]	; (8008c38 <xTaskRemoveFromEventList+0xb0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d903      	bls.n	8008be2 <xTaskRemoveFromEventList+0x5a>
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	4a16      	ldr	r2, [pc, #88]	; (8008c38 <xTaskRemoveFromEventList+0xb0>)
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4a13      	ldr	r2, [pc, #76]	; (8008c3c <xTaskRemoveFromEventList+0xb4>)
 8008bf0:	441a      	add	r2, r3
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f7fe fe18 	bl	800782e <vListInsertEnd>
 8008bfe:	e005      	b.n	8008c0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	3318      	adds	r3, #24
 8008c04:	4619      	mov	r1, r3
 8008c06:	480e      	ldr	r0, [pc, #56]	; (8008c40 <xTaskRemoveFromEventList+0xb8>)
 8008c08:	f7fe fe11 	bl	800782e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c10:	4b0c      	ldr	r3, [pc, #48]	; (8008c44 <xTaskRemoveFromEventList+0xbc>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d905      	bls.n	8008c26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c1e:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <xTaskRemoveFromEventList+0xc0>)
 8008c20:	2201      	movs	r2, #1
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	e001      	b.n	8008c2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008c26:	2300      	movs	r3, #0
 8008c28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c2a:	697b      	ldr	r3, [r7, #20]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	20000be4 	.word	0x20000be4
 8008c38:	20000bc4 	.word	0x20000bc4
 8008c3c:	200006ec 	.word	0x200006ec
 8008c40:	20000b7c 	.word	0x20000b7c
 8008c44:	200006e8 	.word	0x200006e8
 8008c48:	20000bd0 	.word	0x20000bd0

08008c4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <vTaskInternalSetTimeOutState+0x24>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c5c:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <vTaskInternalSetTimeOutState+0x28>)
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	605a      	str	r2, [r3, #4]
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	20000bd4 	.word	0x20000bd4
 8008c74:	20000bc0 	.word	0x20000bc0

08008c78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d109      	bne.n	8008c9c <xTaskCheckForTimeOut+0x24>
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	613b      	str	r3, [r7, #16]
 8008c9a:	e7fe      	b.n	8008c9a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <xTaskCheckForTimeOut+0x3e>
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	e7fe      	b.n	8008cb4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008cb6:	f000 fe69 	bl	800998c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cba:	4b1d      	ldr	r3, [pc, #116]	; (8008d30 <xTaskCheckForTimeOut+0xb8>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd2:	d102      	bne.n	8008cda <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	61fb      	str	r3, [r7, #28]
 8008cd8:	e023      	b.n	8008d22 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b15      	ldr	r3, [pc, #84]	; (8008d34 <xTaskCheckForTimeOut+0xbc>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d007      	beq.n	8008cf6 <xTaskCheckForTimeOut+0x7e>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d302      	bcc.n	8008cf6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	61fb      	str	r3, [r7, #28]
 8008cf4:	e015      	b.n	8008d22 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d20b      	bcs.n	8008d18 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	1ad2      	subs	r2, r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff ff9d 	bl	8008c4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61fb      	str	r3, [r7, #28]
 8008d16:	e004      	b.n	8008d22 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d22:	f000 fe61 	bl	80099e8 <vPortExitCritical>

	return xReturn;
 8008d26:	69fb      	ldr	r3, [r7, #28]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3720      	adds	r7, #32
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000bc0 	.word	0x20000bc0
 8008d34:	20000bd4 	.word	0x20000bd4

08008d38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d3c:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <vTaskMissedYield+0x14>)
 8008d3e:	2201      	movs	r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
}
 8008d42:	bf00      	nop
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	20000bd0 	.word	0x20000bd0

08008d50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d58:	f000 f852 	bl	8008e00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d5c:	4b06      	ldr	r3, [pc, #24]	; (8008d78 <prvIdleTask+0x28>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d9f9      	bls.n	8008d58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <prvIdleTask+0x2c>)
 8008d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d74:	e7f0      	b.n	8008d58 <prvIdleTask+0x8>
 8008d76:	bf00      	nop
 8008d78:	200006ec 	.word	0x200006ec
 8008d7c:	e000ed04 	.word	0xe000ed04

08008d80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d86:	2300      	movs	r3, #0
 8008d88:	607b      	str	r3, [r7, #4]
 8008d8a:	e00c      	b.n	8008da6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a12      	ldr	r2, [pc, #72]	; (8008de0 <prvInitialiseTaskLists+0x60>)
 8008d98:	4413      	add	r3, r2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fd1a 	bl	80077d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3301      	adds	r3, #1
 8008da4:	607b      	str	r3, [r7, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b37      	cmp	r3, #55	; 0x37
 8008daa:	d9ef      	bls.n	8008d8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008dac:	480d      	ldr	r0, [pc, #52]	; (8008de4 <prvInitialiseTaskLists+0x64>)
 8008dae:	f7fe fd11 	bl	80077d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008db2:	480d      	ldr	r0, [pc, #52]	; (8008de8 <prvInitialiseTaskLists+0x68>)
 8008db4:	f7fe fd0e 	bl	80077d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008db8:	480c      	ldr	r0, [pc, #48]	; (8008dec <prvInitialiseTaskLists+0x6c>)
 8008dba:	f7fe fd0b 	bl	80077d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dbe:	480c      	ldr	r0, [pc, #48]	; (8008df0 <prvInitialiseTaskLists+0x70>)
 8008dc0:	f7fe fd08 	bl	80077d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008dc4:	480b      	ldr	r0, [pc, #44]	; (8008df4 <prvInitialiseTaskLists+0x74>)
 8008dc6:	f7fe fd05 	bl	80077d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dca:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <prvInitialiseTaskLists+0x78>)
 8008dcc:	4a05      	ldr	r2, [pc, #20]	; (8008de4 <prvInitialiseTaskLists+0x64>)
 8008dce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <prvInitialiseTaskLists+0x7c>)
 8008dd2:	4a05      	ldr	r2, [pc, #20]	; (8008de8 <prvInitialiseTaskLists+0x68>)
 8008dd4:	601a      	str	r2, [r3, #0]
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	200006ec 	.word	0x200006ec
 8008de4:	20000b4c 	.word	0x20000b4c
 8008de8:	20000b60 	.word	0x20000b60
 8008dec:	20000b7c 	.word	0x20000b7c
 8008df0:	20000b90 	.word	0x20000b90
 8008df4:	20000ba8 	.word	0x20000ba8
 8008df8:	20000b74 	.word	0x20000b74
 8008dfc:	20000b78 	.word	0x20000b78

08008e00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e06:	e019      	b.n	8008e3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e08:	f000 fdc0 	bl	800998c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e0c:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <prvCheckTasksWaitingTermination+0x4c>)
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3304      	adds	r3, #4
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe fd65 	bl	80078e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e1e:	4b0c      	ldr	r3, [pc, #48]	; (8008e50 <prvCheckTasksWaitingTermination+0x50>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	4a0a      	ldr	r2, [pc, #40]	; (8008e50 <prvCheckTasksWaitingTermination+0x50>)
 8008e26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e28:	4b0a      	ldr	r3, [pc, #40]	; (8008e54 <prvCheckTasksWaitingTermination+0x54>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	4a09      	ldr	r2, [pc, #36]	; (8008e54 <prvCheckTasksWaitingTermination+0x54>)
 8008e30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e32:	f000 fdd9 	bl	80099e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f80e 	bl	8008e58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e3c:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <prvCheckTasksWaitingTermination+0x54>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e1      	bne.n	8008e08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e44:	bf00      	nop
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	20000b90 	.word	0x20000b90
 8008e50:	20000bbc 	.word	0x20000bbc
 8008e54:	20000ba4 	.word	0x20000ba4

08008e58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d108      	bne.n	8008e7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 ff68 	bl	8009d44 <vPortFree>
				vPortFree( pxTCB );
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 ff65 	bl	8009d44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e7a:	e017      	b.n	8008eac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d103      	bne.n	8008e8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 ff5c 	bl	8009d44 <vPortFree>
	}
 8008e8c:	e00e      	b.n	8008eac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d009      	beq.n	8008eac <prvDeleteTCB+0x54>
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	e7fe      	b.n	8008eaa <prvDeleteTCB+0x52>
	}
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eba:	4b0c      	ldr	r3, [pc, #48]	; (8008eec <prvResetNextTaskUnblockTime+0x38>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d104      	bne.n	8008ece <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ec4:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <prvResetNextTaskUnblockTime+0x3c>)
 8008ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ecc:	e008      	b.n	8008ee0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ece:	4b07      	ldr	r3, [pc, #28]	; (8008eec <prvResetNextTaskUnblockTime+0x38>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	4a04      	ldr	r2, [pc, #16]	; (8008ef0 <prvResetNextTaskUnblockTime+0x3c>)
 8008ede:	6013      	str	r3, [r2, #0]
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	20000b74 	.word	0x20000b74
 8008ef0:	20000bdc 	.word	0x20000bdc

08008ef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008efa:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <xTaskGetSchedulerState+0x34>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d102      	bne.n	8008f08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f02:	2301      	movs	r3, #1
 8008f04:	607b      	str	r3, [r7, #4]
 8008f06:	e008      	b.n	8008f1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f08:	4b08      	ldr	r3, [pc, #32]	; (8008f2c <xTaskGetSchedulerState+0x38>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f10:	2302      	movs	r3, #2
 8008f12:	607b      	str	r3, [r7, #4]
 8008f14:	e001      	b.n	8008f1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f16:	2300      	movs	r3, #0
 8008f18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f1a:	687b      	ldr	r3, [r7, #4]
	}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	20000bc8 	.word	0x20000bc8
 8008f2c:	20000be4 	.word	0x20000be4

08008f30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d054      	beq.n	8008ff0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f46:	4b2d      	ldr	r3, [pc, #180]	; (8008ffc <xTaskPriorityDisinherit+0xcc>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d009      	beq.n	8008f64 <xTaskPriorityDisinherit+0x34>
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	e7fe      	b.n	8008f62 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d109      	bne.n	8008f80 <xTaskPriorityDisinherit+0x50>
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	60bb      	str	r3, [r7, #8]
 8008f7e:	e7fe      	b.n	8008f7e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f84:	1e5a      	subs	r2, r3, #1
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d02c      	beq.n	8008ff0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d128      	bne.n	8008ff0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe fca0 	bl	80078e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc0:	4b0f      	ldr	r3, [pc, #60]	; (8009000 <xTaskPriorityDisinherit+0xd0>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d903      	bls.n	8008fd0 <xTaskPriorityDisinherit+0xa0>
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fcc:	4a0c      	ldr	r2, [pc, #48]	; (8009000 <xTaskPriorityDisinherit+0xd0>)
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4a09      	ldr	r2, [pc, #36]	; (8009004 <xTaskPriorityDisinherit+0xd4>)
 8008fde:	441a      	add	r2, r3
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	f7fe fc21 	bl	800782e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fec:	2301      	movs	r3, #1
 8008fee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ff0:	697b      	ldr	r3, [r7, #20]
	}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	200006e8 	.word	0x200006e8
 8009000:	20000bc4 	.word	0x20000bc4
 8009004:	200006ec 	.word	0x200006ec

08009008 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009012:	4b21      	ldr	r3, [pc, #132]	; (8009098 <prvAddCurrentTaskToDelayedList+0x90>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009018:	4b20      	ldr	r3, [pc, #128]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3304      	adds	r3, #4
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe fc62 	bl	80078e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902a:	d10a      	bne.n	8009042 <prvAddCurrentTaskToDelayedList+0x3a>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009032:	4b1a      	ldr	r3, [pc, #104]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4819      	ldr	r0, [pc, #100]	; (80090a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800903c:	f7fe fbf7 	bl	800782e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009040:	e026      	b.n	8009090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4413      	add	r3, r2
 8009048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800904a:	4b14      	ldr	r3, [pc, #80]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	429a      	cmp	r2, r3
 8009058:	d209      	bcs.n	800906e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3304      	adds	r3, #4
 8009064:	4619      	mov	r1, r3
 8009066:	4610      	mov	r0, r2
 8009068:	f7fe fc05 	bl	8007876 <vListInsert>
}
 800906c:	e010      	b.n	8009090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800906e:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	4b0a      	ldr	r3, [pc, #40]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3304      	adds	r3, #4
 8009078:	4619      	mov	r1, r3
 800907a:	4610      	mov	r0, r2
 800907c:	f7fe fbfb 	bl	8007876 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	429a      	cmp	r2, r3
 8009088:	d202      	bcs.n	8009090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800908a:	4a08      	ldr	r2, [pc, #32]	; (80090ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	6013      	str	r3, [r2, #0]
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20000bc0 	.word	0x20000bc0
 800909c:	200006e8 	.word	0x200006e8
 80090a0:	20000ba8 	.word	0x20000ba8
 80090a4:	20000b78 	.word	0x20000b78
 80090a8:	20000b74 	.word	0x20000b74
 80090ac:	20000bdc 	.word	0x20000bdc

080090b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08a      	sub	sp, #40	; 0x28
 80090b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090ba:	f000 faff 	bl	80096bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090be:	4b1c      	ldr	r3, [pc, #112]	; (8009130 <xTimerCreateTimerTask+0x80>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d021      	beq.n	800910a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090ce:	1d3a      	adds	r2, r7, #4
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	f107 030c 	add.w	r3, r7, #12
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fe fb61 	bl	80077a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	9202      	str	r2, [sp, #8]
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	2302      	movs	r3, #2
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	2300      	movs	r3, #0
 80090ee:	460a      	mov	r2, r1
 80090f0:	4910      	ldr	r1, [pc, #64]	; (8009134 <xTimerCreateTimerTask+0x84>)
 80090f2:	4811      	ldr	r0, [pc, #68]	; (8009138 <xTimerCreateTimerTask+0x88>)
 80090f4:	f7ff f8f6 	bl	80082e4 <xTaskCreateStatic>
 80090f8:	4602      	mov	r2, r0
 80090fa:	4b10      	ldr	r3, [pc, #64]	; (800913c <xTimerCreateTimerTask+0x8c>)
 80090fc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <xTimerCreateTimerTask+0x8c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009106:	2301      	movs	r3, #1
 8009108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d109      	bne.n	8009124 <xTimerCreateTimerTask+0x74>
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	613b      	str	r3, [r7, #16]
 8009122:	e7fe      	b.n	8009122 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009124:	697b      	ldr	r3, [r7, #20]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000c18 	.word	0x20000c18
 8009134:	0800a1d8 	.word	0x0800a1d8
 8009138:	08009271 	.word	0x08009271
 800913c:	20000c1c 	.word	0x20000c1c

08009140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08a      	sub	sp, #40	; 0x28
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800914e:	2300      	movs	r3, #0
 8009150:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d109      	bne.n	800916c <xTimerGenericCommand+0x2c>
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	623b      	str	r3, [r7, #32]
 800916a:	e7fe      	b.n	800916a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800916c:	4b19      	ldr	r3, [pc, #100]	; (80091d4 <xTimerGenericCommand+0x94>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d02a      	beq.n	80091ca <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2b05      	cmp	r3, #5
 8009184:	dc18      	bgt.n	80091b8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009186:	f7ff feb5 	bl	8008ef4 <xTaskGetSchedulerState>
 800918a:	4603      	mov	r3, r0
 800918c:	2b02      	cmp	r3, #2
 800918e:	d109      	bne.n	80091a4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009190:	4b10      	ldr	r3, [pc, #64]	; (80091d4 <xTimerGenericCommand+0x94>)
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	f107 0110 	add.w	r1, r7, #16
 8009198:	2300      	movs	r3, #0
 800919a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919c:	f7fe fccc 	bl	8007b38 <xQueueGenericSend>
 80091a0:	6278      	str	r0, [r7, #36]	; 0x24
 80091a2:	e012      	b.n	80091ca <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091a4:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <xTimerGenericCommand+0x94>)
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	f107 0110 	add.w	r1, r7, #16
 80091ac:	2300      	movs	r3, #0
 80091ae:	2200      	movs	r2, #0
 80091b0:	f7fe fcc2 	bl	8007b38 <xQueueGenericSend>
 80091b4:	6278      	str	r0, [r7, #36]	; 0x24
 80091b6:	e008      	b.n	80091ca <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091b8:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <xTimerGenericCommand+0x94>)
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	f107 0110 	add.w	r1, r7, #16
 80091c0:	2300      	movs	r3, #0
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	f7fe fdb2 	bl	8007d2c <xQueueGenericSendFromISR>
 80091c8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3728      	adds	r7, #40	; 0x28
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	20000c18 	.word	0x20000c18

080091d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af02      	add	r7, sp, #8
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e2:	4b22      	ldr	r3, [pc, #136]	; (800926c <prvProcessExpiredTimer+0x94>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fb79 	bl	80078e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	d021      	beq.n	8009248 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	18d1      	adds	r1, r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	6978      	ldr	r0, [r7, #20]
 8009212:	f000 f8d1 	bl	80093b8 <prvInsertTimerInActiveList>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d01e      	beq.n	800925a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800921c:	2300      	movs	r3, #0
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	2300      	movs	r3, #0
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	2100      	movs	r1, #0
 8009226:	6978      	ldr	r0, [r7, #20]
 8009228:	f7ff ff8a 	bl	8009140 <xTimerGenericCommand>
 800922c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d112      	bne.n	800925a <prvProcessExpiredTimer+0x82>
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	e7fe      	b.n	8009246 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800924e:	f023 0301 	bic.w	r3, r3, #1
 8009252:	b2da      	uxtb	r2, r3
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	6978      	ldr	r0, [r7, #20]
 8009260:	4798      	blx	r3
}
 8009262:	bf00      	nop
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000c10 	.word	0x20000c10

08009270 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009278:	f107 0308 	add.w	r3, r7, #8
 800927c:	4618      	mov	r0, r3
 800927e:	f000 f857 	bl	8009330 <prvGetNextExpireTime>
 8009282:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4619      	mov	r1, r3
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 f803 	bl	8009294 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800928e:	f000 f8d5 	bl	800943c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009292:	e7f1      	b.n	8009278 <prvTimerTask+0x8>

08009294 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800929e:	f7ff fa57 	bl	8008750 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092a2:	f107 0308 	add.w	r3, r7, #8
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f866 	bl	8009378 <prvSampleTimeNow>
 80092ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d130      	bne.n	8009316 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10a      	bne.n	80092d0 <prvProcessTimerOrBlockTask+0x3c>
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d806      	bhi.n	80092d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092c2:	f7ff fa53 	bl	800876c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff ff85 	bl	80091d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092ce:	e024      	b.n	800931a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d008      	beq.n	80092e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092d6:	4b13      	ldr	r3, [pc, #76]	; (8009324 <prvProcessTimerOrBlockTask+0x90>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <prvProcessTimerOrBlockTask+0x50>
 80092e0:	2301      	movs	r3, #1
 80092e2:	e000      	b.n	80092e6 <prvProcessTimerOrBlockTask+0x52>
 80092e4:	2300      	movs	r3, #0
 80092e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092e8:	4b0f      	ldr	r3, [pc, #60]	; (8009328 <prvProcessTimerOrBlockTask+0x94>)
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4619      	mov	r1, r3
 80092f6:	f7fe ffc1 	bl	800827c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092fa:	f7ff fa37 	bl	800876c <xTaskResumeAll>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009304:	4b09      	ldr	r3, [pc, #36]	; (800932c <prvProcessTimerOrBlockTask+0x98>)
 8009306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	f3bf 8f6f 	isb	sy
}
 8009314:	e001      	b.n	800931a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009316:	f7ff fa29 	bl	800876c <xTaskResumeAll>
}
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	20000c14 	.word	0x20000c14
 8009328:	20000c18 	.word	0x20000c18
 800932c:	e000ed04 	.word	0xe000ed04

08009330 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009338:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <prvGetNextExpireTime+0x44>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <prvGetNextExpireTime+0x16>
 8009342:	2201      	movs	r2, #1
 8009344:	e000      	b.n	8009348 <prvGetNextExpireTime+0x18>
 8009346:	2200      	movs	r2, #0
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d105      	bne.n	8009360 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009354:	4b07      	ldr	r3, [pc, #28]	; (8009374 <prvGetNextExpireTime+0x44>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60fb      	str	r3, [r7, #12]
 800935e:	e001      	b.n	8009364 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009364:	68fb      	ldr	r3, [r7, #12]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	20000c10 	.word	0x20000c10

08009378 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009380:	f7ff fa90 	bl	80088a4 <xTaskGetTickCount>
 8009384:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009386:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <prvSampleTimeNow+0x3c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	429a      	cmp	r2, r3
 800938e:	d205      	bcs.n	800939c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009390:	f000 f930 	bl	80095f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	e002      	b.n	80093a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093a2:	4a04      	ldr	r2, [pc, #16]	; (80093b4 <prvSampleTimeNow+0x3c>)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093a8:	68fb      	ldr	r3, [r7, #12]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000c20 	.word	0x20000c20

080093b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d812      	bhi.n	8009404 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	1ad2      	subs	r2, r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d302      	bcc.n	80093f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093ec:	2301      	movs	r3, #1
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	e01b      	b.n	800942a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093f2:	4b10      	ldr	r3, [pc, #64]	; (8009434 <prvInsertTimerInActiveList+0x7c>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f7fe fa3a 	bl	8007876 <vListInsert>
 8009402:	e012      	b.n	800942a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d206      	bcs.n	800941a <prvInsertTimerInActiveList+0x62>
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	429a      	cmp	r2, r3
 8009412:	d302      	bcc.n	800941a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	e007      	b.n	800942a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800941a:	4b07      	ldr	r3, [pc, #28]	; (8009438 <prvInsertTimerInActiveList+0x80>)
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3304      	adds	r3, #4
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f7fe fa26 	bl	8007876 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800942a:	697b      	ldr	r3, [r7, #20]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	20000c14 	.word	0x20000c14
 8009438:	20000c10 	.word	0x20000c10

0800943c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08e      	sub	sp, #56	; 0x38
 8009440:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009442:	e0c6      	b.n	80095d2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	da17      	bge.n	800947a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800944a:	1d3b      	adds	r3, r7, #4
 800944c:	3304      	adds	r3, #4
 800944e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	2b00      	cmp	r3, #0
 8009454:	d109      	bne.n	800946a <prvProcessReceivedCommands+0x2e>
 8009456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	e7fe      	b.n	8009468 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009470:	6850      	ldr	r0, [r2, #4]
 8009472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009474:	6892      	ldr	r2, [r2, #8]
 8009476:	4611      	mov	r1, r2
 8009478:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f2c0 80a7 	blt.w	80095d0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d004      	beq.n	8009498 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	3304      	adds	r3, #4
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fa28 	bl	80078e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009498:	463b      	mov	r3, r7
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff ff6c 	bl	8009378 <prvSampleTimeNow>
 80094a0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	f200 8094 	bhi.w	80095d2 <prvProcessReceivedCommands+0x196>
 80094aa:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <prvProcessReceivedCommands+0x74>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	080094d9 	.word	0x080094d9
 80094b4:	080094d9 	.word	0x080094d9
 80094b8:	080094d9 	.word	0x080094d9
 80094bc:	0800954b 	.word	0x0800954b
 80094c0:	0800955f 	.word	0x0800955f
 80094c4:	080095a7 	.word	0x080095a7
 80094c8:	080094d9 	.word	0x080094d9
 80094cc:	080094d9 	.word	0x080094d9
 80094d0:	0800954b 	.word	0x0800954b
 80094d4:	0800955f 	.word	0x0800955f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094de:	f043 0301 	orr.w	r3, r3, #1
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	18d1      	adds	r1, r2, r3
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094f8:	f7ff ff5e 	bl	80093b8 <prvInsertTimerInActiveList>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d067      	beq.n	80095d2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009508:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d05c      	beq.n	80095d2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	441a      	add	r2, r3
 8009520:	2300      	movs	r3, #0
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2300      	movs	r3, #0
 8009526:	2100      	movs	r1, #0
 8009528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800952a:	f7ff fe09 	bl	8009140 <xTimerGenericCommand>
 800952e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d14d      	bne.n	80095d2 <prvProcessReceivedCommands+0x196>
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	61bb      	str	r3, [r7, #24]
 8009548:	e7fe      	b.n	8009548 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009550:	f023 0301 	bic.w	r3, r3, #1
 8009554:	b2da      	uxtb	r2, r3
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800955c:	e039      	b.n	80095d2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009564:	f043 0301 	orr.w	r3, r3, #1
 8009568:	b2da      	uxtb	r2, r3
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d109      	bne.n	8009592 <prvProcessReceivedCommands+0x156>
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	e7fe      	b.n	8009590 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	699a      	ldr	r2, [r3, #24]
 8009596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009598:	18d1      	adds	r1, r2, r3
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a0:	f7ff ff0a 	bl	80093b8 <prvInsertTimerInActiveList>
					break;
 80095a4:	e015      	b.n	80095d2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ac:	f003 0302 	and.w	r3, r3, #2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d103      	bne.n	80095bc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80095b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b6:	f000 fbc5 	bl	8009d44 <vPortFree>
 80095ba:	e00a      	b.n	80095d2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c2:	f023 0301 	bic.w	r3, r3, #1
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095ce:	e000      	b.n	80095d2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80095d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095d2:	4b07      	ldr	r3, [pc, #28]	; (80095f0 <prvProcessReceivedCommands+0x1b4>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	1d39      	adds	r1, r7, #4
 80095d8:	2200      	movs	r2, #0
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fc3a 	bl	8007e54 <xQueueReceive>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f47f af2e 	bne.w	8009444 <prvProcessReceivedCommands+0x8>
	}
}
 80095e8:	bf00      	nop
 80095ea:	3730      	adds	r7, #48	; 0x30
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	20000c18 	.word	0x20000c18

080095f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095fa:	e047      	b.n	800968c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095fc:	4b2d      	ldr	r3, [pc, #180]	; (80096b4 <prvSwitchTimerLists+0xc0>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009606:	4b2b      	ldr	r3, [pc, #172]	; (80096b4 <prvSwitchTimerLists+0xc0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	3304      	adds	r3, #4
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe f967 	bl	80078e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009628:	f003 0304 	and.w	r3, r3, #4
 800962c:	2b00      	cmp	r3, #0
 800962e:	d02d      	beq.n	800968c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	4413      	add	r3, r2
 8009638:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	429a      	cmp	r2, r3
 8009640:	d90e      	bls.n	8009660 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800964e:	4b19      	ldr	r3, [pc, #100]	; (80096b4 <prvSwitchTimerLists+0xc0>)
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3304      	adds	r3, #4
 8009656:	4619      	mov	r1, r3
 8009658:	4610      	mov	r0, r2
 800965a:	f7fe f90c 	bl	8007876 <vListInsert>
 800965e:	e015      	b.n	800968c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009660:	2300      	movs	r3, #0
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	2300      	movs	r3, #0
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	2100      	movs	r1, #0
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f7ff fd68 	bl	8009140 <xTimerGenericCommand>
 8009670:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <prvSwitchTimerLists+0x98>
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	603b      	str	r3, [r7, #0]
 800968a:	e7fe      	b.n	800968a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800968c:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <prvSwitchTimerLists+0xc0>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1b2      	bne.n	80095fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009696:	4b07      	ldr	r3, [pc, #28]	; (80096b4 <prvSwitchTimerLists+0xc0>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <prvSwitchTimerLists+0xc4>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a04      	ldr	r2, [pc, #16]	; (80096b4 <prvSwitchTimerLists+0xc0>)
 80096a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096a4:	4a04      	ldr	r2, [pc, #16]	; (80096b8 <prvSwitchTimerLists+0xc4>)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	6013      	str	r3, [r2, #0]
}
 80096aa:	bf00      	nop
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20000c10 	.word	0x20000c10
 80096b8:	20000c14 	.word	0x20000c14

080096bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096c2:	f000 f963 	bl	800998c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096c6:	4b15      	ldr	r3, [pc, #84]	; (800971c <prvCheckForValidListAndQueue+0x60>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d120      	bne.n	8009710 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096ce:	4814      	ldr	r0, [pc, #80]	; (8009720 <prvCheckForValidListAndQueue+0x64>)
 80096d0:	f7fe f880 	bl	80077d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096d4:	4813      	ldr	r0, [pc, #76]	; (8009724 <prvCheckForValidListAndQueue+0x68>)
 80096d6:	f7fe f87d 	bl	80077d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096da:	4b13      	ldr	r3, [pc, #76]	; (8009728 <prvCheckForValidListAndQueue+0x6c>)
 80096dc:	4a10      	ldr	r2, [pc, #64]	; (8009720 <prvCheckForValidListAndQueue+0x64>)
 80096de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096e0:	4b12      	ldr	r3, [pc, #72]	; (800972c <prvCheckForValidListAndQueue+0x70>)
 80096e2:	4a10      	ldr	r2, [pc, #64]	; (8009724 <prvCheckForValidListAndQueue+0x68>)
 80096e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096e6:	2300      	movs	r3, #0
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	4b11      	ldr	r3, [pc, #68]	; (8009730 <prvCheckForValidListAndQueue+0x74>)
 80096ec:	4a11      	ldr	r2, [pc, #68]	; (8009734 <prvCheckForValidListAndQueue+0x78>)
 80096ee:	2110      	movs	r1, #16
 80096f0:	200a      	movs	r0, #10
 80096f2:	f7fe f98b 	bl	8007a0c <xQueueGenericCreateStatic>
 80096f6:	4602      	mov	r2, r0
 80096f8:	4b08      	ldr	r3, [pc, #32]	; (800971c <prvCheckForValidListAndQueue+0x60>)
 80096fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096fc:	4b07      	ldr	r3, [pc, #28]	; (800971c <prvCheckForValidListAndQueue+0x60>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d005      	beq.n	8009710 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009704:	4b05      	ldr	r3, [pc, #20]	; (800971c <prvCheckForValidListAndQueue+0x60>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	490b      	ldr	r1, [pc, #44]	; (8009738 <prvCheckForValidListAndQueue+0x7c>)
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fd8e 	bl	800822c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009710:	f000 f96a 	bl	80099e8 <vPortExitCritical>
}
 8009714:	bf00      	nop
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	20000c18 	.word	0x20000c18
 8009720:	20000be8 	.word	0x20000be8
 8009724:	20000bfc 	.word	0x20000bfc
 8009728:	20000c10 	.word	0x20000c10
 800972c:	20000c14 	.word	0x20000c14
 8009730:	20000cc4 	.word	0x20000cc4
 8009734:	20000c24 	.word	0x20000c24
 8009738:	0800a1e0 	.word	0x0800a1e0

0800973c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3b04      	subs	r3, #4
 800974c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3b04      	subs	r3, #4
 800975a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f023 0201 	bic.w	r2, r3, #1
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3b04      	subs	r3, #4
 800976a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800976c:	4a0c      	ldr	r2, [pc, #48]	; (80097a0 <pxPortInitialiseStack+0x64>)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3b14      	subs	r3, #20
 8009776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3b04      	subs	r3, #4
 8009782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f06f 0202 	mvn.w	r2, #2
 800978a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3b20      	subs	r3, #32
 8009790:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009792:	68fb      	ldr	r3, [r7, #12]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	080097a5 	.word	0x080097a5

080097a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097ae:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <prvTaskExitError+0x50>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b6:	d009      	beq.n	80097cc <prvTaskExitError+0x28>
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	e7fe      	b.n	80097ca <prvTaskExitError+0x26>
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097de:	bf00      	nop
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0fc      	beq.n	80097e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097e6:	bf00      	nop
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	2000000c 	.word	0x2000000c
	...

08009800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <pxCurrentTCBConst2>)
 8009802:	6819      	ldr	r1, [r3, #0]
 8009804:	6808      	ldr	r0, [r1, #0]
 8009806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980a:	f380 8809 	msr	PSP, r0
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f04f 0000 	mov.w	r0, #0
 8009816:	f380 8811 	msr	BASEPRI, r0
 800981a:	4770      	bx	lr
 800981c:	f3af 8000 	nop.w

08009820 <pxCurrentTCBConst2>:
 8009820:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop

08009828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009828:	4808      	ldr	r0, [pc, #32]	; (800984c <prvPortStartFirstTask+0x24>)
 800982a:	6800      	ldr	r0, [r0, #0]
 800982c:	6800      	ldr	r0, [r0, #0]
 800982e:	f380 8808 	msr	MSP, r0
 8009832:	f04f 0000 	mov.w	r0, #0
 8009836:	f380 8814 	msr	CONTROL, r0
 800983a:	b662      	cpsie	i
 800983c:	b661      	cpsie	f
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	df00      	svc	0
 8009848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800984a:	bf00      	nop
 800984c:	e000ed08 	.word	0xe000ed08

08009850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009856:	4b44      	ldr	r3, [pc, #272]	; (8009968 <xPortStartScheduler+0x118>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a44      	ldr	r2, [pc, #272]	; (800996c <xPortStartScheduler+0x11c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d109      	bne.n	8009874 <xPortStartScheduler+0x24>
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	613b      	str	r3, [r7, #16]
 8009872:	e7fe      	b.n	8009872 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009874:	4b3c      	ldr	r3, [pc, #240]	; (8009968 <xPortStartScheduler+0x118>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a3d      	ldr	r2, [pc, #244]	; (8009970 <xPortStartScheduler+0x120>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d109      	bne.n	8009892 <xPortStartScheduler+0x42>
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	e7fe      	b.n	8009890 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009892:	4b38      	ldr	r3, [pc, #224]	; (8009974 <xPortStartScheduler+0x124>)
 8009894:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	b2db      	uxtb	r3, r3
 800989c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	22ff      	movs	r2, #255	; 0xff
 80098a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	4b30      	ldr	r3, [pc, #192]	; (8009978 <xPortStartScheduler+0x128>)
 80098b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098ba:	4b30      	ldr	r3, [pc, #192]	; (800997c <xPortStartScheduler+0x12c>)
 80098bc:	2207      	movs	r2, #7
 80098be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098c0:	e009      	b.n	80098d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80098c2:	4b2e      	ldr	r3, [pc, #184]	; (800997c <xPortStartScheduler+0x12c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	4a2c      	ldr	r2, [pc, #176]	; (800997c <xPortStartScheduler+0x12c>)
 80098ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	005b      	lsls	r3, r3, #1
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098d6:	78fb      	ldrb	r3, [r7, #3]
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098de:	2b80      	cmp	r3, #128	; 0x80
 80098e0:	d0ef      	beq.n	80098c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098e2:	4b26      	ldr	r3, [pc, #152]	; (800997c <xPortStartScheduler+0x12c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f1c3 0307 	rsb	r3, r3, #7
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	d009      	beq.n	8009902 <xPortStartScheduler+0xb2>
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	60bb      	str	r3, [r7, #8]
 8009900:	e7fe      	b.n	8009900 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009902:	4b1e      	ldr	r3, [pc, #120]	; (800997c <xPortStartScheduler+0x12c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	021b      	lsls	r3, r3, #8
 8009908:	4a1c      	ldr	r2, [pc, #112]	; (800997c <xPortStartScheduler+0x12c>)
 800990a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800990c:	4b1b      	ldr	r3, [pc, #108]	; (800997c <xPortStartScheduler+0x12c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009914:	4a19      	ldr	r2, [pc, #100]	; (800997c <xPortStartScheduler+0x12c>)
 8009916:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	b2da      	uxtb	r2, r3
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009920:	4b17      	ldr	r3, [pc, #92]	; (8009980 <xPortStartScheduler+0x130>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a16      	ldr	r2, [pc, #88]	; (8009980 <xPortStartScheduler+0x130>)
 8009926:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800992a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800992c:	4b14      	ldr	r3, [pc, #80]	; (8009980 <xPortStartScheduler+0x130>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a13      	ldr	r2, [pc, #76]	; (8009980 <xPortStartScheduler+0x130>)
 8009932:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009936:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009938:	f000 f8d6 	bl	8009ae8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800993c:	4b11      	ldr	r3, [pc, #68]	; (8009984 <xPortStartScheduler+0x134>)
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009942:	f000 f8f5 	bl	8009b30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009946:	4b10      	ldr	r3, [pc, #64]	; (8009988 <xPortStartScheduler+0x138>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a0f      	ldr	r2, [pc, #60]	; (8009988 <xPortStartScheduler+0x138>)
 800994c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009950:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009952:	f7ff ff69 	bl	8009828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009956:	f7ff f86d 	bl	8008a34 <vTaskSwitchContext>
	prvTaskExitError();
 800995a:	f7ff ff23 	bl	80097a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	e000ed00 	.word	0xe000ed00
 800996c:	410fc271 	.word	0x410fc271
 8009970:	410fc270 	.word	0x410fc270
 8009974:	e000e400 	.word	0xe000e400
 8009978:	20000d14 	.word	0x20000d14
 800997c:	20000d18 	.word	0x20000d18
 8009980:	e000ed20 	.word	0xe000ed20
 8009984:	2000000c 	.word	0x2000000c
 8009988:	e000ef34 	.word	0xe000ef34

0800998c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099a4:	4b0e      	ldr	r3, [pc, #56]	; (80099e0 <vPortEnterCritical+0x54>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3301      	adds	r3, #1
 80099aa:	4a0d      	ldr	r2, [pc, #52]	; (80099e0 <vPortEnterCritical+0x54>)
 80099ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099ae:	4b0c      	ldr	r3, [pc, #48]	; (80099e0 <vPortEnterCritical+0x54>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d10e      	bne.n	80099d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <vPortEnterCritical+0x58>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d009      	beq.n	80099d4 <vPortEnterCritical+0x48>
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	603b      	str	r3, [r7, #0]
 80099d2:	e7fe      	b.n	80099d2 <vPortEnterCritical+0x46>
	}
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	2000000c 	.word	0x2000000c
 80099e4:	e000ed04 	.word	0xe000ed04

080099e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099ee:	4b11      	ldr	r3, [pc, #68]	; (8009a34 <vPortExitCritical+0x4c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d109      	bne.n	8009a0a <vPortExitCritical+0x22>
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	607b      	str	r3, [r7, #4]
 8009a08:	e7fe      	b.n	8009a08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009a0a:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <vPortExitCritical+0x4c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	4a08      	ldr	r2, [pc, #32]	; (8009a34 <vPortExitCritical+0x4c>)
 8009a12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a14:	4b07      	ldr	r3, [pc, #28]	; (8009a34 <vPortExitCritical+0x4c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d104      	bne.n	8009a26 <vPortExitCritical+0x3e>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	2000000c 	.word	0x2000000c
	...

08009a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a40:	f3ef 8009 	mrs	r0, PSP
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <pxCurrentTCBConst>)
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	f01e 0f10 	tst.w	lr, #16
 8009a50:	bf08      	it	eq
 8009a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5a:	6010      	str	r0, [r2, #0]
 8009a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a64:	f380 8811 	msr	BASEPRI, r0
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f7fe ffe0 	bl	8008a34 <vTaskSwitchContext>
 8009a74:	f04f 0000 	mov.w	r0, #0
 8009a78:	f380 8811 	msr	BASEPRI, r0
 8009a7c:	bc09      	pop	{r0, r3}
 8009a7e:	6819      	ldr	r1, [r3, #0]
 8009a80:	6808      	ldr	r0, [r1, #0]
 8009a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a86:	f01e 0f10 	tst.w	lr, #16
 8009a8a:	bf08      	it	eq
 8009a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a90:	f380 8809 	msr	PSP, r0
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	f3af 8000 	nop.w

08009aa0 <pxCurrentTCBConst>:
 8009aa0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop

08009aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ac0:	f7fe ff00 	bl	80088c4 <xTaskIncrementTick>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009aca:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <SysTick_Handler+0x3c>)
 8009acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009adc:	bf00      	nop
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	e000ed04 	.word	0xe000ed04

08009ae8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ae8:	b480      	push	{r7}
 8009aea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009aec:	4b0b      	ldr	r3, [pc, #44]	; (8009b1c <vPortSetupTimerInterrupt+0x34>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009af2:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <vPortSetupTimerInterrupt+0x38>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009af8:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <vPortSetupTimerInterrupt+0x3c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a0a      	ldr	r2, [pc, #40]	; (8009b28 <vPortSetupTimerInterrupt+0x40>)
 8009afe:	fba2 2303 	umull	r2, r3, r2, r3
 8009b02:	099b      	lsrs	r3, r3, #6
 8009b04:	4a09      	ldr	r2, [pc, #36]	; (8009b2c <vPortSetupTimerInterrupt+0x44>)
 8009b06:	3b01      	subs	r3, #1
 8009b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b0a:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <vPortSetupTimerInterrupt+0x34>)
 8009b0c:	2207      	movs	r2, #7
 8009b0e:	601a      	str	r2, [r3, #0]
}
 8009b10:	bf00      	nop
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	e000e010 	.word	0xe000e010
 8009b20:	e000e018 	.word	0xe000e018
 8009b24:	20000000 	.word	0x20000000
 8009b28:	10624dd3 	.word	0x10624dd3
 8009b2c:	e000e014 	.word	0xe000e014

08009b30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b40 <vPortEnableVFP+0x10>
 8009b34:	6801      	ldr	r1, [r0, #0]
 8009b36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b3a:	6001      	str	r1, [r0, #0]
 8009b3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b3e:	bf00      	nop
 8009b40:	e000ed88 	.word	0xe000ed88

08009b44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b4a:	f3ef 8305 	mrs	r3, IPSR
 8009b4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2b0f      	cmp	r3, #15
 8009b54:	d913      	bls.n	8009b7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b56:	4a16      	ldr	r2, [pc, #88]	; (8009bb0 <vPortValidateInterruptPriority+0x6c>)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b60:	4b14      	ldr	r3, [pc, #80]	; (8009bb4 <vPortValidateInterruptPriority+0x70>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	7afa      	ldrb	r2, [r7, #11]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d209      	bcs.n	8009b7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	607b      	str	r3, [r7, #4]
 8009b7c:	e7fe      	b.n	8009b7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b7e:	4b0e      	ldr	r3, [pc, #56]	; (8009bb8 <vPortValidateInterruptPriority+0x74>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b86:	4b0d      	ldr	r3, [pc, #52]	; (8009bbc <vPortValidateInterruptPriority+0x78>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d909      	bls.n	8009ba2 <vPortValidateInterruptPriority+0x5e>
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	e7fe      	b.n	8009ba0 <vPortValidateInterruptPriority+0x5c>
	}
 8009ba2:	bf00      	nop
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	e000e3f0 	.word	0xe000e3f0
 8009bb4:	20000d14 	.word	0x20000d14
 8009bb8:	e000ed0c 	.word	0xe000ed0c
 8009bbc:	20000d18 	.word	0x20000d18

08009bc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	; 0x28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bcc:	f7fe fdc0 	bl	8008750 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bd0:	4b57      	ldr	r3, [pc, #348]	; (8009d30 <pvPortMalloc+0x170>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bd8:	f000 f90c 	bl	8009df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bdc:	4b55      	ldr	r3, [pc, #340]	; (8009d34 <pvPortMalloc+0x174>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4013      	ands	r3, r2
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f040 808c 	bne.w	8009d02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01c      	beq.n	8009c2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d013      	beq.n	8009c2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f023 0307 	bic.w	r3, r3, #7
 8009c08:	3308      	adds	r3, #8
 8009c0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f003 0307 	and.w	r3, r3, #7
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d009      	beq.n	8009c2a <pvPortMalloc+0x6a>
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	617b      	str	r3, [r7, #20]
 8009c28:	e7fe      	b.n	8009c28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d068      	beq.n	8009d02 <pvPortMalloc+0x142>
 8009c30:	4b41      	ldr	r3, [pc, #260]	; (8009d38 <pvPortMalloc+0x178>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d863      	bhi.n	8009d02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c3a:	4b40      	ldr	r3, [pc, #256]	; (8009d3c <pvPortMalloc+0x17c>)
 8009c3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c3e:	4b3f      	ldr	r3, [pc, #252]	; (8009d3c <pvPortMalloc+0x17c>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c44:	e004      	b.n	8009c50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d903      	bls.n	8009c62 <pvPortMalloc+0xa2>
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1f1      	bne.n	8009c46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c62:	4b33      	ldr	r3, [pc, #204]	; (8009d30 <pvPortMalloc+0x170>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d04a      	beq.n	8009d02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2208      	movs	r2, #8
 8009c72:	4413      	add	r3, r2
 8009c74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	1ad2      	subs	r2, r2, r3
 8009c86:	2308      	movs	r3, #8
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d91e      	bls.n	8009ccc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4413      	add	r3, r2
 8009c94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	f003 0307 	and.w	r3, r3, #7
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d009      	beq.n	8009cb4 <pvPortMalloc+0xf4>
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	613b      	str	r3, [r7, #16]
 8009cb2:	e7fe      	b.n	8009cb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	1ad2      	subs	r2, r2, r3
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cc6:	69b8      	ldr	r0, [r7, #24]
 8009cc8:	f000 f8f6 	bl	8009eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ccc:	4b1a      	ldr	r3, [pc, #104]	; (8009d38 <pvPortMalloc+0x178>)
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	4a18      	ldr	r2, [pc, #96]	; (8009d38 <pvPortMalloc+0x178>)
 8009cd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cda:	4b17      	ldr	r3, [pc, #92]	; (8009d38 <pvPortMalloc+0x178>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4b18      	ldr	r3, [pc, #96]	; (8009d40 <pvPortMalloc+0x180>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d203      	bcs.n	8009cee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ce6:	4b14      	ldr	r3, [pc, #80]	; (8009d38 <pvPortMalloc+0x178>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a15      	ldr	r2, [pc, #84]	; (8009d40 <pvPortMalloc+0x180>)
 8009cec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	4b10      	ldr	r3, [pc, #64]	; (8009d34 <pvPortMalloc+0x174>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	2200      	movs	r2, #0
 8009d00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d02:	f7fe fd33 	bl	800876c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	f003 0307 	and.w	r3, r3, #7
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d009      	beq.n	8009d24 <pvPortMalloc+0x164>
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	e7fe      	b.n	8009d22 <pvPortMalloc+0x162>
	return pvReturn;
 8009d24:	69fb      	ldr	r3, [r7, #28]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3728      	adds	r7, #40	; 0x28
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	200018dc 	.word	0x200018dc
 8009d34:	200018e8 	.word	0x200018e8
 8009d38:	200018e0 	.word	0x200018e0
 8009d3c:	200018d4 	.word	0x200018d4
 8009d40:	200018e4 	.word	0x200018e4

08009d44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d046      	beq.n	8009de4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d56:	2308      	movs	r3, #8
 8009d58:	425b      	negs	r3, r3
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	4b20      	ldr	r3, [pc, #128]	; (8009dec <vPortFree+0xa8>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d109      	bne.n	8009d86 <vPortFree+0x42>
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	e7fe      	b.n	8009d84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d009      	beq.n	8009da2 <vPortFree+0x5e>
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	60bb      	str	r3, [r7, #8]
 8009da0:	e7fe      	b.n	8009da0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	4b11      	ldr	r3, [pc, #68]	; (8009dec <vPortFree+0xa8>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4013      	ands	r3, r2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d019      	beq.n	8009de4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d115      	bne.n	8009de4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <vPortFree+0xa8>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	401a      	ands	r2, r3
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009dc8:	f7fe fcc2 	bl	8008750 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	4b07      	ldr	r3, [pc, #28]	; (8009df0 <vPortFree+0xac>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	4a06      	ldr	r2, [pc, #24]	; (8009df0 <vPortFree+0xac>)
 8009dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dda:	6938      	ldr	r0, [r7, #16]
 8009ddc:	f000 f86c 	bl	8009eb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009de0:	f7fe fcc4 	bl	800876c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009de4:	bf00      	nop
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	200018e8 	.word	0x200018e8
 8009df0:	200018e0 	.word	0x200018e0

08009df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009dfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e00:	4b27      	ldr	r3, [pc, #156]	; (8009ea0 <prvHeapInit+0xac>)
 8009e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f003 0307 	and.w	r3, r3, #7
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00c      	beq.n	8009e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3307      	adds	r3, #7
 8009e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0307 	bic.w	r3, r3, #7
 8009e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	4a1f      	ldr	r2, [pc, #124]	; (8009ea0 <prvHeapInit+0xac>)
 8009e24:	4413      	add	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e2c:	4a1d      	ldr	r2, [pc, #116]	; (8009ea4 <prvHeapInit+0xb0>)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e32:	4b1c      	ldr	r3, [pc, #112]	; (8009ea4 <prvHeapInit+0xb0>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e40:	2208      	movs	r2, #8
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	1a9b      	subs	r3, r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f023 0307 	bic.w	r3, r3, #7
 8009e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4a15      	ldr	r2, [pc, #84]	; (8009ea8 <prvHeapInit+0xb4>)
 8009e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e56:	4b14      	ldr	r3, [pc, #80]	; (8009ea8 <prvHeapInit+0xb4>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e5e:	4b12      	ldr	r3, [pc, #72]	; (8009ea8 <prvHeapInit+0xb4>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	1ad2      	subs	r2, r2, r3
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e74:	4b0c      	ldr	r3, [pc, #48]	; (8009ea8 <prvHeapInit+0xb4>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	4a0a      	ldr	r2, [pc, #40]	; (8009eac <prvHeapInit+0xb8>)
 8009e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	4a09      	ldr	r2, [pc, #36]	; (8009eb0 <prvHeapInit+0xbc>)
 8009e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e8c:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <prvHeapInit+0xc0>)
 8009e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e92:	601a      	str	r2, [r3, #0]
}
 8009e94:	bf00      	nop
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	20000d1c 	.word	0x20000d1c
 8009ea4:	200018d4 	.word	0x200018d4
 8009ea8:	200018dc 	.word	0x200018dc
 8009eac:	200018e4 	.word	0x200018e4
 8009eb0:	200018e0 	.word	0x200018e0
 8009eb4:	200018e8 	.word	0x200018e8

08009eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ec0:	4b28      	ldr	r3, [pc, #160]	; (8009f64 <prvInsertBlockIntoFreeList+0xac>)
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	e002      	b.n	8009ecc <prvInsertBlockIntoFreeList+0x14>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d8f7      	bhi.n	8009ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d108      	bne.n	8009efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	441a      	add	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	441a      	add	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d118      	bne.n	8009f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	4b15      	ldr	r3, [pc, #84]	; (8009f68 <prvInsertBlockIntoFreeList+0xb0>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d00d      	beq.n	8009f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	441a      	add	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	e008      	b.n	8009f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f36:	4b0c      	ldr	r3, [pc, #48]	; (8009f68 <prvInsertBlockIntoFreeList+0xb0>)
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	e003      	b.n	8009f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d002      	beq.n	8009f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f56:	bf00      	nop
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	200018d4 	.word	0x200018d4
 8009f68:	200018dc 	.word	0x200018dc

08009f6c <__libc_init_array>:
 8009f6c:	b570      	push	{r4, r5, r6, lr}
 8009f6e:	4e0d      	ldr	r6, [pc, #52]	; (8009fa4 <__libc_init_array+0x38>)
 8009f70:	4c0d      	ldr	r4, [pc, #52]	; (8009fa8 <__libc_init_array+0x3c>)
 8009f72:	1ba4      	subs	r4, r4, r6
 8009f74:	10a4      	asrs	r4, r4, #2
 8009f76:	2500      	movs	r5, #0
 8009f78:	42a5      	cmp	r5, r4
 8009f7a:	d109      	bne.n	8009f90 <__libc_init_array+0x24>
 8009f7c:	4e0b      	ldr	r6, [pc, #44]	; (8009fac <__libc_init_array+0x40>)
 8009f7e:	4c0c      	ldr	r4, [pc, #48]	; (8009fb0 <__libc_init_array+0x44>)
 8009f80:	f000 f82c 	bl	8009fdc <_init>
 8009f84:	1ba4      	subs	r4, r4, r6
 8009f86:	10a4      	asrs	r4, r4, #2
 8009f88:	2500      	movs	r5, #0
 8009f8a:	42a5      	cmp	r5, r4
 8009f8c:	d105      	bne.n	8009f9a <__libc_init_array+0x2e>
 8009f8e:	bd70      	pop	{r4, r5, r6, pc}
 8009f90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f94:	4798      	blx	r3
 8009f96:	3501      	adds	r5, #1
 8009f98:	e7ee      	b.n	8009f78 <__libc_init_array+0xc>
 8009f9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f9e:	4798      	blx	r3
 8009fa0:	3501      	adds	r5, #1
 8009fa2:	e7f2      	b.n	8009f8a <__libc_init_array+0x1e>
 8009fa4:	0800a4bc 	.word	0x0800a4bc
 8009fa8:	0800a4bc 	.word	0x0800a4bc
 8009fac:	0800a4bc 	.word	0x0800a4bc
 8009fb0:	0800a4c0 	.word	0x0800a4c0

08009fb4 <memcpy>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	1e43      	subs	r3, r0, #1
 8009fb8:	440a      	add	r2, r1
 8009fba:	4291      	cmp	r1, r2
 8009fbc:	d100      	bne.n	8009fc0 <memcpy+0xc>
 8009fbe:	bd10      	pop	{r4, pc}
 8009fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fc8:	e7f7      	b.n	8009fba <memcpy+0x6>

08009fca <memset>:
 8009fca:	4402      	add	r2, r0
 8009fcc:	4603      	mov	r3, r0
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d100      	bne.n	8009fd4 <memset+0xa>
 8009fd2:	4770      	bx	lr
 8009fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8009fd8:	e7f9      	b.n	8009fce <memset+0x4>
	...

08009fdc <_init>:
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fde:	bf00      	nop
 8009fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe2:	bc08      	pop	{r3}
 8009fe4:	469e      	mov	lr, r3
 8009fe6:	4770      	bx	lr

08009fe8 <_fini>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	bf00      	nop
 8009fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fee:	bc08      	pop	{r3}
 8009ff0:	469e      	mov	lr, r3
 8009ff2:	4770      	bx	lr
